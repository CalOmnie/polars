Search.setIndex({"docnames": ["index", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.cleared", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.n_unique", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.reverse", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.take_every", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.unstack", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.cleared", "reference/api/polars.LazyFrame.clone", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.columns", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.dtypes", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.profile", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.schema", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.take_every", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_context", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.arg_where", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/conversion", "reference/series/descriptive", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.cleared.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.n_unique.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.reverse.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.take_every.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.unstack.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.cleared.rst", "reference/api/polars.LazyFrame.clone.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.columns.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.dtypes.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.profile.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.schema.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.take_every.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_context.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/conversion.rst", "reference/series/descriptive.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.arg_where", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "DataFrame", "Data Types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation / selection", "Strings", "Struct", "Time series", "Window", "Functions", "API reference", "Input/output", "LazyFrame", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Boolean", "Categories", "Computation", "Conversion", "Descriptive", "Series", "Miscellaneous", "Manipulation / selection", "Strings", "Struct", "Time series", "SQL", "Testing", "Utils"], "terms": {"api": [0, 23, 227, 229, 252, 255, 268, 281, 283, 293], "refer": [0, 108, 257, 258, 259, 441, 497, 740, 801], "input": [0, 200, 257, 258, 259, 418, 426, 477, 520, 538, 545, 546, 549, 578, 722, 781], "output": [0, 23, 44, 45, 67, 69, 104, 112, 114, 115, 145, 146, 154, 184, 205, 252, 259, 275, 289, 293, 420, 421, 425, 515, 520, 545, 556, 578, 587, 826], "seri": [0, 18, 22, 23, 29, 37, 39, 41, 42, 46, 49, 50, 52, 54, 59, 60, 63, 74, 75, 81, 89, 93, 98, 99, 108, 109, 141, 167, 180, 181, 191, 201, 203, 204, 205, 218, 219, 222, 228, 255, 274, 275, 277, 281, 292, 293, 294, 295, 296, 297, 298, 299, 302, 304, 305, 306, 307, 309, 313, 314, 321, 322, 325, 326, 330, 331, 335, 336, 348, 349, 351, 354, 357, 359, 361, 364, 368, 370, 373, 374, 377, 378, 386, 387, 392, 393, 397, 399, 401, 402, 403, 404, 405, 407, 408, 409, 419, 420, 437, 441, 442, 443, 444, 445, 447, 460, 463, 466, 467, 474, 491, 497, 501, 506, 507, 508, 509, 514, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 538, 539, 542, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 557, 558, 559, 560, 561, 569, 578, 830, 833, 835, 840, 841], "datafram": [0, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 128, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 189, 191, 200, 201, 202, 203, 204, 218, 219, 220, 221, 222, 223, 224, 226, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 269, 270, 271, 273, 275, 276, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 524, 525, 526, 527, 532, 535, 536, 537, 540, 555, 558, 559, 562, 578, 586, 606, 622, 626, 641, 784, 786, 797, 798, 808, 817, 818, 826], "lazyfram": [0, 22, 57, 188, 190, 200, 202, 203, 267, 268, 269, 270, 271, 273, 277, 390, 578, 843], "express": [0, 23, 35, 37, 43, 65, 69, 77, 87, 109, 130, 138, 141, 161, 169, 170, 172, 180, 181, 182, 201, 202, 205, 227, 229, 251, 252, 275, 277, 278, 289, 290, 292, 293, 310, 332, 333, 334, 337, 343, 345, 365, 384, 390, 397, 399, 403, 406, 411, 414, 419, 420, 421, 425, 426, 437, 438, 439, 444, 458, 459, 460, 462, 469, 482, 497, 503, 506, 512, 514, 517, 521, 524, 525, 529, 530, 531, 532, 536, 537, 538, 539, 540, 544, 545, 551, 553, 554, 555, 556, 558, 559, 562, 568, 578, 606, 630, 631, 632, 640, 668, 758, 765, 786], "function": [0, 23, 32, 39, 62, 68, 69, 100, 103, 154, 158, 160, 201, 204, 229, 239, 252, 257, 258, 259, 267, 276, 290, 293, 326, 343, 368, 381, 382, 383, 420, 421, 435, 447, 448, 449, 450, 451, 452, 454, 455, 456, 468, 510, 518, 520, 530, 531, 538, 539, 545, 553, 569, 578, 587, 622, 640, 671, 685, 686, 687, 688, 746, 760, 761, 767, 772], "data": [0, 11, 14, 22, 24, 25, 34, 55, 57, 68, 72, 78, 79, 85, 92, 96, 97, 117, 128, 129, 138, 160, 191, 200, 203, 209, 210, 215, 216, 218, 219, 220, 221, 222, 223, 251, 257, 258, 259, 260, 261, 265, 266, 267, 273, 274, 276, 277, 278, 329, 348, 369, 377, 398, 405, 407, 441, 457, 458, 468, 510, 512, 524, 556, 578, 586, 624, 629, 633, 645, 647, 680, 683, 740, 756, 757, 767, 772, 819, 820, 822, 824, 828, 835], "type": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 31, 33, 39, 44, 45, 46, 60, 80, 92, 96, 97, 99, 101, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 136, 138, 145, 146, 154, 161, 166, 170, 177, 178, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 202, 205, 209, 218, 220, 223, 225, 252, 255, 257, 258, 259, 261, 265, 267, 272, 273, 274, 275, 276, 277, 278, 280, 281, 293, 314, 326, 329, 330, 332, 333, 334, 349, 351, 354, 357, 359, 361, 364, 370, 378, 384, 395, 399, 401, 403, 404, 420, 444, 492, 493, 494, 497, 510, 520, 521, 525, 533, 534, 535, 537, 538, 544, 545, 578, 587, 610, 622, 624, 626, 630, 631, 632, 648, 650, 653, 659, 661, 664, 667, 673, 681, 683, 698, 700, 767, 796, 797, 798, 801, 819, 820, 822, 829], "config": [0, 109, 181, 578], "except": [0, 56, 151, 578, 820, 828], "test": [0, 147, 153, 259, 578], "util": [0, 138, 578], "sql": [0, 55, 188, 266, 578], "class": [1, 2, 3, 5, 22, 31, 80, 96, 97, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 136, 166, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 222, 275, 276, 578, 580, 683, 819, 820, 843], "arg": [1, 2, 3, 68, 97, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 160, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 540, 587, 820], "ani": [1, 2, 3, 5, 22, 23, 30, 34, 36, 37, 39, 67, 68, 77, 78, 93, 94, 96, 97, 103, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 135, 140, 160, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 219, 220, 221, 223, 257, 258, 267, 275, 277, 278, 293, 307, 310, 329, 369, 389, 403, 420, 428, 445, 447, 462, 470, 497, 506, 520, 538, 544, 556, 569, 586, 587, 603, 606, 672, 693, 709, 744, 746, 761, 801, 811, 819, 820, 837], "kwarg": [1, 2, 3, 68, 97, 109, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 160, 181, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 820], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 843], "method": [1, 2, 3, 5, 22, 30, 51, 65, 71, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 135, 149, 162, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 240, 257, 258, 259, 275, 290, 374, 440, 441, 448, 449, 450, 451, 452, 454, 455, 456, 513, 552, 563, 565, 570, 573, 574, 575, 578, 587, 677, 701, 739, 740, 751, 822, 830, 833, 837, 840, 841, 842], "string_repr": [1, 2, 3, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199], "__init__": [1, 2, 3, 22, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 275], "A": [3, 39, 44, 56, 67, 69, 93, 95, 103, 104, 112, 145, 151, 172, 188, 202, 205, 224, 239, 257, 258, 267, 287, 326, 351, 354, 357, 359, 361, 364, 370, 401, 404, 405, 407, 420, 421, 426, 438, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 475, 476, 480, 481, 482, 500, 503, 525, 526, 536, 540, 622, 650, 653, 659, 661, 664, 667, 673, 746, 747, 748, 750, 753, 754, 755, 779, 780, 784, 785, 786, 791, 792, 801, 804], "encod": [3, 95, 199, 257, 258, 267, 477, 569, 781, 837], "set": [3, 4, 5, 6, 7, 8, 9, 10, 13, 18, 19, 21, 22, 26, 46, 56, 62, 79, 86, 100, 112, 114, 115, 130, 131, 138, 150, 151, 154, 158, 171, 184, 205, 220, 223, 252, 257, 258, 259, 260, 264, 267, 269, 270, 271, 273, 274, 276, 277, 278, 293, 322, 377, 378, 395, 403, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 464, 468, 469, 491, 578, 586, 587, 618, 680, 681, 695, 698, 709, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 761, 772, 773, 795, 820, 837], "string": [3, 4, 6, 8, 9, 13, 39, 44, 45, 56, 60, 87, 103, 104, 112, 114, 115, 119, 130, 132, 133, 138, 143, 145, 146, 151, 184, 191, 199, 205, 257, 258, 267, 275, 276, 278, 280, 314, 330, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 474, 475, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 500, 525, 527, 540, 569, 578, 610, 626, 668, 671, 676, 777, 778, 779, 783, 785, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 803, 804, 837], "classmethod": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 143, 163], "cfg": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "str": [4, 6, 9, 10, 13, 14, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 41, 43, 44, 45, 47, 49, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 71, 73, 74, 75, 76, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 119, 131, 132, 133, 134, 135, 137, 141, 143, 144, 145, 146, 148, 150, 151, 154, 158, 163, 164, 166, 167, 169, 170, 171, 172, 177, 178, 181, 183, 184, 188, 189, 190, 191, 192, 200, 204, 205, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 275, 276, 277, 278, 288, 289, 293, 307, 308, 312, 313, 314, 322, 325, 326, 345, 349, 365, 368, 371, 373, 374, 378, 384, 387, 388, 390, 392, 397, 403, 406, 421, 425, 427, 435, 438, 444, 446, 448, 449, 450, 451, 452, 454, 455, 456, 462, 463, 470, 471, 501, 502, 503, 506, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 569, 573, 583, 604, 610, 622, 624, 641, 648, 668, 671, 674, 676, 677, 681, 691, 693, 695, 723, 726, 730, 731, 732, 743, 760, 761, 805, 807, 818, 837, 840], "previous": 4, "save": [4, 578], "share": [4, 32, 191, 685], "option": [4, 5, 6, 23, 30, 46, 56, 62, 65, 77, 79, 86, 93, 95, 100, 104, 109, 135, 150, 151, 158, 170, 171, 181, 200, 204, 205, 219, 220, 224, 252, 255, 257, 259, 260, 264, 266, 269, 270, 271, 272, 275, 276, 277, 278, 281, 293, 322, 328, 368, 373, 381, 382, 383, 394, 395, 412, 420, 447, 448, 449, 450, 451, 452, 454, 455, 456, 464, 468, 469, 485, 490, 491, 496, 497, 518, 520, 521, 534, 535, 544, 545, 578, 587, 718, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 761, 768, 772, 789, 794, 795, 800, 818, 819], "paramet": [4, 8, 9, 10, 13, 18, 19, 21, 22, 23, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 55, 56, 58, 60, 62, 64, 65, 67, 68, 69, 71, 73, 74, 75, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 130, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 153, 154, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 175, 177, 178, 180, 181, 182, 183, 184, 185, 188, 190, 192, 200, 201, 202, 203, 204, 205, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 232, 239, 240, 242, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 289, 292, 293, 302, 304, 307, 308, 309, 310, 312, 313, 314, 321, 322, 325, 326, 328, 329, 330, 332, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 352, 365, 368, 372, 373, 374, 377, 378, 380, 381, 382, 383, 384, 387, 389, 390, 394, 395, 396, 399, 403, 412, 415, 417, 420, 421, 435, 436, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 505, 506, 511, 512, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 539, 540, 542, 544, 545, 546, 551, 552, 553, 554, 555, 556, 558, 559, 560, 583, 586, 587, 596, 599, 603, 604, 605, 606, 608, 609, 610, 617, 618, 621, 622, 624, 626, 630, 631, 632, 636, 637, 638, 639, 640, 642, 643, 647, 648, 651, 668, 671, 675, 676, 677, 680, 681, 684, 685, 686, 687, 688, 691, 692, 693, 694, 698, 699, 718, 720, 735, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 768, 772, 773, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 807, 810, 811, 818, 819, 820, 823, 824, 826, 827, 828, 829], "json": [4, 6, 114, 115, 143, 163, 184, 262, 263, 270, 482, 578, 786], "produc": [4, 277, 278, 425, 545], "reset": 5, "all": [5, 10, 13, 18, 21, 22, 30, 36, 52, 54, 57, 60, 62, 64, 65, 72, 86, 95, 104, 117, 135, 140, 154, 158, 171, 202, 203, 205, 218, 220, 222, 223, 224, 257, 258, 259, 260, 267, 269, 270, 275, 276, 278, 291, 292, 310, 314, 324, 328, 337, 343, 384, 394, 395, 398, 401, 404, 408, 409, 411, 414, 416, 420, 421, 430, 434, 438, 441, 446, 463, 469, 476, 481, 482, 487, 488, 503, 515, 525, 537, 558, 569, 578, 606, 610, 620, 640, 704, 716, 740, 773, 780, 785, 786, 791, 792, 837], "default": [5, 13, 21, 22, 32, 43, 45, 46, 56, 62, 69, 79, 110, 111, 112, 113, 114, 115, 116, 144, 146, 151, 158, 184, 218, 219, 221, 222, 223, 255, 257, 258, 267, 275, 276, 277, 278, 281, 322, 326, 330, 380, 395, 399, 417, 432, 433, 436, 441, 458, 464, 480, 491, 497, 521, 522, 544, 556, 618, 622, 626, 684, 685, 698, 731, 732, 735, 740, 757, 776, 784, 795, 827], "state": [5, 130, 138, 161, 170, 202, 213, 530, 578], "note": [5, 13, 22, 23, 35, 43, 44, 45, 55, 56, 60, 65, 77, 94, 96, 100, 101, 104, 130, 138, 139, 145, 146, 147, 153, 170, 177, 200, 205, 221, 223, 239, 255, 257, 266, 276, 277, 278, 281, 283, 310, 341, 342, 346, 347, 365, 368, 373, 405, 407, 448, 449, 450, 451, 452, 454, 455, 456, 468, 483, 486, 497, 504, 530, 539, 553, 606, 638, 639, 668, 760, 761, 767, 772, 787, 790, 809, 820], "thi": [5, 21, 22, 23, 30, 32, 34, 39, 43, 44, 45, 46, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 79, 81, 84, 86, 88, 89, 92, 94, 96, 97, 100, 101, 103, 104, 105, 106, 110, 112, 114, 116, 127, 130, 135, 138, 144, 145, 146, 148, 151, 154, 158, 161, 167, 169, 170, 171, 177, 182, 183, 184, 190, 191, 200, 201, 202, 203, 204, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 252, 255, 257, 258, 259, 260, 264, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 283, 290, 292, 293, 302, 304, 310, 314, 330, 337, 343, 348, 349, 355, 365, 368, 374, 377, 384, 386, 387, 392, 397, 398, 399, 403, 414, 419, 420, 425, 426, 432, 433, 435, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 460, 462, 463, 464, 469, 470, 471, 484, 489, 500, 501, 511, 512, 513, 514, 515, 518, 521, 526, 528, 530, 532, 537, 538, 539, 555, 559, 569, 578, 579, 580, 586, 587, 596, 599, 606, 610, 626, 640, 645, 647, 648, 654, 668, 671, 677, 680, 683, 685, 690, 691, 697, 702, 703, 708, 709, 715, 717, 719, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 750, 753, 754, 755, 757, 760, 761, 762, 763, 765, 766, 767, 768, 773, 774, 776, 788, 793, 804, 805, 808, 809, 816, 818, 819, 820, 821, 823, 824, 827, 828, 837], "oper": [5, 23, 34, 39, 43, 50, 57, 65, 67, 72, 92, 96, 97, 100, 103, 138, 144, 147, 150, 153, 191, 203, 209, 210, 218, 219, 220, 221, 222, 223, 227, 239, 288, 338, 339, 340, 341, 342, 343, 411, 428, 441, 443, 518, 519, 536, 586, 636, 637, 638, 639, 640, 740, 742, 816, 819, 820, 828], "remov": [5, 28, 134, 283, 384, 485, 490, 496, 537, 789, 794, 800], "from": [5, 22, 27, 28, 32, 34, 44, 45, 56, 57, 62, 73, 77, 79, 81, 100, 101, 103, 104, 112, 134, 135, 138, 143, 145, 146, 158, 163, 164, 167, 177, 182, 200, 205, 218, 219, 220, 221, 222, 223, 226, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 338, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 384, 398, 412, 432, 433, 436, 458, 470, 471, 480, 497, 513, 515, 524, 533, 534, 535, 537, 544, 556, 568, 586, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 685, 703, 718, 731, 732, 733, 735, 757, 784, 826, 829], "environ": [5, 21], "local": [5, 374, 677, 736, 737], "flag": [5, 109, 154, 181, 275, 460, 762, 837], "back": [5, 22, 34, 200, 586], "valu": [5, 8, 21, 23, 30, 34, 35, 36, 40, 44, 45, 46, 51, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 73, 79, 83, 84, 87, 88, 89, 93, 103, 104, 105, 112, 135, 139, 140, 145, 146, 148, 149, 155, 156, 157, 158, 159, 162, 164, 168, 169, 172, 173, 174, 179, 185, 186, 198, 200, 203, 204, 220, 222, 230, 231, 233, 234, 235, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 251, 257, 258, 266, 267, 273, 274, 275, 276, 277, 278, 280, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 311, 312, 313, 315, 317, 318, 319, 321, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 343, 344, 346, 347, 350, 362, 366, 375, 381, 382, 383, 385, 387, 388, 389, 391, 393, 394, 395, 397, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 413, 414, 418, 419, 420, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 444, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 491, 493, 494, 495, 500, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 524, 527, 528, 530, 531, 532, 538, 539, 544, 546, 547, 548, 549, 550, 553, 554, 559, 562, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 605, 607, 608, 609, 611, 613, 614, 615, 617, 621, 623, 626, 627, 630, 631, 632, 634, 635, 640, 641, 642, 644, 645, 649, 665, 669, 678, 685, 686, 687, 688, 691, 692, 693, 695, 696, 697, 698, 701, 704, 706, 707, 709, 710, 711, 712, 713, 714, 716, 723, 724, 726, 727, 729, 731, 732, 733, 734, 735, 738, 739, 740, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 764, 765, 770, 771, 772, 778, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 795, 797, 798, 799, 804, 809, 811, 812, 813, 814, 822, 825, 826, 828, 829], "exampl": [5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 128, 131, 135, 136, 137, 139, 140, 141, 144, 146, 148, 149, 150, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 200, 201, 203, 204, 205, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 251, 252, 253, 254, 258, 259, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 524, 525, 526, 527, 532, 535, 536, 537, 540, 544, 555, 558, 559, 562, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 605, 606, 609, 610, 612, 617, 618, 621, 622, 624, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 723, 724, 725, 726, 727, 728, 729, 735, 736, 737, 739, 740, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 795, 797, 798, 799, 801, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829], "pl": [5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 128, 131, 135, 136, 137, 139, 140, 141, 144, 146, 148, 149, 150, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 200, 201, 203, 204, 205, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 251, 252, 253, 254, 257, 258, 259, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 524, 525, 526, 527, 528, 532, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 552, 555, 558, 559, 562, 579, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 605, 606, 609, 610, 612, 617, 618, 621, 622, 624, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 723, 724, 725, 726, 727, 728, 729, 735, 736, 737, 739, 740, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 795, 797, 798, 799, 801, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829], "current": [6, 21, 24, 25, 109, 128, 129, 181, 368, 436, 578, 629, 633, 671, 735], "activ": [7, 11, 12, 14, 15, 16, 17, 20, 310, 606], "bool": [7, 9, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 36, 37, 39, 40, 42, 43, 44, 49, 50, 52, 53, 54, 56, 60, 67, 69, 79, 85, 87, 93, 97, 100, 101, 102, 104, 106, 109, 112, 114, 116, 128, 130, 132, 138, 140, 141, 144, 145, 150, 151, 154, 161, 170, 172, 177, 178, 181, 184, 200, 201, 202, 203, 218, 222, 231, 233, 235, 257, 258, 260, 262, 264, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 290, 291, 292, 302, 304, 308, 310, 323, 329, 338, 339, 340, 341, 342, 343, 369, 380, 381, 382, 383, 387, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 420, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 462, 463, 468, 470, 471, 475, 477, 479, 487, 488, 492, 493, 495, 497, 501, 502, 511, 512, 515, 520, 521, 522, 524, 530, 544, 554, 556, 558, 562, 584, 585, 586, 587, 596, 599, 604, 606, 619, 624, 629, 636, 637, 638, 639, 640, 672, 684, 686, 687, 688, 691, 694, 695, 697, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 736, 737, 740, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 759, 761, 762, 767, 772, 774, 779, 781, 783, 791, 792, 796, 797, 799, 801, 819, 820, 823, 824, 826, 828], "true": [7, 9, 11, 12, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 30, 36, 39, 40, 42, 44, 50, 52, 53, 54, 56, 60, 64, 65, 67, 69, 70, 87, 93, 100, 101, 102, 103, 104, 109, 112, 116, 128, 130, 132, 135, 138, 140, 144, 145, 150, 151, 154, 161, 170, 177, 178, 181, 201, 202, 203, 205, 218, 222, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 257, 258, 259, 260, 264, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 288, 290, 291, 292, 293, 308, 329, 338, 339, 340, 341, 342, 368, 369, 373, 380, 381, 382, 383, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 443, 453, 458, 463, 468, 470, 471, 475, 477, 479, 482, 492, 493, 495, 497, 501, 502, 506, 511, 512, 515, 520, 521, 554, 556, 558, 562, 584, 585, 586, 587, 597, 624, 628, 629, 671, 672, 676, 684, 686, 687, 688, 694, 697, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 728, 736, 737, 742, 752, 759, 772, 774, 779, 781, 783, 786, 796, 797, 799, 801, 820, 823, 828, 829], "us": [7, 8, 10, 13, 18, 19, 22, 23, 35, 36, 39, 44, 45, 56, 60, 62, 64, 65, 69, 77, 79, 87, 89, 100, 101, 104, 112, 116, 130, 139, 140, 144, 145, 146, 147, 151, 153, 158, 172, 177, 180, 191, 200, 205, 219, 221, 223, 225, 227, 229, 239, 252, 255, 257, 258, 259, 260, 264, 266, 267, 268, 269, 270, 271, 275, 276, 277, 278, 281, 288, 293, 310, 326, 330, 343, 346, 347, 377, 380, 381, 382, 383, 384, 389, 390, 398, 412, 420, 424, 441, 443, 445, 448, 449, 450, 451, 452, 454, 455, 456, 458, 460, 463, 464, 468, 470, 471, 477, 478, 479, 483, 484, 489, 491, 493, 495, 497, 520, 521, 522, 525, 527, 530, 532, 539, 544, 546, 549, 554, 559, 568, 587, 606, 622, 626, 640, 680, 684, 686, 687, 688, 692, 693, 697, 718, 740, 742, 744, 757, 760, 761, 762, 766, 772, 776, 781, 782, 787, 788, 793, 795, 797, 801, 811, 819, 820, 827, 828], "ascii": [7, 13, 484, 486, 489, 500, 788, 790, 793, 804], "charact": [7, 8, 13, 19, 112, 161, 257, 258, 267, 365, 392, 483, 484, 489, 490, 492, 493, 496, 500, 668, 787, 788, 789, 793, 794, 796, 797, 800, 804], "print": [7, 8, 10, 12, 18, 31, 43, 57, 148, 272, 397, 709, 746], "tabl": [7, 9, 10, 12, 13, 14, 15, 16, 18, 19, 22, 69, 92, 97, 103, 190, 218, 239, 257, 258, 267], "outlin": 7, "fals": [7, 9, 11, 12, 14, 15, 16, 17, 18, 21, 22, 24, 25, 27, 39, 40, 42, 43, 44, 49, 50, 52, 53, 54, 56, 60, 64, 65, 67, 69, 70, 79, 85, 87, 93, 97, 100, 101, 104, 106, 109, 114, 116, 128, 130, 132, 138, 144, 145, 150, 151, 154, 161, 170, 172, 181, 200, 201, 202, 205, 230, 231, 233, 234, 235, 237, 241, 257, 258, 259, 260, 264, 267, 270, 271, 273, 274, 275, 276, 277, 278, 290, 291, 302, 304, 308, 310, 323, 338, 339, 340, 341, 342, 343, 369, 380, 381, 382, 383, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 420, 441, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 463, 468, 470, 471, 475, 477, 479, 487, 488, 492, 493, 495, 497, 511, 512, 515, 521, 522, 530, 544, 554, 556, 558, 562, 586, 596, 599, 606, 619, 624, 628, 629, 636, 637, 638, 639, 640, 672, 684, 686, 687, 688, 694, 702, 704, 706, 709, 710, 711, 712, 713, 714, 716, 718, 728, 736, 737, 740, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 759, 762, 767, 772, 774, 779, 781, 783, 791, 792, 796, 797, 799, 801, 819, 820, 823, 824, 826, 828, 829], "revert": 7, "utf8": [7, 13, 31, 32, 39, 80, 96, 136, 166, 191, 257, 258, 267, 275, 314, 386, 392, 474, 478, 480, 481, 482, 483, 491, 492, 493, 494, 497, 527, 610, 674, 690, 717, 778, 782, 784, 785, 786, 787, 795, 796, 797, 798, 801, 820], "dfabc": [7, 11, 12, 14, 15, 16, 17, 18, 487, 791], "1": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 116, 131, 135, 136, 137, 139, 140, 141, 144, 145, 146, 148, 149, 150, 151, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 200, 201, 203, 204, 205, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 253, 254, 255, 257, 258, 267, 268, 272, 273, 274, 275, 277, 278, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 540, 544, 551, 552, 555, 556, 557, 558, 559, 561, 562, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 605, 606, 608, 609, 612, 617, 618, 621, 622, 624, 626, 627, 628, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 701, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 723, 724, 725, 726, 727, 728, 729, 735, 736, 737, 739, 740, 743, 744, 745, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 784, 786, 797, 798, 801, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829], "0": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 27, 28, 31, 35, 36, 39, 40, 42, 44, 46, 50, 55, 59, 60, 61, 63, 64, 65, 66, 70, 71, 75, 79, 80, 81, 84, 86, 87, 88, 89, 95, 98, 100, 101, 103, 104, 105, 108, 109, 110, 116, 128, 136, 139, 140, 150, 157, 161, 162, 166, 167, 169, 170, 173, 179, 180, 181, 183, 200, 201, 204, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 252, 257, 258, 259, 260, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 281, 283, 287, 288, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 310, 312, 318, 329, 331, 333, 334, 335, 336, 338, 343, 346, 347, 350, 353, 357, 359, 360, 364, 366, 369, 370, 376, 381, 382, 383, 385, 388, 389, 393, 395, 398, 401, 404, 405, 407, 408, 409, 411, 412, 417, 418, 420, 422, 423, 424, 429, 432, 433, 434, 436, 437, 440, 441, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 463, 465, 466, 467, 468, 472, 473, 480, 500, 504, 508, 509, 510, 516, 521, 524, 526, 530, 532, 536, 539, 552, 559, 562, 588, 589, 590, 591, 592, 593, 594, 596, 598, 606, 608, 624, 627, 629, 634, 635, 640, 641, 643, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 672, 673, 679, 684, 686, 687, 688, 692, 696, 698, 706, 708, 710, 711, 712, 713, 714, 718, 724, 725, 735, 739, 740, 746, 748, 749, 751, 752, 753, 755, 757, 769, 770, 771, 775, 776, 778, 784, 786, 804, 813, 814, 817, 821, 822, 827, 828], "2": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 128, 131, 135, 136, 137, 139, 140, 141, 144, 146, 148, 150, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 200, 201, 203, 204, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 253, 254, 266, 267, 268, 272, 273, 274, 277, 287, 288, 289, 291, 292, 293, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 345, 351, 353, 354, 357, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 474, 476, 479, 481, 482, 483, 486, 487, 488, 491, 493, 494, 495, 498, 499, 501, 502, 503, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 517, 518, 524, 525, 526, 527, 532, 535, 536, 537, 540, 544, 555, 558, 559, 562, 583, 586, 587, 589, 593, 594, 595, 596, 597, 598, 605, 606, 609, 610, 612, 617, 618, 621, 622, 626, 627, 628, 633, 634, 637, 638, 639, 640, 641, 643, 652, 656, 657, 663, 665, 670, 671, 672, 676, 679, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 701, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 735, 736, 737, 739, 740, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 768, 770, 772, 773, 774, 775, 776, 778, 780, 785, 786, 790, 791, 792, 797, 798, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829], "5": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 27, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 47, 48, 50, 51, 53, 56, 58, 60, 62, 64, 65, 69, 70, 71, 74, 78, 82, 90, 91, 92, 93, 94, 99, 101, 103, 104, 107, 108, 109, 110, 112, 128, 137, 139, 140, 144, 146, 147, 149, 153, 156, 157, 158, 168, 169, 171, 173, 174, 175, 176, 180, 181, 183, 200, 201, 204, 218, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 253, 254, 258, 272, 277, 278, 288, 310, 313, 318, 324, 325, 329, 330, 331, 332, 333, 334, 343, 345, 351, 369, 370, 375, 378, 383, 384, 386, 387, 393, 396, 399, 402, 405, 407, 408, 409, 411, 416, 435, 436, 438, 440, 441, 445, 446, 447, 448, 449, 451, 455, 457, 459, 465, 476, 482, 483, 486, 500, 503, 505, 507, 511, 526, 532, 535, 536, 537, 559, 586, 589, 593, 596, 606, 609, 612, 621, 626, 628, 630, 636, 640, 641, 643, 648, 649, 650, 672, 673, 678, 679, 681, 688, 691, 701, 728, 735, 736, 737, 739, 740, 746, 747, 748, 750, 751, 754, 757, 759, 769, 775, 780, 786, 787, 823, 829], "xyz": [7, 11, 12, 14, 15, 16, 17, 18, 476, 481, 780, 785, 818], "shape": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 128, 135, 137, 139, 140, 141, 144, 146, 149, 150, 155, 156, 157, 158, 159, 160, 162, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 200, 201, 203, 204, 205, 216, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 253, 254, 267, 268, 277, 278, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 524, 525, 526, 527, 532, 535, 536, 537, 540, 555, 558, 559, 562, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 605, 606, 609, 610, 612, 617, 618, 621, 622, 624, 626, 627, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 701, 704, 706, 709, 710, 711, 712, 713, 714, 716, 720, 727, 735, 736, 737, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 764, 768, 769, 770, 771, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 795, 797, 798, 799, 801, 810, 811, 812, 813, 814, 817, 818, 822, 824, 825, 826, 829, 837], "3": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 128, 131, 135, 136, 137, 141, 144, 145, 146, 148, 149, 150, 151, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 200, 201, 203, 204, 205, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 253, 254, 259, 267, 268, 272, 273, 274, 288, 289, 290, 293, 302, 303, 304, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 360, 362, 366, 367, 368, 369, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 414, 416, 417, 418, 419, 421, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 470, 471, 472, 475, 477, 478, 479, 480, 483, 485, 486, 490, 491, 492, 493, 494, 495, 496, 501, 502, 503, 505, 506, 507, 511, 513, 514, 515, 517, 518, 524, 525, 526, 527, 532, 536, 537, 540, 544, 555, 558, 559, 562, 583, 586, 587, 588, 590, 591, 592, 594, 595, 596, 597, 598, 605, 606, 609, 612, 617, 618, 621, 622, 624, 626, 627, 628, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 661, 662, 663, 665, 667, 669, 671, 672, 675, 676, 679, 680, 681, 683, 685, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 701, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 735, 736, 737, 739, 740, 743, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 768, 770, 771, 772, 773, 774, 776, 781, 782, 783, 784, 787, 790, 795, 799, 809, 810, 811, 812, 813, 814, 816, 817, 819, 820, 821, 824, 825, 826, 827, 829], "f64": [7, 9, 11, 12, 14, 15, 16, 17, 18, 24, 25, 27, 28, 30, 31, 35, 36, 39, 42, 50, 55, 56, 60, 61, 70, 71, 86, 87, 88, 101, 105, 108, 109, 128, 135, 139, 140, 150, 156, 157, 162, 173, 179, 180, 181, 200, 204, 231, 233, 234, 235, 236, 237, 240, 241, 268, 277, 287, 294, 295, 296, 297, 298, 299, 318, 329, 331, 335, 336, 343, 346, 347, 369, 380, 381, 382, 383, 384, 385, 393, 398, 405, 407, 408, 409, 411, 412, 417, 418, 422, 423, 424, 429, 432, 433, 436, 437, 440, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 466, 467, 468, 472, 473, 508, 509, 516, 524, 526, 537, 588, 589, 590, 591, 592, 593, 627, 634, 635, 640, 641, 672, 687, 688, 692, 696, 735, 746, 748, 749, 751, 752, 753, 755, 756, 770, 771, 775, 813, 814], "n": [8, 10, 18, 23, 34, 44, 47, 58, 67, 79, 90, 91, 97, 119, 120, 130, 147, 153, 175, 176, 205, 226, 232, 242, 253, 254, 255, 257, 258, 267, 281, 309, 313, 325, 343, 344, 348, 352, 372, 377, 387, 396, 415, 436, 444, 458, 468, 493, 494, 505, 507, 511, 542, 554, 560, 586, 605, 609, 621, 640, 642, 647, 651, 675, 680, 691, 699, 720, 735, 757, 772, 776, 797, 798, 810, 812, 815, 823, 827], "int": [8, 10, 18, 19, 23, 32, 35, 36, 38, 46, 47, 48, 50, 56, 58, 59, 60, 63, 64, 65, 75, 77, 79, 82, 83, 84, 86, 88, 89, 90, 91, 98, 103, 105, 107, 110, 112, 116, 138, 139, 140, 147, 151, 153, 161, 168, 169, 171, 173, 175, 176, 179, 183, 220, 223, 226, 232, 242, 253, 254, 255, 256, 257, 258, 259, 260, 264, 266, 267, 269, 270, 271, 275, 276, 277, 278, 279, 281, 308, 309, 312, 313, 321, 322, 325, 326, 328, 332, 333, 334, 343, 344, 381, 382, 383, 387, 388, 389, 394, 395, 396, 399, 415, 436, 437, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 469, 473, 480, 484, 489, 491, 493, 494, 500, 501, 502, 505, 506, 507, 511, 516, 521, 524, 528, 532, 533, 534, 535, 542, 546, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 594, 595, 604, 605, 608, 609, 617, 618, 621, 622, 624, 628, 630, 631, 632, 640, 642, 685, 686, 687, 688, 691, 692, 693, 698, 699, 719, 720, 723, 724, 726, 728, 729, 731, 732, 733, 734, 735, 738, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 768, 773, 776, 784, 788, 793, 795, 797, 798, 804, 809, 810, 811, 812, 823, 827], "number": [8, 10, 18, 19, 32, 33, 35, 36, 47, 57, 58, 64, 65, 79, 83, 84, 90, 103, 112, 116, 137, 138, 139, 140, 147, 153, 161, 168, 169, 175, 200, 214, 226, 230, 232, 242, 253, 254, 255, 257, 258, 259, 267, 270, 276, 277, 281, 309, 313, 321, 325, 326, 328, 337, 343, 344, 353, 355, 360, 362, 369, 375, 376, 379, 381, 382, 383, 387, 389, 394, 396, 405, 407, 414, 415, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 461, 462, 464, 483, 486, 493, 494, 505, 511, 528, 542, 556, 560, 605, 609, 617, 621, 622, 640, 642, 652, 654, 663, 665, 672, 678, 679, 682, 685, 686, 687, 688, 691, 693, 699, 708, 720, 728, 729, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 764, 765, 768, 776, 787, 790, 797, 798, 810, 823, 827], "format": [9, 13, 33, 62, 112, 114, 137, 143, 158, 184, 256, 257, 258, 262, 267, 268, 368, 371, 373, 497, 569, 674, 801, 835], "liter": [9, 13, 59, 60, 63, 64, 67, 81, 89, 93, 167, 201, 205, 259, 278, 290, 291, 411, 442, 475, 487, 488, 521, 533, 534, 544, 554, 558, 562, 584, 585, 760, 761, 779, 791, 792], "left": [9, 44, 45, 55, 56, 145, 146, 150, 151, 205, 273, 274, 381, 382, 383, 398, 448, 449, 450, 451, 452, 454, 455, 456, 484, 500, 510, 524, 530, 531, 539, 553, 686, 687, 688, 788, 804, 822], "center": [9, 381, 382, 383, 447, 448, 449, 450, 451, 452, 454, 455, 456, 686, 687, 688, 746, 747, 748, 749, 750, 751, 753, 754, 755], "right": [9, 11, 44, 45, 55, 56, 145, 146, 150, 151, 205, 257, 258, 273, 274, 381, 382, 383, 448, 449, 450, 451, 452, 454, 455, 456, 468, 489, 524, 686, 687, 688, 772, 793], "cell": 9, "align": [9, 200, 500, 804], "rais": [9, 13, 60, 77, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 273, 274, 425, 437, 497, 544, 801, 820, 828], "keyerror": [9, 13], "recognis": [9, 13, 275], "column_abc": 9, "column_xyz": 9, "column": [10, 11, 14, 15, 17, 22, 23, 28, 29, 30, 31, 32, 33, 38, 41, 43, 44, 45, 49, 50, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 74, 75, 80, 81, 87, 88, 89, 93, 95, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 134, 135, 136, 137, 144, 145, 146, 150, 151, 154, 155, 156, 157, 158, 159, 162, 164, 166, 167, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 191, 200, 203, 204, 208, 212, 219, 220, 221, 222, 223, 224, 227, 239, 256, 257, 258, 260, 261, 264, 265, 266, 267, 269, 270, 271, 273, 277, 290, 291, 293, 302, 304, 307, 350, 353, 355, 356, 358, 360, 362, 363, 366, 367, 369, 375, 376, 379, 384, 390, 411, 425, 427, 435, 438, 442, 444, 448, 449, 450, 451, 452, 454, 455, 456, 463, 470, 471, 493, 494, 497, 503, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 569, 578, 584, 585, 603, 649, 652, 654, 658, 660, 663, 665, 666, 669, 670, 672, 678, 679, 682, 766, 797, 798, 818], "If": [10, 22, 23, 34, 44, 45, 56, 62, 65, 67, 79, 86, 96, 97, 100, 112, 114, 115, 116, 145, 146, 150, 151, 154, 158, 171, 184, 191, 204, 205, 219, 221, 222, 223, 239, 252, 257, 258, 259, 260, 264, 266, 267, 269, 270, 271, 293, 322, 332, 333, 334, 390, 412, 420, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 464, 468, 469, 470, 471, 483, 486, 491, 492, 493, 494, 497, 511, 518, 520, 521, 522, 528, 530, 539, 544, 556, 586, 587, 618, 630, 631, 632, 697, 718, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 762, 772, 773, 787, 790, 795, 796, 797, 798, 801, 816, 820, 823, 828], "i": [10, 22, 23, 30, 32, 40, 43, 44, 45, 46, 50, 51, 53, 56, 57, 60, 62, 65, 67, 69, 77, 79, 86, 89, 92, 94, 100, 101, 103, 104, 109, 112, 114, 115, 130, 135, 138, 144, 145, 146, 149, 151, 154, 158, 161, 170, 171, 177, 181, 184, 191, 200, 202, 203, 204, 205, 208, 209, 211, 212, 218, 221, 222, 223, 225, 226, 227, 229, 239, 252, 257, 258, 260, 264, 266, 267, 268, 269, 270, 271, 275, 276, 277, 278, 283, 290, 291, 292, 293, 310, 312, 322, 343, 365, 368, 373, 381, 382, 383, 386, 392, 395, 397, 399, 412, 420, 426, 435, 441, 443, 445, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 460, 464, 468, 469, 470, 471, 476, 480, 481, 482, 484, 489, 491, 494, 497, 500, 515, 521, 522, 526, 528, 530, 531, 532, 539, 544, 555, 559, 585, 586, 587, 606, 608, 618, 640, 668, 671, 676, 685, 686, 687, 688, 690, 697, 698, 701, 702, 703, 705, 715, 717, 718, 740, 742, 744, 757, 758, 759, 760, 761, 762, 772, 773, 776, 780, 784, 785, 786, 788, 793, 795, 798, 804, 816, 820, 826, 827, 828], "rang": [10, 32, 44, 204, 205, 266, 350, 362, 366, 367, 368, 373, 375, 398, 521, 526, 533, 534, 649, 665, 669, 670, 671, 676, 678, 685, 735], "100": [10, 257, 258, 267, 270, 500, 521, 747, 748, 750], "98": [10, 50, 470, 471, 506, 511], "99": [10, 35, 36, 50, 53, 139, 140, 288, 387, 389, 470, 471, 506, 511, 524, 684, 691], "i64": [10, 14, 22, 23, 24, 25, 26, 28, 30, 31, 33, 34, 36, 37, 41, 42, 43, 44, 45, 47, 49, 50, 51, 55, 56, 58, 59, 62, 63, 67, 68, 69, 70, 73, 74, 75, 76, 79, 81, 83, 84, 86, 87, 89, 90, 91, 93, 98, 100, 101, 102, 103, 104, 106, 108, 109, 110, 128, 135, 137, 140, 141, 144, 146, 149, 150, 155, 158, 159, 160, 167, 168, 169, 171, 174, 176, 178, 180, 181, 183, 203, 218, 219, 220, 221, 222, 223, 227, 228, 229, 231, 232, 233, 234, 237, 239, 241, 242, 252, 253, 254, 267, 278, 289, 292, 293, 310, 311, 312, 315, 317, 319, 320, 323, 324, 327, 328, 330, 332, 333, 334, 339, 340, 341, 342, 344, 345, 351, 352, 354, 357, 359, 361, 364, 370, 372, 384, 386, 387, 389, 390, 391, 394, 396, 397, 398, 399, 402, 405, 407, 408, 409, 411, 413, 416, 419, 420, 421, 430, 435, 436, 438, 439, 442, 443, 445, 446, 458, 460, 461, 463, 464, 465, 469, 470, 487, 488, 502, 503, 504, 505, 506, 507, 511, 512, 514, 517, 518, 525, 527, 532, 536, 537, 555, 558, 559, 562, 586, 587, 606, 626, 630, 633, 636, 637, 638, 639, 641, 648, 650, 651, 653, 659, 661, 664, 667, 673, 675, 690, 691, 693, 694, 699, 701, 709, 720, 727, 743, 747, 750, 754, 757, 760, 761, 764, 768, 769, 773, 774, 810, 811, 812, 818, 824, 826, 829], "10": [10, 25, 34, 42, 44, 45, 47, 49, 50, 51, 64, 68, 70, 74, 75, 81, 90, 109, 112, 116, 145, 146, 149, 160, 167, 174, 181, 200, 204, 205, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 266, 267, 272, 277, 278, 292, 300, 301, 302, 303, 304, 309, 313, 321, 322, 325, 332, 337, 342, 344, 346, 347, 368, 373, 377, 392, 395, 396, 398, 403, 411, 414, 415, 418, 436, 449, 469, 500, 505, 536, 542, 560, 587, 605, 609, 617, 618, 621, 630, 676, 680, 684, 690, 699, 709, 720, 722, 735, 760, 761, 810], "4": [10, 18, 22, 23, 24, 25, 27, 30, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 64, 65, 67, 68, 69, 70, 74, 78, 81, 82, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 128, 135, 137, 139, 140, 144, 145, 146, 149, 150, 151, 155, 156, 157, 158, 159, 160, 162, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 200, 201, 203, 205, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 253, 254, 267, 272, 273, 274, 278, 287, 288, 292, 293, 303, 309, 310, 313, 321, 322, 325, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 350, 354, 360, 361, 362, 366, 367, 368, 369, 370, 373, 375, 376, 379, 385, 386, 388, 389, 393, 394, 396, 397, 398, 399, 408, 409, 411, 414, 416, 418, 421, 435, 437, 438, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 461, 462, 465, 469, 470, 471, 472, 475, 483, 484, 486, 489, 491, 493, 494, 497, 503, 505, 506, 507, 510, 511, 524, 527, 532, 536, 558, 559, 562, 586, 589, 596, 605, 606, 609, 617, 618, 621, 627, 628, 630, 640, 641, 643, 652, 653, 658, 660, 663, 664, 665, 666, 670, 671, 672, 673, 674, 676, 678, 679, 690, 692, 693, 701, 704, 709, 711, 712, 713, 714, 716, 728, 735, 736, 737, 740, 749, 751, 752, 753, 754, 755, 757, 759, 769, 773, 774, 779, 787, 788, 790, 793, 795, 797, 798, 801, 811, 812, 822, 829], "95": [10, 288], "96": [10, 288], "97": [10, 50, 288], "move": [11, 374, 381, 382, 383, 448, 449, 451, 455, 677, 686, 687, 688, 747, 748, 750, 754], "inlin": 11, "name": [11, 15, 17, 22, 23, 26, 29, 30, 38, 41, 55, 56, 62, 69, 73, 80, 93, 99, 100, 102, 108, 109, 110, 131, 134, 150, 151, 158, 164, 166, 172, 178, 181, 183, 190, 204, 205, 208, 220, 221, 222, 223, 251, 256, 257, 258, 259, 260, 261, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 289, 326, 368, 373, 384, 411, 421, 425, 427, 438, 501, 502, 503, 518, 519, 525, 529, 532, 537, 542, 543, 551, 552, 554, 556, 559, 560, 569, 578, 583, 622, 629, 671, 676, 695, 743, 805, 807, 818, 837], "parenthes": 11, "below": [12, 30, 43, 135, 398, 562], "when": [12, 16, 22, 23, 31, 32, 34, 36, 39, 44, 77, 81, 116, 140, 167, 191, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 257, 258, 260, 264, 267, 269, 270, 277, 278, 280, 332, 333, 334, 381, 382, 383, 389, 420, 426, 497, 530, 539, 569, 586, 630, 631, 632, 685, 686, 687, 688, 693, 760, 761], "displai": [12, 16], "ascii_ful": 13, "ascii_no_bord": 13, "ascii_borders_onli": 13, "ascii_borders_only_condens": 13, "ascii_horizontal_onli": 13, "ascii_markdown": 13, "utf8_ful": 13, "utf8_full_condens": 13, "utf8_no_bord": 13, "utf8_borders_onli": 13, "utf8_horizontal_onli": 13, "noth": [13, 476, 480, 481, 482, 780, 784, 785, 786], "style": [13, 69], "border": 13, "line": [13, 257, 258, 259, 267], "onli": [13, 21, 23, 30, 43, 56, 60, 87, 89, 130, 135, 147, 151, 153, 172, 191, 200, 203, 257, 258, 259, 260, 264, 267, 269, 270, 271, 277, 278, 288, 331, 332, 333, 334, 365, 393, 443, 513, 554, 558, 627, 630, 631, 632, 668, 696, 742, 816], "dens": [13, 441, 740], "row": [13, 18, 22, 23, 30, 34, 37, 39, 44, 46, 47, 52, 54, 56, 57, 58, 62, 65, 86, 90, 91, 94, 101, 103, 110, 112, 114, 116, 130, 135, 138, 141, 142, 145, 147, 151, 152, 153, 154, 158, 171, 175, 176, 177, 183, 200, 211, 214, 217, 220, 221, 223, 229, 232, 242, 252, 253, 254, 257, 258, 259, 260, 264, 267, 269, 270, 271, 276, 277, 293, 386, 392, 396, 415, 436, 445, 469, 505, 530, 531, 539, 542, 553, 560, 586, 690, 699, 720, 735, 744, 773, 810], "space": 13, "horizont": [13, 39, 49, 103, 203, 527, 530, 531, 532, 536, 539, 546, 549, 553, 559], "markdown": 13, "compat": [13, 22, 116], "same": [13, 23, 101, 177, 191, 200, 202, 229, 252, 273, 276, 287, 292, 293, 386, 392, 447, 448, 449, 450, 451, 452, 454, 455, 456, 582, 586, 587, 690, 746, 747, 748, 749, 750, 751, 753, 754, 755, 829], "No": 13, "other": [13, 22, 30, 34, 40, 55, 56, 62, 77, 135, 150, 151, 158, 182, 205, 257, 258, 259, 267, 273, 274, 292, 307, 332, 333, 334, 345, 403, 471, 510, 578, 586, 603, 630, 631, 632, 643, 709, 759, 822, 829, 835], "The": [13, 23, 44, 45, 46, 51, 56, 77, 102, 104, 116, 128, 130, 138, 144, 145, 146, 147, 149, 151, 153, 154, 161, 178, 185, 192, 200, 226, 229, 239, 252, 257, 264, 266, 267, 293, 328, 350, 362, 365, 366, 368, 373, 375, 387, 392, 394, 395, 420, 441, 444, 447, 448, 449, 450, 451, 452, 454, 455, 456, 468, 471, 474, 477, 478, 483, 484, 489, 500, 522, 563, 565, 570, 573, 574, 575, 629, 649, 665, 668, 669, 671, 676, 678, 691, 698, 701, 740, 746, 747, 748, 749, 750, 751, 753, 754, 755, 772, 778, 781, 782, 787, 788, 793, 804, 830, 833, 840, 841, 842], "one": [13, 36, 37, 44, 45, 62, 69, 77, 95, 99, 134, 140, 141, 145, 146, 158, 182, 200, 211, 227, 228, 239, 278, 288, 389, 411, 447, 470, 471, 501, 506, 518, 558, 559, 586, 693, 746, 805], "more": [13, 23, 43, 57, 62, 65, 77, 79, 101, 114, 116, 144, 158, 177, 200, 217, 229, 252, 264, 277, 278, 293, 332, 333, 334, 411, 412, 420, 458, 468, 512, 559, 587, 630, 631, 632, 718, 757, 772, 824, 844], "semigraph": 13, "box": [13, 23], "draw": [13, 18, 19], "found": [13, 31, 112, 212, 482, 497, 502, 786], "unicod": 13, "block": [13, 183, 760, 761], "which": [13, 30, 34, 87, 101, 111, 112, 113, 114, 115, 116, 135, 177, 184, 200, 257, 258, 259, 266, 267, 290, 401, 404, 405, 407, 408, 409, 426, 586, 706, 710, 711, 712, 713, 714, 760], "ar": [13, 23, 30, 32, 35, 39, 44, 45, 56, 57, 62, 77, 93, 97, 104, 116, 135, 139, 145, 146, 147, 151, 153, 154, 158, 161, 182, 191, 205, 211, 217, 218, 220, 222, 223, 257, 258, 259, 266, 267, 269, 270, 273, 274, 276, 277, 280, 290, 326, 341, 342, 346, 347, 368, 373, 380, 401, 403, 404, 405, 407, 408, 409, 412, 441, 444, 445, 447, 453, 468, 470, 471, 483, 486, 504, 521, 522, 527, 556, 563, 565, 568, 570, 573, 574, 575, 578, 584, 586, 622, 638, 639, 671, 676, 684, 685, 695, 697, 706, 709, 710, 711, 712, 713, 714, 718, 740, 744, 746, 752, 772, 787, 790, 809, 820, 828, 830, 833, 840, 841, 842], "http": [13, 480, 784, 844], "en": 13, "wikipedia": 13, "org": 13, "wiki": 13, "drawing_charact": 13, "box_draw": 13, "hide": [14, 15, 16, 17], "etc": [14, 221, 223, 257, 260, 264, 269, 271, 521, 760, 761], "inform": [16, 161, 220, 332, 333, 334, 412, 468, 630, 631, 632, 718, 772], "separ": [17, 100, 112, 314, 392, 527, 530, 531, 610], "between": [17, 71, 114, 162, 203, 240, 262, 275, 276, 277, 278, 314, 329, 345, 399, 436, 440, 452, 474, 529, 551, 552, 556, 610, 624, 643, 735, 739, 751, 778], "set_tbl_column_data_type_inlin": 17, "max": [18, 27, 36, 44, 45, 69, 116, 140, 146, 251, 277, 278, 332, 333, 339, 389, 435, 441, 448, 460, 494, 569, 630, 631, 636, 641, 693, 740, 747, 762, 798, 837], "both": [18, 44, 45, 55, 56, 77, 112, 145, 146, 150, 151, 191, 205, 292, 399, 448, 449, 450, 451, 452, 454, 455, 456, 485, 490, 496], "element": [18, 255, 278, 281, 294, 295, 296, 297, 298, 299, 310, 335, 336, 338, 339, 340, 341, 342, 343, 385, 395, 403, 418, 436, 441, 444, 459, 465, 466, 467, 472, 493, 494, 508, 509, 511, 569, 587, 588, 589, 590, 591, 592, 593, 606, 634, 635, 636, 637, 638, 639, 640, 689, 694, 709, 722, 735, 740, 758, 769, 770, 771, 775, 776, 797, 798, 813, 814, 823, 824, 827], "width": [19, 22, 257, 258, 484, 489, 500, 788, 793, 804], "char": [19, 191, 486, 790], "enabl": [20, 460, 762], "addit": [20, 275, 276], "verbos": 20, "debug": [20, 130, 138, 154], "log": [20, 380, 511, 569, 684, 823, 837], "if_set": 21, "dict": [21, 22, 67, 73, 80, 93, 94, 116, 154, 164, 166, 192, 219, 220, 252, 257, 258, 259, 260, 261, 264, 265, 267, 269, 271, 277, 695], "none": [21, 22, 23, 24, 27, 30, 35, 36, 44, 45, 46, 51, 55, 56, 62, 65, 66, 77, 79, 84, 86, 93, 95, 100, 101, 102, 103, 104, 109, 111, 112, 113, 114, 115, 116, 119, 128, 135, 139, 140, 145, 146, 149, 150, 151, 154, 158, 169, 170, 171, 177, 178, 181, 184, 186, 190, 200, 204, 205, 219, 220, 221, 222, 223, 224, 226, 252, 255, 256, 257, 258, 259, 260, 262, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 289, 292, 293, 303, 312, 322, 326, 328, 332, 333, 334, 337, 346, 347, 368, 373, 378, 381, 382, 383, 384, 387, 388, 389, 394, 395, 398, 405, 406, 407, 408, 409, 414, 420, 434, 436, 442, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 462, 463, 464, 465, 469, 474, 475, 477, 478, 479, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 497, 500, 501, 502, 510, 518, 520, 521, 524, 527, 528, 534, 535, 537, 538, 544, 545, 554, 557, 558, 561, 587, 594, 595, 608, 618, 622, 629, 630, 641, 643, 671, 676, 681, 684, 686, 687, 688, 691, 692, 693, 697, 698, 700, 701, 713, 714, 718, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 765, 768, 769, 772, 773, 776, 778, 779, 781, 782, 783, 786, 787, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 801, 815, 818, 822, 827, 828], "show": [21, 30, 57, 66, 135, 161, 170], "variabl": [21, 62, 95, 158, 224, 817], "chang": [21, 103, 104, 200, 204, 257, 258, 268, 343, 368, 436, 448, 449, 450, 451, 452, 454, 455, 456, 640, 648, 671, 735, 767], "restrict": [21, 494, 798], "return": [21, 23, 24, 28, 30, 31, 32, 33, 35, 36, 39, 47, 49, 55, 57, 58, 64, 65, 67, 68, 69, 77, 79, 90, 91, 97, 100, 101, 108, 112, 114, 115, 130, 136, 138, 147, 153, 154, 160, 161, 170, 176, 177, 184, 200, 201, 202, 204, 205, 211, 214, 217, 218, 219, 220, 221, 222, 223, 226, 227, 229, 232, 236, 242, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 281, 290, 291, 294, 295, 296, 297, 298, 299, 302, 304, 305, 306, 308, 312, 313, 314, 325, 335, 336, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 379, 386, 392, 396, 399, 401, 402, 403, 404, 405, 407, 408, 409, 415, 419, 426, 430, 444, 445, 458, 466, 467, 474, 476, 478, 480, 481, 482, 483, 484, 486, 489, 491, 492, 493, 494, 500, 505, 506, 507, 508, 509, 511, 513, 514, 515, 520, 521, 525, 533, 534, 535, 542, 544, 545, 555, 560, 562, 583, 584, 585, 587, 594, 595, 597, 598, 601, 602, 604, 608, 609, 610, 621, 641, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 685, 690, 695, 697, 699, 700, 704, 706, 707, 709, 710, 711, 712, 713, 714, 716, 720, 727, 744, 745, 757, 759, 761, 778, 779, 780, 782, 784, 785, 786, 787, 788, 790, 793, 795, 796, 797, 798, 801, 804, 810, 812, 823, 825, 829], "dictionari": [21, 22, 67, 93, 94, 219, 220, 223, 257, 258, 261, 265, 267, 641, 695], "includ": [21, 32, 44, 100, 103, 112, 277, 369, 399, 492, 493, 530, 672, 685, 796, 797, 828], "those": [21, 441, 740], "_have_": 21, "been": [21, 283, 441, 740], "specif": [21, 266, 277, 447, 497, 558, 746, 801], "set_stat": 21, "all_stat": 21, "sequenc": [22, 28, 30, 33, 34, 43, 44, 45, 55, 56, 62, 65, 67, 69, 81, 87, 95, 100, 101, 102, 103, 104, 109, 137, 144, 145, 146, 150, 151, 167, 172, 181, 192, 200, 202, 203, 219, 220, 221, 223, 226, 227, 251, 276, 277, 278, 384, 403, 420, 518, 519, 520, 522, 524, 525, 526, 527, 530, 531, 532, 537, 539, 545, 546, 549, 553, 555, 558, 559, 586, 709, 761], "np": [22, 221, 706, 710, 711, 712, 746], "ndarrai": [22, 37, 96, 221, 506, 761, 811, 820], "pa": [22, 218, 268], "pd": [22, 222, 259, 266, 510, 822], "columnstyp": 22, "orient": [22, 114, 221, 223], "two": [22, 39, 62, 69, 99, 158, 219, 221, 223, 227, 228, 229, 239, 252, 266, 288, 345, 470, 471, 506, 518, 529, 551, 556, 558, 643], "dimension": [22, 219, 221, 223], "structur": [22, 34, 210, 215, 216, 586], "repres": [22, 112, 186, 198, 205, 218, 219, 221, 222, 223, 405, 407, 525, 544, 761, 776, 827], "panda": [22, 97, 222, 259, 266, 272, 510, 821, 822], "variou": 22, "form": [22, 103, 436, 735], "must": [22, 44, 45, 56, 77, 145, 146, 151, 154, 204, 219, 221, 223, 273, 384, 420, 448, 449, 450, 451, 452, 454, 455, 456], "contain": [22, 65, 69, 161, 200, 219, 222, 403, 476, 479, 480, 481, 482, 494, 495, 569, 695, 728, 780, 783, 784, 785, 786, 798, 799, 816, 837], "mai": [22, 23, 32, 34, 56, 83, 84, 103, 116, 154, 168, 169, 183, 203, 204, 218, 252, 257, 260, 268, 269, 321, 343, 348, 355, 368, 384, 387, 448, 449, 450, 451, 452, 454, 455, 456, 461, 462, 530, 531, 539, 553, 586, 617, 640, 647, 654, 671, 685, 691, 764, 765], "datatyp": [22, 23, 31, 39, 80, 112, 136, 154, 166, 185, 192, 198, 220, 225, 252, 255, 257, 258, 259, 261, 265, 275, 276, 277, 278, 281, 293, 329, 384, 420, 463, 497, 510, 520, 521, 525, 537, 544, 545, 578, 587, 624, 641, 683, 700, 703, 715, 717, 766, 801, 822], "pair": [22, 73, 164], "label": [22, 161, 204, 219, 221, 223, 447, 448, 449, 450, 451, 452, 454, 455, 456, 746, 747, 748, 749, 750, 751, 753, 754, 755], "result": [22, 34, 44, 65, 84, 112, 114, 115, 127, 154, 161, 169, 184, 200, 219, 221, 223, 227, 266, 267, 269, 271, 278, 381, 382, 383, 412, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 460, 462, 492, 493, 521, 530, 531, 532, 545, 559, 586, 686, 687, 688, 718, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 762, 765, 796, 797, 820], "specifi": [22, 32, 36, 112, 140, 200, 205, 212, 219, 221, 223, 277, 381, 382, 383, 389, 444, 484, 489, 685, 686, 687, 688, 693, 788, 793], "overrid": [22, 219, 275, 276, 278], "alreadi": [22, 219, 310, 343, 606, 640], "present": [22, 219, 277, 403, 828], "match": [22, 36, 56, 77, 140, 151, 203, 214, 219, 221, 223, 273, 274, 475, 476, 479, 481, 482, 485, 487, 488, 490, 495, 496, 497, 779, 780, 783, 785, 786, 789, 791, 792, 794, 799, 800, 801], "dimens": [22, 219, 221, 223, 445, 744], "col": [22, 23, 37, 43, 44, 45, 53, 65, 68, 77, 81, 87, 102, 108, 109, 112, 141, 144, 146, 148, 160, 167, 178, 180, 181, 200, 201, 221, 223, 227, 251, 267, 276, 277, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 323, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 393, 397, 398, 399, 400, 402, 403, 405, 406, 407, 410, 411, 412, 413, 417, 418, 419, 422, 423, 424, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 526, 527, 532, 535, 538, 540, 541, 552, 558, 559, 562, 569, 606, 622, 626, 668, 744, 760, 761, 784, 786, 801], "whether": [22, 44, 45, 112, 145, 146, 201, 205, 221, 223, 278, 448, 449, 450, 451, 452, 454, 455, 456], "interpret": [22, 221, 223, 257, 258, 267], "infer": [22, 23, 112, 220, 221, 223, 257, 258, 259, 267, 270, 275, 445, 497, 744], "doe": [22, 34, 138, 144, 154, 200, 214, 221, 223, 257, 258, 259, 267, 273, 274, 374, 377, 502, 513, 538, 586, 677, 680, 697, 767, 828], "yield": [22, 32, 34, 100, 221, 223, 257, 258, 267, 586, 685], "conclus": [22, 221, 223], "some": [22, 30, 135, 257, 258, 267, 709], "intern": [22, 93, 148, 200, 201, 205, 259, 521, 532, 546, 549, 554, 558, 559, 600, 625, 646, 777], "convert": [22, 78, 93, 94, 95, 96, 97, 99, 222, 224, 259, 266, 326, 622, 808, 819, 820, 821, 828, 835], "befor": [22, 34, 56, 102, 148, 151, 178, 267, 341, 342, 343, 436, 447, 448, 449, 450, 451, 452, 454, 455, 456, 500, 504, 586, 638, 639, 640, 735, 746, 747, 748, 749, 750, 751, 753, 754, 755, 804, 809], "collect": [22, 57, 92, 135, 137, 138, 139, 140, 141, 144, 149, 150, 155, 156, 157, 158, 159, 160, 162, 167, 168, 169, 171, 173, 174, 176, 179, 180, 181, 183, 202, 252, 268, 293, 435, 521, 526, 554, 558], "can": [22, 23, 31, 39, 43, 44, 65, 69, 87, 100, 103, 130, 145, 172, 183, 200, 205, 210, 227, 229, 252, 257, 258, 259, 260, 267, 268, 269, 276, 277, 278, 293, 310, 326, 343, 365, 384, 398, 430, 443, 448, 449, 450, 451, 452, 454, 455, 456, 460, 463, 468, 482, 515, 518, 521, 525, 532, 537, 546, 559, 568, 587, 606, 622, 640, 668, 727, 742, 760, 761, 762, 766, 772, 786], "lead": [22, 154, 252, 460, 485, 490, 496, 500, 506, 515, 546, 549, 556, 762, 789, 800, 804], "unexpect": [22, 213], "behavior": [22, 293, 520, 546, 549], "subclass": 22, "For": [22, 34, 45, 55, 56, 87, 146, 151, 229, 252, 259, 329, 426, 443, 468, 530, 539, 540, 586, 742, 772, 820], "mydatafram": 22, "pass": [22, 116, 148, 154, 170, 200, 205, 219, 259, 276, 277, 278, 352, 397, 587, 651], "isinst": [22, 277, 278], "lazi": [22, 56, 128, 131, 135, 136, 137, 139, 140, 141, 144, 148, 149, 150, 151, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 203, 205, 227, 252, 255, 267, 277, 281, 293, 435, 521, 578, 580], "construct": [22, 143, 163, 218, 219, 220, 221, 222, 223], "b": [22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 128, 131, 135, 136, 137, 139, 140, 141, 144, 150, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 183, 191, 203, 218, 219, 220, 221, 222, 223, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 253, 254, 259, 289, 292, 293, 303, 307, 310, 314, 316, 328, 329, 330, 337, 345, 346, 347, 384, 386, 388, 389, 390, 394, 395, 398, 401, 404, 405, 406, 407, 408, 409, 411, 414, 416, 421, 430, 434, 438, 446, 463, 469, 487, 501, 502, 503, 513, 515, 517, 518, 524, 527, 529, 532, 536, 537, 540, 551, 556, 558, 559, 586, 606, 626, 641, 643, 684, 685, 693, 709, 717, 743, 759, 791, 825], "notic": 22, "dtype": [22, 44, 45, 56, 97, 145, 146, 151, 220, 255, 257, 258, 267, 275, 276, 277, 278, 281, 293, 294, 295, 296, 297, 298, 299, 302, 304, 305, 306, 307, 314, 329, 332, 333, 334, 335, 336, 341, 342, 351, 354, 357, 359, 361, 364, 370, 377, 384, 386, 392, 419, 420, 443, 444, 448, 449, 450, 451, 452, 454, 455, 456, 463, 466, 467, 474, 491, 504, 506, 508, 509, 510, 514, 515, 520, 521, 526, 528, 537, 544, 545, 558, 601, 602, 603, 610, 624, 629, 630, 631, 632, 638, 639, 650, 653, 659, 661, 664, 667, 673, 680, 685, 690, 700, 705, 745, 759, 766, 778, 795, 801, 809, 820, 821, 822, 837], "automat": [22, 257, 258, 266, 267, 277, 278], "int64": [22, 31, 39, 44, 45, 68, 80, 92, 136, 145, 146, 160, 166, 341, 342, 351, 354, 357, 359, 361, 364, 370, 384, 443, 504, 510, 521, 537, 638, 639, 650, 653, 659, 661, 664, 667, 673, 683, 742, 759, 809, 820, 821, 822], "In": [22, 23, 32, 34, 44, 45, 65, 145, 146, 255, 271, 277, 278, 281, 293, 425, 470, 471, 586, 685, 741], "order": [22, 43, 44, 45, 67, 69, 79, 101, 104, 144, 145, 146, 172, 177, 200, 273, 302, 304, 330, 441, 458, 459, 460, 470, 471, 502, 512, 513, 522, 596, 599, 626, 740, 745, 757, 758, 762, 807, 824, 825], "your": [22, 130, 147, 153, 154, 257, 258, 273, 274], "initi": [22, 530, 539], "list": [22, 26, 31, 32, 33, 37, 42, 44, 49, 64, 67, 78, 87, 93, 94, 100, 101, 102, 103, 109, 119, 131, 134, 135, 136, 137, 141, 158, 177, 178, 181, 182, 200, 202, 204, 224, 226, 228, 239, 256, 257, 258, 260, 264, 266, 267, 276, 277, 278, 288, 307, 309, 310, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 384, 386, 392, 420, 426, 427, 435, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 462, 470, 471, 481, 492, 501, 502, 506, 526, 532, 536, 546, 549, 558, 559, 569, 600, 603, 605, 606, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 685, 690, 694, 700, 709, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 785, 796, 807, 811, 819], "col1": [22, 103], "float32": [22, 39, 112, 705], "col2": [22, 103], "df2": [22, 34, 40, 106, 191, 200, 203, 273], "f32": [22, 310, 441, 463, 536, 606, 740], "Or": [22, 44, 45, 56, 104, 145, 146, 151, 435, 562], "valid": [22, 32, 260, 264, 278, 343, 470, 475, 476, 480, 481, 482, 640, 685, 697, 779, 780, 784, 785, 786, 791, 792], "df3": [22, 200], "numpi": [22, 37, 96, 221, 272, 432, 433, 506, 706, 710, 711, 712, 731, 732, 746, 811, 820, 828], "import": [22, 27, 44, 56, 97, 103, 104, 112, 119, 154, 205, 218, 221, 222, 266, 267, 268, 273, 274, 275, 276, 277, 278, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 535, 544, 634, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 703, 706, 710, 711, 712, 746, 770, 813], "arrai": [22, 32, 92, 96, 185, 218, 221, 257, 258, 307, 316, 317, 318, 319, 320, 323, 324, 332, 333, 334, 338, 339, 340, 341, 342, 418, 448, 449, 451, 454, 455, 456, 460, 476, 478, 480, 481, 482, 526, 536, 569, 578, 603, 612, 613, 614, 615, 616, 619, 620, 630, 631, 632, 636, 637, 638, 639, 685, 722, 747, 748, 750, 753, 754, 755, 762, 767, 780, 782, 784, 785, 786, 816, 820, 828, 837], "df4": 22, "6": [22, 23, 26, 28, 29, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 53, 55, 58, 59, 60, 61, 62, 63, 66, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 108, 109, 110, 112, 131, 135, 136, 137, 141, 144, 146, 149, 150, 158, 166, 167, 168, 169, 171, 176, 178, 180, 181, 183, 218, 220, 221, 222, 223, 227, 232, 239, 241, 242, 253, 254, 293, 328, 329, 341, 342, 345, 350, 365, 366, 367, 369, 376, 380, 386, 388, 389, 394, 396, 398, 416, 435, 439, 441, 442, 445, 448, 449, 450, 451, 452, 454, 455, 456, 459, 470, 471, 476, 483, 486, 505, 507, 518, 532, 536, 558, 559, 586, 628, 634, 638, 639, 641, 643, 668, 679, 690, 728, 740, 749, 751, 752, 753, 755, 759, 780, 787, 809], "c": [22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 37, 38, 39, 40, 42, 43, 44, 47, 49, 50, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 92, 96, 97, 98, 100, 101, 103, 105, 106, 109, 112, 116, 128, 131, 135, 136, 137, 141, 144, 150, 158, 166, 167, 171, 181, 191, 220, 222, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 253, 254, 259, 267, 276, 293, 307, 314, 316, 411, 463, 493, 497, 513, 515, 518, 524, 527, 532, 540, 558, 559, 641, 717, 797, 801, 825], "attribut": [22, 119, 120, 185, 275, 563, 565, 570, 573, 574, 575, 578, 830, 833, 837, 840, 841, 842], "get": [22, 26, 31, 41, 42, 44, 45, 47, 48, 52, 54, 58, 64, 77, 80, 82, 86, 90, 95, 107, 131, 136, 142, 145, 146, 147, 152, 153, 166, 171, 175, 225, 232, 242, 244, 245, 246, 247, 248, 249, 250, 253, 254, 261, 265, 279, 288, 300, 301, 302, 303, 304, 311, 315, 316, 327, 338, 339, 340, 341, 342, 352, 391, 396, 400, 402, 410, 413, 415, 422, 423, 424, 425, 427, 429, 432, 433, 440, 469, 473, 483, 486, 504, 505, 512, 516, 538, 542, 546, 547, 548, 549, 557, 560, 561, 569, 594, 595, 596, 597, 598, 599, 607, 611, 612, 623, 628, 636, 637, 638, 639, 651, 683, 695, 699, 700, 704, 707, 716, 720, 723, 725, 726, 728, 730, 731, 732, 736, 737, 739, 773, 776, 787, 790, 810, 815, 816, 817, 824, 827, 828, 837], "height": [22, 30], "schema": [22, 23, 24, 25, 31, 128, 129, 136, 154, 203, 215, 220, 252, 257, 258, 261, 265, 267, 270, 277, 425, 633], "f": [23, 27, 30, 58, 92, 100, 103, 135, 154, 181, 229, 252, 293, 326, 420, 421, 463, 497, 520, 526, 530, 531, 539, 545, 553, 622, 801], "callabl": [23, 39, 68, 154, 160, 229, 252, 267, 293, 326, 420, 421, 447, 520, 530, 531, 539, 545, 553, 587, 622, 746], "tupl": [23, 77, 78, 82, 161, 170, 266, 399, 445, 744, 763], "return_dtyp": [23, 293, 420, 520, 545, 587], "union": [23, 28, 30, 31, 33, 43, 59, 60, 62, 63, 65, 67, 73, 80, 81, 87, 89, 100, 102, 104, 109, 130, 135, 137, 138, 144, 154, 158, 161, 166, 167, 170, 172, 181, 185, 192, 200, 202, 203, 219, 220, 225, 227, 251, 252, 255, 275, 276, 277, 278, 281, 293, 322, 329, 368, 373, 384, 403, 420, 469, 497, 518, 519, 520, 521, 522, 525, 526, 527, 531, 532, 534, 535, 537, 545, 546, 549, 553, 555, 558, 559, 587, 709, 761, 801], "inference_s": 23, "256": [23, 735], "custom": [23, 154, 229, 252, 293, 326, 420, 447, 520, 545, 587, 622, 746], "user": [23, 229, 252, 293, 460, 520, 587, 762], "defin": [23, 44, 45, 65, 112, 119, 145, 146, 205, 229, 252, 275, 276, 277, 293, 448, 449, 450, 451, 452, 454, 455, 456, 520, 544, 587], "udf": [23, 229, 252, 293, 520, 587], "over": [23, 34, 43, 100, 226, 229, 239, 252, 257, 258, 267, 277, 293, 343, 389, 398, 420, 421, 447, 448, 449, 450, 451, 452, 454, 455, 456, 520, 530, 531, 539, 545, 553, 569, 586, 587, 640, 746, 747, 748, 750, 754], "receiv": [23, 200], "each": [23, 56, 151, 161, 200, 229, 230, 232, 242, 252, 253, 254, 270, 273, 274, 276, 293, 313, 325, 368, 373, 392, 441, 481, 493, 494, 520, 609, 621, 628, 671, 676, 740, 785, 797, 798], "implement": [23, 116, 229, 252, 293, 760, 761], "logic": [23, 143, 150, 163, 184, 229, 252, 293, 510, 822], "python": [23, 78, 187, 205, 229, 252, 257, 258, 272, 293, 420, 520, 587, 655, 656, 657, 662, 819], "almost": [23, 229, 252, 293], "alwai": [23, 154, 229, 252, 257, 293, 425], "_significantly_": [23, 229, 252, 293], "slower": [23, 67, 104, 114, 221, 223, 229, 252, 293], "memori": [23, 34, 85, 116, 203, 218, 221, 222, 223, 229, 239, 252, 257, 258, 260, 264, 267, 269, 270, 271, 293, 442, 463, 586, 741, 766, 767], "intens": [23, 229, 252, 293], "than": [23, 43, 56, 77, 79, 103, 144, 151, 205, 217, 221, 223, 229, 252, 257, 258, 277, 278, 293, 411, 458, 468, 470, 484, 489, 494, 500, 556, 559, 757, 772, 788, 793, 798, 804], "nativ": [23, 229, 252, 257, 260, 264, 293], "becaus": [23, 32, 44, 57, 103, 145, 229, 252, 293, 310, 587, 606, 685], "engin": [23, 229, 252, 266, 293], "run": [23, 57, 119, 130, 138, 161, 170, 202, 229, 252, 293, 310, 343, 554, 555, 606, 640, 843], "rust": [23, 112, 116, 213, 229, 252, 260, 264, 293], "forc": [23, 56, 150, 151, 229, 252, 293], "materi": [23, 161, 229, 252, 293], "parallelis": [23, 229, 252, 293], "cannot": [23, 79, 170, 229, 252, 257, 258, 293, 458, 493, 757, 797], "optimis": [23, 229, 252, 293, 760, 761], "wherev": [23, 229, 252, 293], "possibl": [23, 229, 252, 257, 293, 419, 425, 494, 514, 798], "you": [23, 30, 34, 56, 65, 96, 100, 116, 130, 135, 147, 151, 153, 170, 200, 219, 229, 239, 252, 255, 257, 258, 259, 267, 281, 293, 310, 332, 333, 334, 384, 390, 420, 443, 448, 449, 450, 451, 452, 454, 455, 456, 483, 486, 521, 530, 539, 586, 606, 630, 631, 632, 742, 787, 790, 820, 828], "should": [23, 44, 56, 111, 112, 113, 114, 115, 116, 134, 150, 151, 154, 170, 184, 229, 252, 255, 275, 276, 278, 281, 288, 293, 310, 330, 343, 377, 405, 407, 447, 448, 449, 450, 451, 452, 454, 455, 456, 459, 468, 490, 496, 544, 587, 606, 626, 640, 680, 746, 747, 748, 749, 750, 751, 753, 754, 755, 758, 772, 789, 794, 800], "strongli": [23, 229, 252, 293], "prefer": [23, 34, 229, 252, 293, 447, 586, 746], "achiev": [23, 229, 252, 293], "best": [23, 229, 252, 293], "perform": [23, 44, 45, 56, 72, 116, 145, 146, 151, 183, 210, 229, 252, 257, 258, 260, 264, 267, 269, 270, 271, 293], "lambda": [23, 30, 39, 135, 154, 229, 252, 267, 293, 326, 381, 382, 383, 420, 421, 447, 532, 559, 587, 622, 686, 687, 688], "given": [23, 32, 77, 83, 84, 168, 169, 188, 190, 200, 204, 255, 257, 258, 267, 275, 276, 277, 278, 281, 308, 321, 372, 380, 387, 417, 441, 444, 445, 448, 449, 451, 454, 455, 456, 461, 462, 481, 497, 511, 518, 587, 604, 617, 675, 684, 685, 691, 721, 733, 740, 744, 747, 748, 750, 753, 754, 755, 764, 765, 785, 823, 829], "tri": 23, "case": [23, 34, 44, 45, 145, 146, 200, 271, 420, 425, 426, 562, 586], "first": [23, 47, 56, 58, 64, 69, 100, 101, 104, 130, 147, 151, 153, 177, 220, 232, 239, 253, 257, 258, 259, 266, 267, 270, 302, 303, 304, 310, 312, 313, 343, 365, 368, 396, 402, 415, 480, 482, 487, 488, 522, 524, 530, 539, 542, 569, 596, 599, 606, 608, 609, 640, 641, 668, 671, 699, 707, 720, 784, 786, 791, 792, 837], "determin": [23, 39, 44, 45, 100, 104, 145, 146, 198, 200, 203, 220, 223, 257, 258, 259, 264, 271, 326, 330, 425, 444, 448, 449, 450, 451, 452, 454, 455, 456, 468, 522, 622, 626, 772], "frame": [23, 65, 97, 103, 112, 148, 200, 259, 277], "level": [23, 39, 65, 116, 147, 153, 267, 269, 270, 271, 277, 390], "track": 23, "black": [23, 191], "arbitrarili": 23, "drop": [23, 29, 30, 101, 135, 177, 309, 344, 346, 347, 605, 642, 644], "rearrang": 23, "transform": [23, 188, 420, 498, 499], "add": [23, 34, 44, 109, 110, 145, 150, 180, 181, 182, 183, 190, 438, 503, 535, 562, 586], "new": [23, 28, 30, 49, 50, 65, 66, 73, 74, 91, 103, 108, 164, 176, 252, 255, 281, 289, 386, 392, 398, 421, 487, 488, 493, 494, 501, 502, 507, 583, 587, 645, 690, 733, 743, 791, 792, 797, 798, 805, 807, 812, 818, 829], "want": [23, 34, 65, 130, 147, 153, 332, 333, 334, 390, 420, 448, 449, 450, 451, 452, 454, 455, 456, 530, 539, 586, 630, 631, 632, 820], "preserv": 23, "syntax": [23, 65, 87, 170], "instead": [23, 44, 60, 65, 67, 112, 114, 115, 139, 144, 145, 184, 255, 264, 277, 281, 302, 304, 483, 521, 559, 596, 599, 760, 761, 787], "foo": [23, 26, 28, 29, 30, 31, 34, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 53, 55, 58, 59, 60, 61, 63, 66, 67, 69, 71, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 100, 102, 105, 106, 107, 112, 131, 135, 136, 141, 148, 149, 150, 166, 167, 178, 181, 227, 239, 289, 308, 311, 312, 315, 316, 332, 333, 334, 365, 392, 396, 397, 437, 445, 461, 462, 474, 476, 477, 478, 481, 485, 490, 492, 494, 496, 498, 499, 505, 507, 518, 521, 525, 541, 544, 552, 555, 562, 610, 630, 668, 780, 781, 782, 785, 798], "bar": [23, 26, 28, 29, 30, 31, 34, 37, 38, 39, 40, 41, 42, 47, 49, 50, 51, 53, 55, 58, 59, 60, 61, 63, 66, 67, 69, 71, 73, 74, 75, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 102, 105, 106, 112, 131, 135, 136, 141, 148, 149, 150, 166, 167, 178, 227, 239, 289, 316, 397, 468, 477, 478, 492, 494, 518, 555, 562, 610, 772, 781, 782, 798], "8": [23, 26, 27, 28, 29, 30, 31, 33, 37, 38, 40, 47, 49, 55, 59, 60, 61, 63, 71, 73, 75, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 96, 97, 98, 103, 105, 106, 109, 112, 126, 131, 135, 136, 137, 141, 150, 161, 166, 167, 176, 181, 197, 199, 200, 272, 276, 277, 292, 303, 309, 310, 337, 343, 346, 347, 398, 414, 435, 437, 438, 445, 446, 449, 450, 452, 454, 456, 463, 469, 484, 489, 497, 503, 507, 532, 536, 558, 559, 605, 606, 640, 654, 735, 746, 749, 751, 752, 753, 755, 788, 793, 801], "map": [23, 31, 73, 93, 136, 164, 219, 220, 257, 258, 260, 261, 264, 265, 267, 269, 368, 373, 421, 515, 520, 569, 671, 676], "t": [23, 103, 203, 259, 267, 310, 343, 380, 381, 382, 383, 497, 520, 562, 606, 640, 684, 686, 687, 688, 759, 801, 828], "column_0": [23, 100, 221, 223], "column_1": [23, 100, 221, 223], "15": [23, 44, 45, 50, 146, 343, 368, 373, 640, 648, 671, 676], "24": [23, 32, 45, 146, 341, 343, 354, 640, 653], "It": [23, 154, 205, 229, 252, 293, 374, 425, 677, 760, 761], "better": [23, 229, 252, 293, 515, 760, 761], "an": [23, 24, 25, 32, 35, 39, 44, 45, 56, 65, 67, 69, 75, 77, 92, 96, 103, 128, 129, 130, 138, 145, 146, 151, 154, 161, 170, 172, 182, 202, 205, 206, 209, 210, 213, 218, 229, 239, 252, 257, 258, 259, 266, 267, 269, 276, 277, 278, 289, 290, 293, 310, 312, 329, 332, 333, 334, 338, 339, 340, 341, 342, 343, 377, 390, 411, 420, 421, 426, 439, 447, 448, 449, 450, 451, 452, 454, 455, 456, 477, 481, 490, 496, 497, 506, 521, 525, 536, 544, 553, 555, 569, 578, 606, 608, 624, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 680, 685, 746, 747, 748, 749, 750, 751, 753, 754, 755, 760, 761, 781, 785, 789, 794, 800, 801, 820, 828, 837], "select": [23, 56, 60, 65, 77, 86, 98, 102, 104, 131, 148, 151, 171, 178, 200, 201, 256, 257, 258, 260, 264, 266, 267, 268, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 323, 324, 326, 327, 328, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 397, 398, 400, 401, 403, 404, 406, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 489, 490, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 507, 508, 509, 511, 512, 513, 514, 515, 516, 518, 520, 521, 525, 526, 532, 535, 537, 540, 558, 559, 569, 578, 606, 622, 760, 761, 773, 784, 786, 811, 837], "scalar": [23, 459, 520, 758], "9": [23, 39, 45, 47, 51, 81, 90, 103, 106, 108, 109, 112, 146, 149, 167, 180, 181, 200, 227, 241, 292, 303, 320, 323, 337, 342, 346, 347, 350, 366, 375, 376, 398, 403, 411, 414, 435, 445, 447, 449, 455, 465, 469, 507, 524, 526, 558, 649, 658, 660, 666, 671, 672, 676, 678, 690, 709, 746, 754, 756, 769], "14": [23, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 272, 398, 648, 671], "follow": [23, 44, 45, 56, 104, 144, 145, 146, 151, 257, 258, 266, 267, 293, 365, 368, 373, 392, 441, 448, 449, 450, 451, 452, 454, 455, 456, 520, 563, 565, 570, 573, 574, 575, 668, 671, 676, 740, 760, 761, 830, 833, 840, 841, 842, 844], "creat": [24, 25, 44, 45, 66, 69, 104, 128, 129, 132, 133, 145, 146, 204, 205, 218, 221, 223, 276, 277, 278, 368, 373, 442, 491, 515, 521, 526, 533, 534, 535, 629, 633, 645, 671, 676, 733, 741, 795, 820], "empti": [24, 25, 53, 62, 112, 128, 129, 158, 210, 259, 555, 629, 633, 705], "copi": [24, 25, 92, 128, 129, 218, 500, 583, 629, 633, 645, 804, 816, 820], "ident": [24, 25, 128, 129, 629, 633], "clone": [24, 96, 97, 128, 219, 220, 221, 222, 223, 629, 819, 820, 828, 837], "cheap": [24, 25, 128, 129, 586, 629, 633], "deepcopi": [24, 25, 128, 129, 629, 633], "13": [24, 25, 35, 36, 42, 45, 50, 64, 109, 128, 139, 140, 146, 181, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 283, 447, 449, 526, 587, 671, 676, 678], "clear": [25, 129, 633, 837], "properti": [26, 31, 48, 80, 82, 107, 131, 136, 166, 578, 683, 695, 700, 730, 763, 815], "7": [26, 27, 28, 29, 31, 33, 37, 38, 40, 44, 45, 47, 49, 51, 55, 59, 60, 61, 63, 66, 71, 73, 75, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 96, 97, 98, 103, 104, 105, 106, 112, 131, 136, 137, 141, 146, 149, 150, 162, 166, 167, 176, 205, 342, 350, 366, 368, 373, 376, 379, 385, 396, 398, 435, 445, 449, 455, 505, 507, 558, 593, 649, 654, 671, 676, 679, 754], "ham": [26, 28, 29, 30, 31, 37, 38, 40, 46, 47, 49, 55, 59, 60, 61, 63, 66, 71, 73, 75, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 95, 96, 97, 98, 105, 106, 112, 131, 135, 136, 141, 150, 166, 167, 525], "appl": [26, 49, 55, 73, 75, 93, 150, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 438, 446, 479, 495, 503, 783, 799], "banana": [26, 93, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 438, 446, 503], "orang": [26, 191, 230, 231, 233, 234, 235, 237, 240, 241], "summari": [27, 641], "statist": [27, 116, 257, 258, 382, 383, 412, 448, 449, 450, 451, 452, 453, 454, 455, 456, 468, 641, 687, 688, 718, 752, 772], "datetim": [27, 44, 45, 56, 104, 112, 145, 146, 151, 205, 222, 308, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 399, 448, 449, 450, 451, 452, 454, 455, 456, 497, 510, 524, 535, 544, 549, 569, 604, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 703, 723, 726, 731, 732, 761, 801, 815, 822], "date": [27, 44, 45, 56, 97, 119, 145, 146, 151, 200, 205, 257, 258, 267, 268, 308, 348, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 448, 449, 450, 451, 452, 454, 455, 456, 497, 510, 524, 549, 569, 578, 604, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 703, 723, 726, 731, 732, 761, 801, 822], "d": [27, 46, 47, 50, 55, 58, 90, 92, 103, 106, 109, 112, 150, 181, 191, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 268, 352, 392, 463, 476, 481, 493, 497, 524, 651, 674, 780, 785, 797, 801], "e": [27, 47, 58, 90, 92, 103, 109, 112, 181, 191, 257, 258, 259, 260, 264, 269, 271, 380, 384, 392, 417, 460, 463, 468, 537, 684, 759, 762, 772, 820], "usd": 27, "eur": [27, 275], "2020": [27, 45, 146, 351, 354, 357, 359, 361, 364, 370, 378, 648, 650, 653, 659, 661, 664, 667, 673, 681], "2021": [27, 44, 104, 497, 544, 654, 703, 801], "2022": [27, 200, 205, 272, 497, 535, 654, 801], "count": [27, 44, 45, 56, 65, 66, 69, 100, 104, 110, 145, 146, 151, 183, 229, 238, 252, 257, 258, 260, 264, 267, 269, 270, 271, 338, 365, 414, 431, 434, 448, 449, 450, 451, 452, 454, 455, 456, 476, 513, 515, 550, 569, 641, 668, 729, 734, 780, 825, 826], "null_count": [27, 30, 343, 569, 640, 641, 837], "mean": [27, 36, 69, 95, 116, 140, 224, 257, 258, 267, 386, 389, 392, 449, 468, 480, 523, 569, 641, 690, 693, 697, 748, 772, 784, 837], "266667": 27, "null": [27, 30, 36, 39, 40, 51, 55, 60, 61, 66, 71, 83, 84, 87, 88, 89, 93, 102, 105, 112, 135, 140, 149, 150, 168, 169, 172, 178, 200, 203, 220, 235, 257, 258, 267, 289, 292, 302, 304, 309, 311, 312, 315, 321, 326, 328, 332, 333, 334, 337, 344, 346, 347, 351, 354, 357, 359, 361, 364, 370, 381, 382, 383, 384, 387, 388, 389, 390, 394, 398, 405, 406, 407, 408, 409, 414, 434, 436, 442, 447, 448, 449, 450, 451, 452, 454, 455, 456, 461, 462, 463, 465, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 491, 493, 494, 495, 500, 510, 517, 518, 524, 526, 527, 537, 544, 558, 587, 596, 599, 605, 617, 622, 630, 642, 645, 650, 653, 659, 661, 664, 667, 673, 686, 687, 688, 691, 693, 697, 713, 714, 734, 735, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 764, 765, 769, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 793, 795, 797, 798, 799, 820, 822, 828], "std": [27, 447, 569, 641, 753, 837], "101514": 27, "707107": [27, 382, 687], "min": [27, 36, 44, 45, 69, 116, 140, 146, 277, 278, 332, 334, 340, 389, 441, 451, 555, 569, 630, 632, 637, 641, 693, 740, 750, 837], "01": [27, 44, 45, 104, 146, 200, 205, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 497, 535, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 801], "median": [27, 69, 450, 569, 749, 837], "": [28, 30, 32, 43, 44, 50, 55, 56, 74, 75, 91, 112, 135, 144, 145, 151, 176, 204, 227, 251, 257, 258, 278, 309, 313, 314, 321, 322, 325, 352, 384, 412, 426, 430, 432, 433, 435, 436, 443, 447, 471, 483, 484, 486, 489, 491, 492, 494, 497, 500, 502, 532, 535, 537, 540, 546, 549, 551, 559, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 605, 609, 610, 612, 617, 618, 621, 624, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 643, 648, 651, 671, 676, 683, 685, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 731, 732, 735, 736, 737, 739, 740, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 768, 769, 770, 771, 773, 774, 776, 779, 780, 781, 782, 783, 785, 787, 788, 790, 791, 793, 795, 798, 799, 801, 804, 807, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828], "place": [29, 49, 50, 74, 83, 84, 87, 106, 112, 168, 169, 172, 302, 304, 314, 321, 461, 462, 596, 599, 610, 617, 741, 743, 764, 765, 774], "subset": [30, 65, 95, 101, 135, 177, 224], "where": [30, 34, 62, 108, 158, 201, 266, 376, 380, 459, 468, 556, 562, 569, 586, 597, 679, 684, 758, 772, 776, 827, 829], "appli": [30, 39, 68, 112, 135, 147, 153, 154, 160, 201, 203, 227, 267, 275, 277, 278, 350, 353, 355, 356, 358, 360, 362, 363, 366, 367, 369, 375, 376, 379, 382, 383, 420, 435, 447, 448, 449, 451, 455, 518, 521, 530, 531, 539, 545, 553, 569, 578, 649, 652, 654, 658, 660, 663, 665, 666, 669, 670, 672, 678, 679, 682, 687, 688, 746, 747, 748, 750, 754, 837], "wise": [30, 39, 135, 200, 294, 295, 296, 297, 298, 299, 335, 336, 385, 418, 465, 466, 467, 508, 509, 530, 531, 539, 553, 588, 589, 590, 591, 592, 593, 634, 635, 689, 722, 769, 770, 771, 813, 814], "singl": [30, 34, 41, 87, 135, 172, 200, 203, 227, 251, 257, 258, 266, 267, 276, 365, 390, 420, 442, 445, 474, 490, 496, 517, 520, 525, 545, 554, 586, 668, 741, 744, 778, 789, 794, 800, 816], "snippet": [30, 135], "how": [30, 55, 103, 135, 150, 191, 203, 220, 223, 266, 309, 330, 344, 398, 444, 477, 605, 626, 642, 781], "could": [30, 44, 135, 145, 198, 207, 329, 530, 539, 624], "base": [30, 37, 44, 45, 117, 135, 141, 145, 146, 239, 380, 417, 418, 546, 549, 578, 684, 721, 722, 829], "condit": [30, 37, 77, 135, 141, 201, 479, 495], "filter": [30, 53, 135, 138, 148, 229, 252, 267, 268, 479, 495, 517, 521, 569, 760, 837], "fold": [30, 135, 426, 524, 530, 531, 553, 559, 569], "acc": [30, 135, 530, 531, 539, 553], "is_nul": [30, 135, 569, 837], "expr": [30, 33, 35, 37, 43, 44, 45, 55, 65, 69, 77, 81, 87, 108, 109, 135, 137, 139, 141, 144, 145, 146, 150, 167, 169, 172, 180, 181, 200, 201, 203, 205, 227, 251, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 569, 570, 573, 574, 575, 606, 640, 692, 765, 811], "also": [31, 43, 44, 45, 65, 87, 145, 146, 182, 205, 277, 278, 349, 384, 398, 441, 448, 449, 450, 451, 452, 454, 455, 456, 530, 531, 539, 553, 568, 648, 740], "header": [31, 69, 100, 112, 116, 257, 258, 259, 267], "colnam": [31, 136, 277, 421], "float64": [31, 32, 39, 80, 112, 136, 166, 255, 277, 281, 294, 295, 296, 297, 298, 299, 329, 335, 336, 369, 384, 405, 407, 466, 467, 508, 509, 524, 537, 672], "unit": [32, 119, 120, 161, 205, 277, 278, 348, 352, 372, 377, 419, 426, 514, 647, 651, 675, 680, 685, 815], "sizeunit": [32, 685], "float": [32, 35, 56, 71, 79, 84, 121, 122, 139, 151, 162, 169, 170, 204, 240, 268, 273, 274, 275, 277, 278, 308, 331, 332, 333, 334, 346, 347, 369, 380, 381, 382, 383, 387, 388, 393, 398, 401, 404, 405, 407, 408, 409, 417, 422, 429, 432, 433, 437, 440, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 462, 523, 524, 532, 546, 547, 548, 549, 552, 554, 557, 559, 561, 604, 624, 627, 630, 631, 632, 643, 672, 684, 685, 686, 687, 688, 691, 692, 696, 708, 718, 721, 723, 724, 725, 726, 731, 732, 738, 739, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 772, 776, 809, 827], "estim": [32, 257, 258, 382, 383, 412, 685, 687, 688, 718], "total": [32, 685], "heap": [32, 685], "alloc": [32, 72, 257, 258, 685], "size": [32, 44, 103, 116, 145, 257, 258, 276, 277, 278, 279, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 521, 685, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "byte": [32, 112, 257, 258, 259, 260, 261, 264, 265, 267, 483, 486, 685, 787, 790], "sum": [32, 39, 43, 45, 69, 144, 146, 200, 227, 293, 341, 342, 380, 390, 435, 448, 449, 451, 454, 455, 456, 517, 518, 530, 532, 539, 549, 569, 638, 639, 684, 685, 747, 748, 750, 753, 754, 755, 837], "its": [32, 102, 178, 368, 373, 671, 676, 685], "buffer": [32, 257, 258, 685], "nest": [32, 185, 191, 578, 685], "multipl": [32, 34, 37, 44, 49, 67, 69, 87, 109, 134, 141, 145, 172, 181, 182, 202, 203, 227, 251, 257, 258, 267, 269, 271, 276, 278, 384, 426, 430, 445, 448, 449, 450, 451, 452, 454, 455, 456, 471, 522, 530, 531, 537, 539, 545, 553, 562, 586, 685, 727, 744], "bitmap": [32, 685], "therefor": [32, 685], "comput": [32, 56, 101, 116, 148, 150, 151, 177, 182, 202, 203, 207, 240, 287, 294, 295, 296, 297, 298, 299, 317, 318, 319, 335, 336, 338, 339, 340, 341, 342, 345, 380, 385, 412, 417, 418, 430, 436, 439, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 465, 466, 467, 468, 472, 508, 509, 529, 536, 551, 556, 569, 578, 580, 582, 588, 589, 590, 591, 592, 593, 613, 614, 615, 634, 635, 636, 637, 638, 639, 643, 684, 685, 689, 718, 721, 722, 727, 735, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 769, 770, 771, 772, 775, 813, 814, 837], "particular": [32, 257, 260, 264, 269, 271, 685], "structarrai": [32, 685], "upper": [32, 44, 145, 205, 257, 258, 399, 514, 521, 685], "bound": [32, 44, 145, 205, 257, 258, 312, 399, 419, 514, 521, 608, 685], "slice": [32, 130, 138, 154, 161, 170, 202, 313, 325, 447, 448, 449, 450, 451, 452, 454, 455, 456, 569, 609, 621, 685, 746, 747, 748, 749, 750, 751, 753, 754, 755, 837], "remain": [32, 43, 144, 154, 257, 258, 267, 293, 493, 494, 685, 797, 798], "constant": [32, 45, 146, 685], "unchang": [32, 154, 252, 293, 510, 685, 822], "howev": [32, 685], "smaller": [32, 116, 138, 685], "visibl": [32, 685], "capac": [32, 85, 685, 767], "ffi": [32, 685], "kb": [32, 685], "mb": [32, 685], "gb": [32, 685], "tb": [32, 685], "scale": [32, 685], "x": [32, 49, 52, 54, 55, 62, 150, 158, 171, 200, 257, 258, 267, 276, 277, 293, 307, 314, 395, 420, 444, 468, 493, 510, 532, 559, 583, 587, 693, 717, 772, 797, 822], "revers": [32, 87, 172, 200, 302, 304, 323, 338, 339, 340, 341, 342, 421, 438, 441, 460, 470, 471, 503, 511, 522, 569, 596, 599, 619, 636, 637, 638, 639, 740, 762, 774, 823, 837], "1_000_000": [32, 685], "y": [32, 52, 54, 55, 62, 150, 158, 171, 200, 276, 277, 307, 314, 444, 497, 532, 559, 583, 674, 801], "v": [32, 116, 204, 459, 758], "1000": [32, 259, 357, 500, 659], "z": [32, 52, 54, 55, 62, 150, 158, 171, 276, 277, 307, 330, 395, 444, 626, 693], "uint32": [32, 225, 272, 302, 304, 305, 306, 316, 350, 353, 356, 358, 360, 362, 363, 366, 367, 369, 375, 376, 444, 476, 483, 486, 506, 510, 597, 601, 602, 612, 624, 649, 652, 658, 660, 663, 665, 666, 669, 670, 672, 678, 679, 685, 759, 780, 822], "25888898": 32, "689577102661133": 32, "long": [33, 62, 103, 137, 158], "largelist": 33, "letter": [33, 137, 232, 242, 253, 254, 384, 537], "differ": [34, 44, 45, 100, 145, 146, 257, 309, 344, 349, 350, 365, 366, 375, 432, 433, 497, 513, 538, 546, 549, 586, 605, 642, 648, 649, 668, 669, 678, 731, 732, 759, 801], "vstack": [34, 203], "chunk": [34, 64, 116, 226, 257, 258, 267, 269, 270, 271, 277, 278, 292, 442, 586, 628, 728, 741, 816], "append": [34, 55, 56, 150, 151, 277, 442, 569, 837], "underli": [34, 92, 206, 213, 264, 277, 278, 348, 349, 350, 353, 355, 356, 358, 360, 362, 363, 366, 367, 369, 375, 376, 377, 379, 443, 457, 586, 647, 648, 649, 652, 654, 658, 660, 663, 665, 666, 669, 670, 672, 678, 679, 680, 682, 742, 756, 767, 815, 816, 820], "locat": [34, 75, 98, 102, 178, 586, 761, 811], "thu": [34, 267, 556, 586], "caus": [34, 213, 257, 258, 267, 586], "realloc": [34, 267, 269, 270, 586], "have": [34, 72, 170, 183, 200, 239, 257, 258, 259, 273, 277, 278, 280, 343, 381, 382, 383, 426, 441, 586, 640, 648, 686, 687, 688, 697, 740], "extra": [34, 67, 116, 257, 259, 260, 264, 269, 271, 586], "faster": [34, 103, 447, 486, 513, 586, 587, 746, 790], "queri": [34, 57, 130, 132, 133, 138, 147, 153, 161, 170, 183, 188, 202, 252, 260, 266, 267, 269, 270, 271, 482, 580, 586, 786, 843], "do": [34, 56, 92, 100, 103, 130, 151, 154, 161, 170, 200, 202, 239, 267, 310, 343, 518, 586, 606, 640, 820, 828], "after": [34, 102, 178, 256, 257, 258, 260, 264, 267, 269, 270, 271, 283, 441, 500, 586, 648, 740, 804], "instanc": [34, 39, 154, 183, 257, 258, 267, 277, 278, 329, 426, 448, 449, 450, 451, 452, 454, 455, 456, 530, 539, 586, 624], "dure": [34, 257, 258, 267, 586], "onlin": [34, 586], "rerun": [34, 586], "mani": [34, 220, 223, 266, 586], "time": [34, 44, 45, 56, 104, 119, 120, 130, 145, 146, 151, 161, 202, 205, 267, 307, 308, 348, 349, 352, 365, 372, 374, 377, 378, 497, 510, 511, 526, 527, 533, 534, 535, 554, 569, 578, 586, 603, 647, 648, 651, 668, 675, 677, 680, 681, 801, 815, 822, 823, 837], "read": [34, 138, 143, 163, 226, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 420, 586], "file": [34, 111, 112, 113, 114, 115, 116, 138, 163, 184, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 586], "store": [34, 586], "them": [34, 44, 45, 56, 104, 145, 146, 151, 314, 432, 433, 526, 586, 610, 731, 732], "latter": [34, 586], "finish": [34, 191, 207, 586], "rechunk": [34, 203, 218, 222, 257, 258, 260, 267, 269, 270, 271, 569, 586, 628, 728, 837], "vertic": [34, 103, 106, 203, 474, 546, 778], "df1": [34, 40, 106, 191, 200, 203, 273], "20": [34, 49, 50, 68, 70, 74, 75, 160, 300, 301, 302, 304, 344, 368, 373, 395, 398, 544, 676], "30": [34, 44, 49, 68, 74, 75, 93, 109, 160, 181, 204, 300, 301, 302, 304, 344, 351, 367, 368, 373, 379, 395, 463, 648, 650, 671, 676], "40": [34, 68, 160, 368, 373, 395, 654, 676], "50": [34, 220, 223, 332, 333, 334, 368, 373, 630, 676], "60": [34, 369, 370, 497, 669, 672, 673, 801], "fill_valu": [35, 84, 103, 139, 169, 388, 462, 692, 765], "fill": [35, 36, 84, 103, 139, 140, 169, 200, 203, 255, 281, 328, 387, 388, 389, 394, 398, 448, 449, 451, 454, 455, 456, 462, 484, 489, 500, 540, 691, 692, 693, 733, 747, 748, 750, 753, 754, 755, 765, 788, 793, 804], "point": [35, 57, 79, 121, 122, 139, 154, 277, 278, 331, 346, 347, 369, 388, 393, 405, 407, 457, 458, 627, 672, 692, 696, 708, 756, 757], "nan": [35, 139, 222, 273, 274, 277, 346, 347, 388, 398, 405, 407, 408, 409, 422, 429, 432, 433, 556, 589, 593, 644, 692, 711, 712, 731, 732, 746], "evalu": [35, 37, 56, 60, 109, 141, 148, 150, 151, 180, 181, 201, 343, 397, 399, 403, 519, 521, 536, 558, 597, 640, 829], "replac": [35, 36, 75, 100, 108, 139, 180, 257, 258, 267, 477, 488, 569, 760, 761, 781, 792, 837], "Not": [35, 139, 405, 407], "miss": [35, 139, 203, 328, 394, 398, 405, 407, 556, 828], "To": [35, 139, 346, 347, 389, 559], "fill_nul": [35, 139, 200, 497, 569, 801, 837], "strategi": [36, 55, 56, 64, 140, 150, 151, 203, 257, 275, 276, 277, 278, 326, 389, 622, 693], "fillnullstrategi": [36, 140, 389, 693], "limit": [36, 140, 147, 267, 328, 332, 333, 334, 389, 394, 569, 630, 631, 632, 693, 837], "matches_supertyp": [36, 140], "forward": [36, 56, 140, 151, 389, 394, 693], "backward": [36, 56, 116, 140, 151, 328, 389, 693], "zero": [36, 77, 92, 140, 218, 256, 257, 258, 260, 264, 388, 389, 459, 468, 500, 693, 772, 804, 816, 820], "consecut": [36, 140, 328, 389, 394, 474, 693, 778], "supertyp": [36, 140, 292], "fill_nan": [36, 569, 837], "predic": [37, 77, 130, 138, 141, 154, 161, 170, 183, 202, 267, 269, 270, 271, 390, 517, 562, 694, 760, 761], "boolean": [37, 39, 60, 109, 141, 181, 200, 201, 290, 291, 308, 390, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 517, 569, 578, 584, 585, 597, 604, 694, 702, 704, 706, 707, 709, 710, 711, 712, 713, 714, 716, 736, 737, 760, 779, 829, 837], "find": [38, 203, 459, 522, 758], "index": [38, 44, 45, 50, 56, 69, 75, 77, 86, 98, 104, 110, 145, 146, 151, 171, 183, 222, 225, 272, 288, 300, 301, 302, 303, 304, 305, 306, 312, 322, 365, 448, 449, 450, 451, 452, 454, 455, 456, 469, 480, 491, 506, 522, 594, 595, 596, 597, 598, 599, 601, 602, 608, 618, 668, 733, 761, 773, 784, 795, 811], "reduct": 39, "effect": [39, 183], "aggreg": [39, 43, 44, 59, 60, 61, 63, 65, 69, 70, 71, 88, 89, 103, 105, 154, 155, 156, 157, 159, 162, 173, 174, 179, 203, 227, 228, 231, 233, 239, 251, 257, 258, 288, 390, 416, 420, 435, 447, 448, 449, 450, 451, 452, 454, 455, 456, 515, 530, 531, 532, 539, 543, 546, 549, 553, 559, 569, 578, 746, 747, 748, 750, 753, 754, 755, 837], "supercast": 39, "cast": [39, 44, 45, 60, 68, 97, 145, 146, 160, 218, 280, 292, 330, 341, 342, 348, 349, 443, 482, 500, 504, 510, 527, 569, 626, 638, 639, 647, 648, 742, 786, 809, 818, 822, 837], "similar": [39, 56, 151, 435], "parent": 39, "rule": [39, 371, 674], "arithmet": 39, "int8": [39, 341, 342, 504, 638, 639, 745, 809], "take": [39, 91, 176, 277, 365, 374, 507, 536, 538, 569, 668, 677, 812, 829, 837], "s1": [39, 274, 829], "s2": [39, 274, 586, 628, 643, 709, 728, 759, 829], "minimum": [39, 63, 116, 159, 276, 277, 278, 332, 334, 381, 382, 383, 429, 433, 441, 549, 630, 632, 662, 686, 687, 688, 732, 737, 740], "zip_with": [39, 837], "concaten": [39, 203, 628, 728], "foo11": 39, "bar22": 39, "null_equ": [40, 759], "check": [40, 53, 154, 257, 258, 267, 273, 274, 290, 291, 308, 399, 403, 475, 479, 495, 584, 585, 604, 702, 703, 705, 708, 709, 715, 717, 759, 779, 783, 799], "equal": [40, 44, 56, 145, 151, 257, 258, 267, 273, 274, 280, 447, 448, 449, 450, 451, 452, 454, 455, 456, 483, 484, 489, 500, 521, 746, 747, 748, 749, 750, 751, 753, 754, 755, 759, 787, 788, 793, 804], "compar": [40, 101, 177, 273, 274, 759], "consid": [40, 62, 103, 109, 147, 153, 158, 181, 204, 227, 239, 268, 332, 333, 334, 343, 368, 448, 449, 450, 451, 452, 454, 455, 456, 470, 530, 539, 630, 631, 632, 640, 671, 759, 760, 761], "retriev": [41, 305, 306, 501, 601, 602, 805], "maintain_ord": [43, 67, 69, 101, 104, 144, 177, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 288, 293, 506, 512, 824], "start": [43, 44, 57, 86, 104, 110, 144, 171, 183, 256, 257, 258, 260, 264, 267, 269, 270, 271, 322, 350, 352, 353, 360, 362, 366, 367, 368, 369, 372, 373, 375, 376, 379, 384, 399, 469, 475, 479, 491, 495, 525, 530, 537, 539, 562, 618, 647, 648, 649, 651, 652, 658, 660, 663, 665, 666, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682, 773, 783, 795, 799], "group": [43, 44, 45, 65, 67, 69, 103, 104, 116, 144, 145, 146, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 288, 293, 310, 435, 470, 471, 480, 506, 520, 569, 606, 784], "make": [43, 44, 45, 65, 72, 104, 144, 145, 146, 192, 203, 218, 222, 257, 258, 260, 264, 266, 269, 271, 374, 382, 383, 444, 493, 500, 677, 687, 688, 797, 804], "sure": [43, 72, 144, 203, 218, 222, 257, 258, 260, 266, 521], "consist": [43, 144], "expens": [43, 100, 144, 257, 258, 264, 267, 270, 271, 586], "work": [43, 45, 74, 101, 144, 146, 177, 258, 259, 310, 331, 332, 333, 334, 393, 486, 502, 512, 606, 627, 630, 631, 632, 696, 790, 824], "we": [43, 56, 87, 151, 154, 257, 258, 259, 267, 310, 544, 562, 587, 606], "agg": [43, 44, 45, 144, 146, 288, 293, 390, 470, 506, 517], "sort": [43, 44, 45, 56, 67, 69, 104, 145, 146, 151, 200, 227, 232, 242, 253, 254, 302, 304, 330, 390, 460, 471, 515, 517, 522, 569, 596, 599, 626, 762, 824, 826, 837], "11": [43, 45, 116, 144, 146, 346, 347, 365, 368, 373, 398, 436, 455, 469, 500, 525, 559, 587, 668, 671, 676, 746], "loop": 43, "sub_df": 43, "index_column": [44, 45, 145, 146], "everi": [44, 91, 94, 104, 138, 145, 176, 257, 258, 267, 305, 306, 309, 312, 313, 322, 325, 338, 339, 340, 341, 342, 343, 368, 373, 386, 392, 507, 530, 531, 601, 602, 605, 608, 609, 618, 621, 636, 637, 638, 639, 640, 671, 676, 690, 812], "period": [44, 45, 83, 84, 104, 145, 146, 168, 169, 205, 321, 368, 373, 381, 382, 383, 436, 461, 462, 617, 671, 676, 686, 687, 688, 735, 764, 765], "offset": [44, 45, 86, 104, 110, 145, 146, 171, 183, 257, 258, 260, 264, 267, 269, 270, 271, 322, 365, 368, 373, 469, 491, 618, 668, 671, 676, 773, 795], "truncat": [44, 145, 161, 569, 837], "include_boundari": [44, 145], "close": [44, 45, 145, 146, 205, 448, 449, 450, 451, 452, 454, 455, 456, 468, 772], "closedwindow": [44, 45, 145, 146, 205, 448, 449, 450, 451, 452, 454, 455, 456], "dynamicgroupbi": 44, "int32": [44, 45, 145, 146, 220, 277, 278, 329, 355, 379, 510, 654, 682, 822], "window": [44, 45, 145, 146, 205, 343, 368, 373, 381, 382, 383, 435, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 526, 569, 578, 640, 671, 676, 686, 687, 688, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "calcul": [44, 145, 200, 309, 344, 381, 382, 383, 412, 419, 453, 468, 514, 605, 642, 686, 687, 688, 718, 752, 772, 776, 827], "assign": [44, 145, 204, 276, 441, 493, 494, 740, 797, 798], "normal": [44, 145, 380, 412, 468, 684, 718, 772], "groupbi": [44, 45, 65, 145, 146, 288, 293, 310, 343, 390, 435, 470, 471, 506, 517, 520, 578, 606, 640], "member": [44, 145, 709], "seen": [44, 145, 328, 394], "roll": [44, 45, 145, 146, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 526, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "slot": [44, 145, 309, 343, 344, 605, 640, 642], "interv": [44, 45, 104, 145, 146, 205, 368, 369, 373, 448, 449, 450, 451, 452, 454, 455, 456, 649, 651, 652, 658, 660, 663, 665, 666, 669, 670, 671, 672, 674, 675, 676, 678, 679, 682], "length": [44, 45, 86, 145, 146, 161, 171, 203, 204, 255, 270, 276, 281, 322, 343, 368, 373, 426, 447, 448, 449, 450, 451, 452, 454, 455, 456, 469, 484, 486, 489, 491, 500, 521, 569, 618, 628, 640, 671, 676, 719, 733, 746, 747, 748, 749, 750, 751, 753, 754, 755, 773, 788, 790, 793, 795, 804, 837], "argument": [44, 45, 60, 68, 69, 89, 97, 104, 114, 116, 130, 138, 145, 146, 160, 184, 202, 257, 262, 264, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 671, 676], "languag": [44, 45, 56, 104, 145, 146, 151, 267, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 668, 671, 676], "1n": [44, 45, 56, 104, 145, 146, 151, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 668, 671, 676], "nanosecond": [44, 45, 56, 104, 145, 146, 151, 365, 368, 369, 373, 448, 449, 450, 451, 452, 454, 455, 456, 535, 569, 668, 671, 672, 676, 837], "1u": [44, 45, 56, 104, 145, 146, 151, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 668, 671, 676], "microsecond": [44, 45, 56, 104, 145, 146, 151, 161, 365, 368, 369, 373, 448, 449, 450, 451, 452, 454, 455, 456, 534, 535, 569, 668, 671, 676, 837], "1m": [44, 45, 56, 104, 145, 146, 151, 357, 359, 364, 365, 368, 370, 373, 448, 449, 450, 451, 452, 454, 455, 456, 659, 661, 667, 668, 671, 673, 676], "millisecond": [44, 45, 56, 104, 145, 146, 151, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 535, 569, 668, 671, 676, 837], "second": [44, 45, 56, 104, 112, 145, 146, 151, 205, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 497, 522, 534, 535, 569, 668, 671, 676, 837], "minut": [44, 45, 56, 104, 145, 146, 151, 205, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 534, 535, 569, 668, 671, 676, 837], "1h": [44, 45, 56, 104, 145, 146, 151, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 652, 668, 671, 676], "hour": [44, 45, 56, 104, 145, 146, 151, 205, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 534, 535, 569, 668, 671, 676, 837], "1d": [44, 45, 56, 104, 145, 146, 151, 205, 348, 354, 361, 365, 368, 373, 377, 448, 449, 450, 451, 452, 454, 455, 456, 647, 651, 653, 655, 656, 657, 662, 664, 668, 671, 674, 675, 676, 679, 680], "dai": [44, 45, 56, 104, 145, 146, 151, 193, 205, 352, 362, 365, 366, 367, 368, 372, 373, 375, 376, 379, 448, 449, 450, 451, 452, 454, 455, 456, 533, 534, 535, 569, 668, 669, 671, 676, 679, 837], "1w": [44, 45, 56, 104, 145, 146, 151, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 668, 671, 676], "week": [44, 45, 56, 104, 145, 146, 151, 365, 368, 373, 376, 448, 449, 450, 451, 452, 454, 455, 456, 535, 569, 668, 671, 676, 679, 837], "1mo": [44, 45, 56, 104, 145, 146, 151, 205, 351, 365, 368, 373, 378, 448, 449, 450, 451, 452, 454, 455, 456, 648, 650, 665, 668, 669, 670, 671, 676, 678, 681], "calendar": [44, 45, 56, 104, 118, 119, 145, 146, 151, 355, 365, 368, 373, 379, 448, 449, 450, 451, 452, 454, 455, 456, 654, 668, 671, 676, 682], "month": [44, 45, 56, 104, 145, 146, 151, 350, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 533, 534, 569, 649, 668, 671, 676, 837], "1y": [44, 45, 56, 104, 145, 146, 151, 365, 368, 373, 448, 449, 450, 451, 452, 454, 455, 456, 668, 671, 676, 682], "year": [44, 45, 56, 104, 145, 146, 151, 355, 365, 366, 368, 373, 375, 448, 449, 450, 451, 452, 454, 455, 456, 533, 534, 569, 654, 668, 669, 671, 676, 678, 837], "1i": [44, 45, 56, 104, 145, 146, 151, 365, 448, 449, 450, 451, 452, 454, 455, 456, 668], "combin": [44, 45, 46, 56, 104, 145, 146, 151, 170, 215, 216, 227], "3d12h4m25": [44, 45, 56, 104, 145, 146, 151, 205, 368, 373, 671, 676], "12": [44, 45, 56, 104, 145, 146, 151, 170, 200, 204, 205, 341, 353, 362, 367, 368, 373, 379, 436, 463, 533, 534, 587, 665, 671, 676, 756], "25": [44, 45, 56, 104, 108, 109, 145, 146, 151, 156, 179, 180, 181, 205, 368, 373, 379, 671, 676, 684, 735], "integ": [44, 45, 123, 124, 125, 126, 145, 146, 194, 195, 196, 197, 276, 277, 331, 369, 393, 443, 448, 449, 450, 451, 452, 454, 455, 456, 521, 544, 594, 595, 627, 672, 696, 742, 761], "10i": [44, 45, 145, 146], "often": [44, 45, 145, 146, 444], "ascend": [44, 45, 145, 146, 522], "sens": [44, 45, 104, 145, 146, 257, 260, 264, 269, 271], "dynam": [44, 145, 448, 449, 450, 451, 452, 454, 455, 456], "indic": [44, 45, 145, 146, 201, 224, 256, 257, 258, 260, 264, 267, 275, 276, 278, 401, 404, 405, 407, 408, 409, 448, 449, 450, 451, 452, 454, 455, 456, 459, 465, 506, 706, 710, 711, 712, 713, 714, 758, 769, 811], "need": [44, 45, 85, 96, 145, 146, 251, 257, 258, 259, 273, 274, 463, 483, 766, 787, 820], "temporarili": [44, 45, 145, 146, 191], "so": [44, 45, 69, 145, 146, 191, 267, 312, 522, 608], "matter": [44, 45, 145, 146], "neg": [44, 83, 84, 86, 145, 168, 169, 171, 183, 321, 322, 461, 462, 469, 491, 617, 618, 764, 765, 773, 795], "lower": [44, 71, 138, 145, 162, 205, 240, 267, 399, 419, 440, 443, 452, 521, 552, 739, 742, 751], "_lower_bound": [44, 145], "_upper_bound": [44, 145], "impact": [44, 145], "harder": [44, 145], "parallel": [44, 56, 57, 145, 150, 151, 202, 203, 226, 264, 266, 271, 310, 343, 578, 606, 640], "tempor": [44, 45, 145, 146, 205, 448, 449, 450, 451, 452, 454, 455, 456], "date_rang": [44, 104, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682], "low": [44, 205, 369, 521], "16": [44, 45, 108, 109, 123, 146, 170, 180, 181, 194, 272, 398, 449, 535, 536, 671, 676, 735, 770, 813], "high": [44, 205, 369, 521], "30m": [44, 368, 373, 671, 676], "\u03bc": [44, 45, 56, 104, 146, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682], "00": [44, 56, 104, 205, 348, 350, 351, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 497, 535, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 801], "02": [44, 45, 104, 146, 200, 205, 348, 352, 353, 354, 360, 361, 362, 369, 370, 372, 375, 377, 457, 535, 647, 648, 651, 652, 653, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680], "03": [44, 45, 104, 146, 200, 205, 348, 351, 352, 354, 361, 362, 368, 369, 370, 372, 373, 375, 377, 378, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 660, 662, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681], "alia": [44, 45, 58, 102, 108, 109, 146, 148, 153, 178, 180, 181, 200, 251, 293, 304, 310, 332, 333, 334, 338, 339, 340, 341, 342, 348, 350, 351, 352, 354, 357, 359, 361, 364, 365, 366, 368, 369, 370, 372, 373, 376, 377, 378, 390, 392, 397, 402, 403, 411, 414, 415, 428, 435, 436, 443, 459, 475, 476, 479, 481, 483, 486, 491, 493, 494, 495, 510, 511, 517, 523, 524, 526, 527, 532, 535, 536, 540, 554, 558, 559, 569, 599, 606, 647, 648, 651, 668, 675, 680, 681, 720, 797, 798, 837], "time_min": 44, "time_max": 44, "23": [44, 45, 146, 272, 283, 353, 368, 534, 652], "boundari": [44, 332, 333, 334, 630, 631, 632], "ad": [44, 100, 108, 180, 292, 530, 531], "time_count": 44, "_lower_boundari": 44, "_upper_boundari": 44, "u32": [44, 66, 110, 183, 201, 230, 234, 237, 238, 241, 288, 300, 301, 302, 303, 304, 305, 306, 316, 337, 338, 350, 353, 360, 362, 366, 367, 369, 375, 376, 414, 431, 434, 441, 459, 476, 483, 486, 510, 513, 596, 597, 598, 612, 624, 649, 652, 658, 660, 663, 665, 666, 669, 670, 672, 678, 679, 740, 780, 787, 790, 822, 825, 826], "end": [44, 147, 153, 257, 258, 267, 322, 368, 384, 399, 475, 479, 491, 495, 525, 537, 618, 671, 783, 795, 799], "lower_bound": [44, 569], "upper_bound": [44, 569], "time_agg_list": 44, "belong": 44, "kei": [44, 56, 67, 69, 73, 76, 151, 164, 200, 239], "04": [44, 104, 205, 268, 350, 351, 354, 360, 361, 362, 366, 368, 369, 370, 375, 376, 377, 378, 497, 535, 648, 650, 653, 658, 660, 663, 664, 665, 666, 670, 672, 673, 674, 678, 679, 680, 681, 801], "idx": [44, 326, 622, 761], "arang": [44, 103, 229, 252, 569], "eager": [44, 103, 201, 521, 544, 554, 558, 568, 578], "2i": 44, "3i": 44, "a_agg_list": 44, "rollinggroupbi": 45, "dynamic_groupbi": [45, 146], "now": [45, 146, 200], "individu": [45, 146, 277, 293, 481, 628, 785], "groupby_dynam": [45, 146], "45": [45, 146, 368, 373, 476, 481, 671, 676, 780, 785], "48": [45, 146], "42": [45, 46, 146, 698], "09": [45, 146, 200, 649], "18": [45, 146, 161, 368, 373, 377, 398, 411, 680], "19": [45, 56, 146, 368, 671, 676], "32": [45, 121, 124, 146, 195, 272, 463, 643, 669, 735, 751], "08": [45, 146, 205, 273, 274, 368, 497, 535, 671, 676, 801], "43": [45, 146], "dt": [45, 146, 200, 569, 575, 837, 842], "with_column": [45, 68, 146, 160, 293, 310, 329, 330, 332, 333, 334, 395, 398, 399, 402, 405, 407, 408, 409, 411, 435, 436, 479, 483, 486, 487, 488, 491, 493, 494, 495, 497, 500, 502, 510, 521, 524, 526, 527, 532, 536, 558, 559, 562, 606, 626, 801], "strptime": [45, 146, 371, 569, 674, 837], "out": [45, 146, 268, 272, 312, 401, 404, 608], "2d": [45, 96, 146, 649], "sum_a": [45, 146], "min_a": [45, 146], "max_a": [45, 146], "assert": [45, 146, 273, 274, 276, 277, 278, 578, 697], "to_list": [45, 146, 326, 622, 837], "seed": [46, 79, 395, 458, 464, 698, 757, 768], "seed_1": [46, 395, 698], "seed_2": [46, 395, 698], "seed_3": [46, 395, 698], "hash": [46, 569, 837], "uint64": [46, 225, 305, 306, 395, 443, 601, 602, 698, 742], "random": [46, 79, 276, 277, 278, 395, 441, 458, 464, 698, 740, 757, 768], "u64": [46, 395, 443, 698], "4238614331852490969": 46, "17976148875586754089": 46, "4702262519505526977": 46, "18144177983981041107": 46, "in_plac": [49, 85, 106, 741, 743, 767, 774], "grown": 49, "stack": [49, 106, 203], "modifi": [49, 106, 257, 258, 267, 349, 377, 648, 680, 743, 802, 803], "insert": [50, 74, 100, 102, 178, 257, 258, 260, 264, 267, 269, 270, 271, 459, 474, 500, 758, 778, 804], "certain": [50, 104, 130, 161, 209, 384, 537], "baz": [50, 51, 69, 102, 149, 178, 239, 492, 494, 798], "intermedi": [51, 149, 701], "linear": [51, 71, 149, 162, 240, 307, 398, 424, 440, 452, 526, 527, 552, 603, 701, 739, 751], "mask": [52, 54, 308, 400, 402, 410, 604, 694, 704, 707, 716, 736, 737, 760, 779, 829], "duplic": [52, 55, 56, 101, 150, 151, 177, 208, 400, 522, 704], "uniqu": [54, 65, 200, 238, 275, 276, 278, 303, 402, 410, 431, 513, 515, 550, 569, 598, 641, 707, 716, 729, 825, 826, 837], "left_on": [55, 56, 150, 151], "right_on": [55, 56, 150, 151], "joinstrategi": [55, 150], "inner": [55, 150, 185, 191, 314, 345, 610, 643, 700], "suffix": [55, 56, 150, 151, 227, 405, 407, 408, 409, 446, 479, 569, 783], "_right": [55, 56, 150, 151], "like": [55, 138, 163, 205, 239, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 310, 428, 441, 606, 740], "fashion": [55, 130, 138, 161, 170, 202], "outer": [55, 150], "semi": [55, 150], "anti": [55, 150, 760, 761], "cross": [55, 150], "join_asof": [55, 150], "categor": [55, 191, 224, 280, 330, 510, 625, 626, 822], "see": [55, 259, 266, 273, 274, 277, 278, 332, 333, 334, 371, 389, 398, 412, 420, 468, 553, 630, 631, 632, 674, 718, 772, 844], "stringcach": [55, 578], "other_df": [55, 150], "by_left": [56, 151], "by_right": [56, 151], "asofjoinstrategi": [56, 151], "toler": [56, 151, 273, 274], "allow_parallel": [56, 150, 151], "force_parallel": [56, 150, 151], "asof": [56, 151], "join": [56, 130, 138, 151, 161, 170, 191, 200, 202, 398, 435, 569, 837], "nearest": [56, 71, 151, 162, 240, 331, 393, 440, 452, 552, 627, 696, 739, 751], "rather": [56, 151, 500, 804], "asof_join": 56, "search": [56, 151], "last": [56, 69, 87, 90, 101, 151, 172, 175, 177, 242, 254, 302, 304, 312, 325, 343, 350, 366, 375, 494, 505, 560, 569, 596, 599, 608, 621, 640, 649, 669, 678, 798, 810, 837], "whose": [56, 69, 151, 200, 384, 537], "less": [56, 151, 267, 484, 489, 494, 500, 788, 793, 798, 804], "greater": [56, 151, 468, 494, 772, 798], "numer": [56, 60, 151, 332, 333, 334, 444, 463, 578, 630, 631, 632, 715, 759, 766], "By": [56, 87, 151, 257, 258, 259, 544, 776, 820, 827], "done": [56, 151, 172, 251, 257, 258, 267, 292, 329, 484, 489, 624, 788, 793], "within": [56, 151, 185, 273, 274], "distanc": [56, 151], "durat": [56, 104, 151, 205, 351, 354, 357, 359, 361, 364, 370, 377, 510, 569, 650, 653, 659, 661, 664, 667, 673, 680, 822], "allow": [56, 57, 79, 150, 151, 154, 182, 191, 209, 267, 269, 270, 271, 277, 278, 365, 443, 458, 497, 668, 742, 757, 759, 801], "physic": [56, 127, 150, 151, 257, 258, 330, 510, 626, 822], "plan": [56, 57, 127, 132, 133, 143, 150, 151, 163, 170, 184], "up": [56, 150, 151, 154, 192, 331, 500, 627, 804], "gdp": 56, "2016": 56, "2017": 56, "2018": 56, "2019": 56, "record": 56, "jan": 56, "1st": 56, "4164": 56, "4411": 56, "4566": 56, "4696": 56, "popul": 56, "12th": 56, "82": 56, "66": [56, 751], "83": 56, "52": [56, 109, 181, 457], "05": [56, 104, 205, 268, 273, 274, 351, 369, 378, 648, 649, 650, 671, 676, 679, 681], "object": [57, 97, 116, 144, 148, 163, 205, 219, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 271, 276, 277, 278, 544, 578, 600, 625, 646, 777, 816], "execut": [57, 127, 161, 203, 310, 606], "until": [57, 191], "request": 57, "either": [57, 60, 77, 89, 277], "call": [57, 258, 277, 278, 283, 579, 580, 587], "fetch": [57, 128, 130, 147, 153, 178, 226, 267], "small": [57, 138, 368, 373, 470, 471], "describe_plan": 57, "unoptim": [57, 133], "describe_optimized_plan": 57, "optim": [57, 72, 130, 132, 138, 154, 161, 170, 183, 202, 264, 267, 269, 270, 271], "show_graph": 57, "un": 57, "graphviz": [57, 170], "graph": [57, 148, 182, 202, 580], "advis": 57, "thei": [57, 384, 447, 746], "head": [58, 153, 292, 415, 569, 720, 837], "axi": [59, 60, 62, 63, 89, 158], "maximum": [59, 112, 155, 257, 258, 267, 276, 277, 278, 305, 332, 333, 422, 432, 441, 546, 601, 630, 631, 655, 723, 731, 736, 740], "null_strategi": [60, 89], "nullstrategi": [60, 89], "ignor": [60, 89, 114, 130, 138, 184, 202, 277, 278, 309, 344, 432, 433, 605, 642, 731, 732], "propag": [60, 89, 432, 433, 731, 732], "panicexcept": [60, 502, 578], "uint8": [60, 191, 275, 341, 342, 504, 638, 639, 809], "666667": [60, 105, 179, 381], "id_var": [62, 158], "value_var": [62, 158], "variable_nam": [62, 158], "value_nam": [62, 158], "unpivot": [62, 158], "wide": [62, 103, 158], "leav": [62, 158], "identifi": [62, 158], "massag": [62, 158], "while": [62, 100, 158, 259, 277, 278], "measur": [62, 158], "just": [62, 158, 267], "non": [62, 158, 200, 436, 447, 448, 449, 450, 451, 452, 454, 455, 456, 476, 481, 524, 527, 735, 746, 747, 748, 749, 750, 751, 753, 754, 755, 780, 785, 820], "give": [62, 158, 260, 264, 269, 270, 271, 352, 412, 444, 569, 578, 651, 718, 837], "chunkedarrai": [64, 218], "One": [65, 69, 182], "what": [65, 820, 828], "omit": [65, 276, 277, 278], "struct": [65, 99, 102, 178, 326, 493, 494, 515, 530, 531, 532, 569, 578, 622, 797, 798, 837], "pack": 65, "expr_unique_subset": 65, "per": [65, 66, 112, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 276, 277, 310, 312, 606, 608], "df_nuniqu": 65, "context": [65, 182, 191, 288, 293, 310, 390, 425, 470, 471, 515, 520, 528, 538, 555, 568, 606], "equival": [65, 486, 790, 802, 803], "df_agg_nuniqu": 65, "simpl": 65, "as_dict": 67, "split": [67, 227, 392, 493, 494, 569, 797, 798, 837], "partit": [67, 264, 266, 268], "keep": [67, 101, 104, 177, 200, 257, 258, 267, 411, 524], "predict": [67, 69, 72, 104], "requir": [67, 97, 101, 109, 116, 177, 181, 222, 273, 274, 381, 382, 383, 463, 497, 512, 686, 687, 688, 766, 801, 820, 824], "distinct": [67, 278, 327, 441, 533, 534, 535, 623, 740], "k": [67, 330, 412, 511, 626, 718, 823], "l": [67, 392], "m": [67, 119, 120, 205, 348, 352, 372, 377, 497, 535, 647, 651, 674, 675, 680, 801, 815], "func": [68, 160, 587], "self": [68, 130, 138, 160, 161, 170, 202, 435, 586, 760, 761, 829], "keyword": [68, 77, 160, 264], "def": [68, 100, 160, 276, 277, 278], "cast_str_to_int": [68, 160], "col_nam": [68, 160], "aggregate_fn": 69, "pivotagg": 69, "sort_column": 69, "spreadsheet": [69, 259], "well": 69, "predefin": 69, "transpos": [69, 239], "discoveri": 69, "interpol": [71, 162, 240, 389, 424, 440, 452, 552, 569, 739, 751, 837], "interpolationmethod": [71, 162, 240, 440, 452, 552, 739, 751], "higher": [71, 116, 162, 240, 440, 452, 552, 739, 751], "midpoint": [71, 162, 240, 440, 452, 552, 739, 751], "contigu": [72, 203, 218, 222, 257, 258, 260, 267, 269, 270, 271], "subsequ": 72, "old": [73, 164], "new_col": 74, "val": [76, 330, 510, 626], "by_pred": 77, "accord": [77, 654], "param": [77, 277, 278], "mutual": 77, "exclus": 77, "addition": 77, "ensur": [77, 154, 277, 278, 280, 515, 820, 826], "clariti": 77, "suppli": 77, "error": [77, 206, 252, 257, 258, 267, 314, 329, 411, 477, 482, 497, 610, 624, 781, 786, 801], "anyth": 77, "toomanyrowsreturn": [77, 578], "norowsreturn": [77, 578], "inherit": 77, "rowsexcept": [77, 578], "columnar": [78, 221, 223], "frac": [79, 381, 382, 383, 458, 468, 511, 686, 687, 688, 757, 772, 823], "with_replac": [79, 458, 757], "shuffl": [79, 229, 252, 458, 569, 757, 837], "item": [79, 203, 308, 312, 314, 386, 392, 458, 494, 604, 608, 610, 690, 757, 798], "fraction": [79, 112, 273, 274, 369, 436, 458, 497, 672, 735, 757], "onc": [79, 127, 257, 258, 259, 458, 757], "gener": [79, 100, 266, 275, 276, 277, 278, 326, 458, 464, 622, 757, 768], "whenthen": [81, 167], "whenthenthen": [81, 167], "otherwis": [81, 167, 332, 333, 334, 381, 382, 383, 443, 562, 587, 630, 631, 632, 686, 687, 688, 742, 760, 761], "shift_and_fil": [83, 569, 837], "shift": [84, 169, 309, 344, 436, 462, 526, 569, 605, 642, 735, 765, 837], "shrink": [85, 463, 766, 767], "usag": [85, 257, 258, 267, 277, 278, 767], "fit": [85, 103, 463, 766, 767], "exact": [85, 276, 277, 278, 497, 801], "hold": [85, 525], "support": [86, 109, 116, 171, 181, 203, 218, 259, 266, 275, 278, 322, 469, 491, 618, 773, 795], "nulls_last": [87, 172, 302, 304, 470, 596, 599], "accept": [87, 256, 257, 258, 260, 264], "descend": [87, 172, 200, 302, 304, 460, 596, 599, 762], "ddof": [88, 105, 173, 179, 473, 516, 551, 556, 557, 561, 776, 827], "standard": [88, 173, 272, 355, 382, 454, 468, 473, 482, 557, 654, 687, 772, 776, 786], "deviat": [88, 173, 382, 454, 473, 557, 687, 776], "degre": [88, 105, 473, 516, 551, 556, 776, 827], "freedom": [88, 105, 473, 516, 551, 556, 776, 827], "816497": 88, "21": 89, "16a": 89, "27b": 89, "38c": 89, "nth": [91, 176, 494, 507, 798, 812], "arrow": [92, 113, 206, 218, 239, 260, 269, 816, 820], "mostli": [92, 390], "categoricaltyp": 92, "pyarrow": [92, 96, 97, 116, 218, 222, 257, 260, 264, 268, 272, 579, 816, 819, 820], "large_str": 92, "as_seri": 93, "fruit": [93, 438, 446, 479, 495, 503, 783, 799], "car": [93, 438, 446, 503], "beetl": [93, 438, 446, 503], "audi": [93, 438, 446, 503], "28": [93, 377, 680], "300": [93, 747, 748, 750], "slow": [94, 220, 223, 257, 258, 267, 343, 640], "hot": 95, "dummi": [95, 224, 817], "foo_1": 95, "foo_2": 95, "bar_3": 95, "bar_4": 95, "ham_a": 95, "ham_b": 95, "u8": [95, 191, 817], "re": [96, 543], "attempt": [96, 820], "ll": [96, 820], "instal": [96, 97, 170, 222, 257, 258, 260, 264, 266, 272, 820], "numpy_arrai": 96, "date_as_object": 97, "sent": [97, 820], "datetime64": 97, "pandas_df": 97, "core": [97, 222], "three": [99, 459, 558], "four": [99, 558], "five": 99, "num": [99, 399, 402, 500], "include_head": 100, "header_nam": 100, "column_nam": 100, "iter": [100, 343, 640], "diagon": [100, 203], "Will": [100, 130, 138, 161, 170, 202, 546, 549], "veri": [100, 129, 633], "perhap": 100, "column_2": 100, "auto": [100, 264, 271], "name_gener": [100, 326, 622], "base_nam": 100, "my_column_": 100, "my_column_0": 100, "my_column_1": 100, "my_column_2": 100, "uniquekeepstrategi": [101, 177], "origin": [101, 177, 200, 257, 258, 411, 443, 476, 480, 481, 482, 484, 489, 500, 780, 784, 785, 786, 788, 793, 804], "conjunct": 101, "fail": [101, 177, 497, 587, 801], "decompos": [102, 178], "field": [102, 112, 178, 192, 326, 493, 494, 502, 530, 531, 569, 622, 797, 798, 807, 837], "t_a": [102, 178], "t_b": [102, 178], "t_c": [102, 178], "t_d": [102, 178], "womp": [102, 178], "t_": [102, 178], "t_struct": [102, 178], "step": [103, 521], "unstackdirect": 103, "without": [103, 204, 261, 265, 268, 343, 368, 448, 449, 450, 451, 452, 454, 455, 456, 555, 640, 645, 671], "much": [103, 343, 640], "pivot": [103, 578], "skip": [103, 257, 258, 259, 267, 587], "phase": 103, "direct": [103, 264, 266, 271], "don": [103, 203, 310, 343, 520, 606, 640, 759, 828], "experiment": [103, 109, 181, 204, 268, 343, 368, 448, 449, 450, 451, 452, 454, 455, 456, 640, 671], "subject": 103, "being": [103, 204, 257, 258, 267, 268, 343, 368, 448, 449, 450, 451, 452, 454, 455, 456, 562, 640, 671], "break": [103, 204, 268, 343, 368, 448, 449, 450, 451, 452, 454, 455, 456, 640, 671], "ascii_uppercas": 103, "g": [103, 257, 258, 259, 260, 264, 269, 271, 384, 460, 463, 537, 759, 762, 820], "h": [103, 392, 463], "col1_0": 103, "col1_1": 103, "col1_2": 103, "col2_0": 103, "col2_1": 103, "col2_2": 103, "time_column": 104, "regular": [104, 225, 384, 525, 537], "frequenc": 104, "ha": [104, 128, 200, 252, 283, 293, 343, 411, 426, 511, 520, 629, 640, 697, 708, 823], "forward_fil": [104, 569], "06": [104, 367, 379, 671, 679], "varianc": [105, 179, 383, 412, 456, 516, 561, 688, 718, 755, 827], "grow": 106, "b_squar": [108, 180], "36": [108, 180], "named_expr": [109, 181], "overwrit": [109, 138, 180, 181, 220, 257, 258, 267], "provid": [109, 181, 252, 257, 258, 266, 267, 277, 278, 477, 478, 480, 482, 781, 782, 784, 786, 844], "is_not": [109, 181, 569], "opt": [109, 181], "via": [109, 181, 257, 258, 259, 267, 269, 271], "with_columns_kwarg": [109, 181], "row_nr": [110, 183, 761], "binaryio": [111, 113, 256, 257, 259, 260, 261, 264, 265], "bytesio": [111, 112, 113, 116, 256, 257, 258, 259, 260, 264], "path": [111, 112, 113, 114, 115, 116, 163, 184, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 460, 482, 762, 786], "compress": [111, 113, 116], "avrocompress": 111, "uncompress": [111, 113, 116, 260, 269], "write": [111, 112, 113, 114, 116, 170, 184, 332, 333, 334, 630, 631, 632], "apach": [111, 116, 256], "avro": [111, 256, 578], "written": [111, 112, 113, 114, 115, 116, 184], "snappi": [111, 116], "deflat": 111, "has_head": [112, 257, 258, 259, 267], "sep": [112, 226, 257, 258, 267, 527], "quot": [112, 257, 258, 267], "batch_siz": [112, 257, 258, 270], "1024": [112, 116, 257, 258, 270], "datetime_format": 112, "date_format": 112, "time_format": 112, "float_precis": 112, "null_valu": [112, 257, 258, 267], "textio": [112, 257], "_io": [112, 256, 259, 260], "pathlib": [112, 114, 115, 163, 184, 256, 259, 260, 261, 262, 263, 265, 267, 269, 270], "comma": 112, "csv": [112, 251, 257, 258, 259, 267, 578], "symbol": 112, "process": 112, "thread": [112, 226, 257, 258, 266, 279, 310, 606], "chrono": [112, 371, 497, 674, 801], "crate": 112, "precis": [112, 348, 497, 647], "timeunit": [112, 119, 120, 205, 348, 372, 377, 647, 675, 680, 815], "decim": [112, 457, 756], "dirpath": [112, 267], "new_fil": 112, "ipccompress": 113, "ipc": [113, 260, 261, 268, 269, 578], "binari": 113, "stream": [113, 130, 138, 161, 170, 202], "feather": [113, 260, 269, 578], "lz4": [113, 116], "zstd": [113, 116], "pretti": 114, "row_ori": 114, "json_lin": [114, 262], "to_str": [114, 184], "io": [114, 115, 163, 184, 262, 263, 844], "iobas": [114, 115, 163, 184, 262, 263], "serial": [114, 115], "represent": [114, 115, 132, 133, 330, 350, 353, 355, 356, 358, 360, 362, 363, 366, 367, 369, 375, 376, 379, 510, 580, 626, 649, 652, 654, 658, 660, 663, 665, 666, 669, 670, 672, 678, 679, 682, 822], "common": 114, "deprec": [114, 130, 138, 184, 202, 262, 283], "toggl": [114, 262, 280], "ndjson": [114, 262], "write_ndjson": 114, "newlin": [115, 263, 270], "delimit": [115, 257, 258, 263, 267, 270, 474, 778], "parquetcompress": 116, "compression_level": 116, "row_group_s": 116, "use_pyarrow": [116, 257, 260, 264, 819], "pyarrow_opt": [116, 264], "parquet": [116, 264, 265, 271, 578], "gzip": 116, "lzo": 116, "brotli": 116, "choos": 116, "good": 116, "fast": [116, 460, 762], "decompress": 116, "guarante": [116, 138, 257, 258], "deal": [116, 441, 497, 740, 801], "older": 116, "reader": [116, 226, 258, 260, 264, 579], "disk": [116, 170], "22": [116, 368, 373, 377, 497, 525, 671, 676, 680, 801], "reduc": [116, 234, 235, 237, 241, 257, 258, 264, 267, 269, 270, 271, 463, 539, 569, 724, 738, 766, 809], "pressur": [116, 264, 270, 271, 463, 766], "improv": [116, 260, 269], "speed": 116, "64": [116, 122, 125, 196, 437, 735], "At": 116, "moment": [116, 412, 468, 718, 772], "featur": [116, 191], "write_t": 116, "tu": [119, 120, 348, 352, 372, 377, 647, 648, 651, 675, 680], "tz": [119, 349, 374, 378, 648, 677, 681], "time_unit": [119, 120, 205, 377, 680, 837], "u": [119, 120, 205, 348, 352, 372, 377, 497, 554, 647, 651, 675, 680, 815], "time_zon": [119, 205], "timezon": [119, 205], "zoneinfo": 119, "available_timezon": 119, "full": [119, 257, 258, 267], "delta": [120, 551, 556, 776, 827], "bit": [121, 122, 123, 124, 125, 126, 194, 195, 196, 197, 443, 475, 742, 779], "sign": [123, 124, 125, 126, 365, 443, 500, 569, 668, 742, 804, 837], "ldf": [127, 129, 134, 135, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 251, 252, 253, 254], "hit": 127, "node": [127, 148, 154, 161], "type_coercion": [130, 132, 138, 161, 170, 202], "predicate_pushdown": [130, 132, 138, 154, 161, 170, 202], "projection_pushdown": [130, 132, 138, 154, 161, 170, 202], "simplify_express": [130, 132, 138, 161, 170, 202], "string_cach": [130, 138, 202], "no_optim": [130, 138, 154, 161, 202], "slice_pushdown": [130, 132, 138, 154, 161, 170, 202], "common_subplan_elimin": [130, 132, 138, 161, 170, 202], "allow_stream": [130, 132, 138, 161, 170, 202], "huge": 130, "saver": 130, "coercion": [130, 138, 161, 170, 202, 444], "pushdown": [130, 138, 154, 161, 170, 183, 202, 760, 761], "project": [130, 138, 154, 161, 170, 202, 267, 269, 270, 271, 293, 470, 471], "simplifi": [130, 138, 161, 170, 202], "pleas": [130, 138], "cach": [130, 138, 161, 170, 191, 202, 260, 267, 269, 271, 280, 448, 449, 450, 451, 452, 454, 455, 456], "global": [130, 138, 191, 277, 280], "turn": [130, 138, 154, 161, 202, 257, 258, 267, 280, 392, 515], "off": [130, 138, 154, 161, 202, 257, 258, 267, 280, 515], "try": [130, 138, 161, 170, 202, 215, 216, 257, 258, 259, 260, 264, 267, 269, 271], "branch": [130, 138, 161, 170, 202], "subplan": [130, 138, 161, 170, 202], "occur": [130, 138, 161, 170, 202, 430, 441, 727, 740], "part": [130, 138, 161, 170, 182, 202, 218, 493, 494, 649, 652, 658, 660, 663, 665, 666, 672, 682, 797, 798], "alpha": [130, 138, 161, 170, 202, 381, 382, 383, 686, 687, 688], "lf": [136, 141, 166, 190], "n_row": [138, 256, 257, 258, 260, 264, 267, 269, 270, 271], "500": [138, 658, 660, 666, 672, 747, 748, 750], "purpos": 138, "scan": [138, 147, 153, 220, 223, 257, 258, 264, 267, 268, 269, 270, 271], "help": 138, "final": [138, 200, 271], "avail": [138, 226, 276, 283, 441, 563, 565, 568, 570, 573, 574, 575, 579, 580, 740, 830, 833, 840, 841, 842], "influenc": [138, 154], "read_json": [143, 184], "lazygroupbi": [144, 145, 146], "NOT": [144, 502], "typeerror": 144, "subscript": 144, "groupby_rol": [145, 448, 449, 450, 451, 452, 454, 455, 456], "load": [147, 153, 266, 578], "wherea": [147, 153, 432, 433, 731, 732], "fmt": [148, 371, 397, 497, 540, 674, 801], "cumsum": [148, 397, 569, 837], "validate_output_schema": 154, "past": 154, "assum": [154, 252, 293], "paramount": 154, "correct": [154, 259, 382, 383, 412, 453, 468, 687, 688, 718, 752, 772], "expect": [154, 211, 214, 217, 293, 520], "hard": 154, "bug": [154, 252], "caller": [154, 252], "invari": 154, "upheld": 154, "prune": 154, "show_plot": 161, "truncate_nod": 161, "figsiz": [161, 170], "gantt": 161, "chart": 161, "matplotlib": [161, 170], "plot": [161, 170], "from_json": 163, "write_json": 163, "output_path": 170, "raw_output": 170, "figur": 170, "dot": [170, 200, 569, 837], "290994": 173, "118034": 173, "433013": 173, "1875": 179, "extern": 182, "access": 182, "wrap": 187, "arbitrari": [187, 277], "pars": [188, 257, 258, 259, 267, 269, 270, 497, 801], "under": [190, 563, 565, 570, 573, 574, 575, 830, 833, 840, 841, 842], "manag": 191, "categori": [191, 204, 280, 330, 569, 578, 626, 837], "invalid": [191, 257, 258, 267, 477, 482, 781, 786], "outermost": 191, "exit": 191, "color": [191, 229, 252], "red": [191, 229, 252], "green": [191, 229, 252], "blue": 191, "yellow": 191, "succe": [191, 257, 258, 267], "df_join": 191, "cat": [191, 204, 475, 498, 499, 510, 527, 565, 569, 779, 833, 837], "composit": 192, "unsign": [194, 195, 196, 197, 443, 742], "static": [198, 252], "utf": 199, "uiqu": 200, "inject": 200, "unless": [200, 219, 828], "post": 200, "constrain": 200, "newli": 200, "associ": 200, "_": [200, 493, 797], "af1": 200, "af2": 200, "af3": 200, "easili": 200, "product": [200, 341, 345, 569, 638, 643, 837], "167": 200, "47": 200, "eagerli": [201, 554], "oppos": 201, "lazili": [201, 257, 258, 267, 269, 270, 271], "to_seri": [201, 326, 622], "lazy_fram": 202, "threadpool": 202, "concatmethod": 203, "relev": 203, "bin": 204, "break_point_label": 204, "break_point": 204, "category_label": 204, "discret": [204, 309, 344, 380, 605, 642, 684], "len": [204, 276, 277, 338, 445, 484, 489, 500, 569, 744, 788, 793, 804, 837], "breakpoint": 204, "inf": [204, 277, 278, 299, 401, 404, 593, 706, 710, 735], "timedelta": [205, 350, 352, 353, 360, 362, 365, 366, 367, 368, 369, 372, 373, 375, 376, 379, 524, 655, 657, 662, 668, 671, 676, 723, 726, 731, 732], "granular": 205, "finer": 205, "permut": 205, "drang": 205, "1985": 205, "07": [205, 350, 366, 368, 373, 376, 497, 649, 679, 801], "librari": [206, 213, 420, 844], "encount": [206, 432, 433, 482, 530, 539, 556, 731, 732, 786], "least": [211, 277, 436, 515, 735, 826], "panic": 213, "mismatch": 215, "incompat": 216, "lib": [218, 816], "most": [218, 426, 430, 436, 494, 515, 727, 735, 798, 826], "closest": 218, "infer_schema_length": [220, 223, 257, 258, 259, 267, 270], "partial": 220, "i32": [220, 277, 329, 379, 463, 562, 654, 682], "let": 220, "about": [220, 468, 772], "3rd": 220, "unknown": [220, 544], "nan_to_non": 222, "datetimeindex": 222, "pd_df": 222, "pd_seri": 222, "polars_u64_idx": 225, "ideal": [226, 239], "read_csv_batch": [226, 579], "tpch": [226, 258], "tables_scale_100": [226, 258], "lineitem": [226, 258, 266], "tbl": [226, 258], "parse_d": [226, 257, 258, 267], "complet": [227, 820], "idiomat": 227, "_sum": 227, "tail": [227, 292, 468, 569, 772, 837], "_tail_sum": 227, "bar_sum": 227, "bar_tail_sum": 227, "sub": [229, 479, 495, 783, 799], "id": [229, 252, 487, 488, 513, 515, 825], "squar": [229, 252, 412, 472, 718, 775], "triangl": [229, 252], "sampl": [229, 252, 257, 258, 468, 569, 772, 837], "group_df": [229, 252], "nr": [232, 242, 253, 254], "maxim": [234, 246, 300, 594], "833333": 235, "minim": [237, 249, 301, 306, 463, 595, 602, 726, 766], "pivot_column": 239, "values_column": 239, "pivotop": 239, "rel": [239, 273, 274, 365, 381, 382, 383, 668, 686, 687, 688], "larg": [239, 470, 471], "27": [241, 367, 379, 437], "describ": [251, 277, 837], "scan_csv": [251, 257, 258], "n_uniqu": [251, 569, 837], "unique_nam": 251, "known": [252, 277], "incorrect": [252, 377, 460, 680, 762], "probabl": [255, 281, 380, 684], "lit": [255, 281, 411, 530, 532, 539, 559, 562, 569, 693], "stop": [256, 257, 258, 260, 264, 267, 269, 270, 271, 350, 352, 353, 360, 362, 366, 367, 368, 369, 372, 373, 375, 376, 379, 647, 648, 649, 651, 652, 658, 660, 663, 665, 666, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682], "new_column": [257, 258, 259], "comment_char": [257, 258, 267], "quote_char": [257, 258, 267], "skip_row": [257, 258, 267], "ignore_error": [257, 258, 267], "n_thread": [257, 258], "8192": 257, "csvencod": [257, 258, 267], "low_memori": [257, 258, 264, 267, 270, 271], "storage_opt": [257, 260, 264, 269, 271], "skip_rows_after_head": [257, 258, 267], "row_count_nam": [257, 258, 260, 264, 267, 269, 270, 271], "row_count_offset": [257, 258, 260, 264, 267, 269, 270, 271], "sample_s": [257, 258], "eol_char": [257, 258, 267], "handler": [257, 258, 259], "builtin": [257, 258, 259], "open": [257, 258, 259, 260, 264, 269, 271], "stringio": [257, 258], "fsspec": [257, 258, 260, 264, 269, 271, 272], "remot": [257, 258, 260, 264], "dataset": [257, 258, 267, 268, 412, 578, 718], "autogener": [257, 258, 267], "column_x": [257, 258, 267], "enumer": [257, 258, 267], "renam": [257, 258, 289, 421, 428, 502, 807, 818, 837], "shorter": [257, 258], "comment": [257, 258, 267], "special": [257, 258, 267, 587], "handl": [257, 258, 267, 309, 344, 477, 500, 605, 642, 781, 804], "escap": [257, 258, 267], "might": [257, 258, 267, 425, 513], "issu": [257, 258, 259, 267, 341, 342, 504, 638, 639, 809], "cpu": [257, 258], "system": [257, 258], "multi": [257, 258], "lossi": [257, 258, 267], "decod": [257, 258, 569, 837], "im": [257, 258], "parser": 257, "even": 257, "regard": [257, 556], "storag": [257, 260, 264, 269, 271], "connect": [257, 260, 264, 266, 268, 269, 271, 579], "host": [257, 260, 264, 269, 271], "port": [257, 260, 264, 266, 269, 271], "usernam": [257, 260, 264, 266, 269, 271], "password": [257, 260, 264, 266, 269, 271], "row_count": [257, 258, 260, 264, 267, 269, 270, 271], "glob": [257, 258, 267, 269, 271], "pattern": [257, 258, 267, 269, 271, 475, 476, 480, 481, 487, 488, 760, 761, 779, 780, 784, 785, 791, 792], "50000": 258, "batchedcsvread": [258, 578], "batch": [258, 270], "upon": 258, "creation": 258, "gather": 258, "next_batch": 258, "sheet_id": 259, "sheet_nam": 259, "xlsx2csv_option": 259, "read_csv_opt": 259, "excel": [259, 578], "xlsx": 259, "sheet": 259, "xlsx2csv": [259, 272], "read_csv": [259, 267], "skip_empty_lin": 259, "my": [259, 268], "datasheet": 259, "excel_fil": 259, "As": [259, 554], "look": 259, "document": [259, 266, 482, 497, 786, 801], "fix": [259, 276, 277, 377, 448, 449, 450, 451, 452, 454, 455, 456, 680], "whole": [259, 470, 471, 480, 784], "twice": 259, "actual": [259, 277, 278, 767], "With": 259, "xl": 259, "xlsm": 259, "xlsb": 259, "odf": 259, "od": 259, "odt": 259, "from_panda": [259, 266], "memory_map": [260, 264, 269], "v2": [260, 269], "greatli": [260, 269], "repeat": [260, 269, 442, 444, 569], "o": [260, 269, 343, 392, 511, 640, 823], "page": [260, 269, 569, 578, 837], "read_ndjson": 262, "parallelstrategi": [264, 271], "directori": 264, "awar": [264, 374, 677], "stabl": 264, "increas": [264, 343, 640], "row_group": [264, 271], "read_tabl": 264, "connection_uri": 266, "partition_on": 266, "partition_rang": 266, "partition_num": 266, "protocol": 266, "postgr": [266, 435], "mysql": 266, "sqlite": 266, "redshift": 266, "through": 266, "clickhous": 266, "databas": 266, "altern": 266, "solut": 266, "raw": 266, "connectorx": [266, 272], "uri": 266, "postgresql": 266, "server": 266, "backend": 266, "transfer": 266, "detail": [266, 273, 274, 844], "here": [266, 276, 277, 278, 482, 786], "partition_col": 266, "explicitli": [266, 276, 277], "polarsdatatyp": 267, "with_column_nam": 267, "push": [267, 269, 270, 271], "down": [267, 269, 270, 271, 393, 696], "therebi": [267, 269, 270, 271], "potenti": [267, 269, 270, 271], "overhead": [267, 269, 270, 271], "updat": 267, "my_long_fil": 267, "doesn": [267, 380, 684, 828], "thing": [267, 518, 538], "breezah": 267, "terribl": 267, "mydf": 267, "write_csv": 267, "cloud": 268, "dset": 268, "s3": 268, "folder": 268, "1970": 268, "version": [272, 283, 553], "depend": [272, 293, 305, 306, 425, 441, 520, 538, 601, 602, 740], "stdout": 272, "info": 272, "platform": 272, "linux": 272, "microsoft": 272, "wsl2": 272, "x86_64": 272, "glibc2": 272, "31": [272, 350, 351, 362, 375, 497, 533, 534, 648, 649, 650, 801], "main": 272, "jul": [272, 497, 801], "56": [272, 508], "gcc": 272, "20210110": 272, "check_dtyp": [273, 274], "check_exact": [273, 274], "check_column_nam": 273, "rtol": [273, 274], "1e": [273, 274], "atol": [273, 274], "nans_compare_equ": [273, 274], "assertionerror": [273, 274], "exactli": [273, 274, 277, 278, 493, 494, 767, 797, 798], "inexact": [273, 274], "absolut": [273, 274, 287, 582], "check_nam": 274, "searchstrategi": [275, 277, 278], "null_prob": [275, 277, 278], "percentag": [275, 277, 278, 436, 735], "chanc": [275, 277, 278], "hypothesi": [275, 276, 277, 278, 844], "sampled_from": 275, "unique_small_int": 275, "ccy": 275, "gbp": 275, "jpy": 275, "min_col": [276, 277], "max_col": [276, 277], "_parametr": 276, "suitabl": 276, "standalon": [276, 277], "itself": 276, "explicit": [276, 521, 553], "mincol": 276, "control": 276, "especi": 276, "punctuat": 276, "test_special_char_colname_init": 276, "test_unique_xyz": 276, "assert_someth": 276, "min_siz": [277, 278], "max_siz": [277, 278], "include_col": 277, "allow_infin": [277, 278], "allowed_dtyp": [277, 278], "excluded_dtyp": [277, 278], "desir": 277, "n_chunk": [277, 278, 837], "randomis": 277, "onto": 277, "exist": 277, "independ": [277, 278], "basi": 277, "pct": 277, "preced": 277, "disallow": [277, 278], "exclud": [277, 278, 399, 525, 556, 569], "deploi": [277, 278], "decor": [277, 278], "characterist": [277, 278], "develop": [277, 278], "directli": [277, 278, 381, 382, 383, 686, 687, 688], "concret": [277, 278], "test_repr": [277, 278], "repr": [277, 278], "df_strategi": 277, "15836": 277, "1755e": 277, "38": 277, "575050513": 277, "constructor": [278, 578], "op": [278, 444], "max_data_s": 278, "54666": 278, "35": 278, "6414": 278, "63290": 278, "pool": 279, "namespac": [283, 568, 578, 580], "sinc": [283, 352, 651], "favor": 283, "futur": 283, "94": 288, "confus": [290, 405, 407], "tt": 290, "tf": [290, 291], "ff": [290, 291], "upcast": 292, "a_times_2": 293, "invers": [294, 295, 296, 297, 298, 299, 588, 589, 590, 591, 592, 593], "cosin": [294, 295, 335, 336, 420, 588, 589, 634, 635], "570796": [294, 296, 588, 590], "hyperbol": [295, 297, 299, 336, 467, 509, 589, 591, 593, 635, 771, 814], "sine": [296, 297, 420, 466, 467, 590, 591, 770, 771], "881374": [297, 591], "tangent": [298, 299, 508, 509, 592, 593, 813, 814], "785398": [298, 592], "would": [302, 304, 312, 425, 441, 522, 596, 599, 608, 740, 820], "arg_sort": [304, 569, 599, 837], "sublist": [305, 306, 308, 309, 311, 312, 313, 314, 315, 322, 325, 601, 602, 604, 605, 607, 608, 609, 610, 611, 618, 621, 709], "compil": [305, 306, 601, 602], "membership": [308, 604], "null_behavior": [309, 344, 605, 642], "nullbehavior": [309, 344, 605, 642], "th": [309, 344, 468, 605, 642, 772], "against": [310, 606, 843], "blindli": [310, 606], "worth": [310, 606], "enough": [310, 468, 606, 772], "concat_list": [310, 536, 569, 606], "rank": [310, 536, 556, 569, 606, 837], "taken": [322, 491, 506, 618, 795], "n_field_strategi": [326, 622], "tostructstrategi": [326, 622], "first_non_nul": [326, 622], "max_width": [326, 622], "field_0": [326, 622], "field_1": [326, 622], "field_n": [326, 622], "col_name_": [326, 622], "col_name_0": [326, 622], "col_name_1": [326, 622], "col_name_2": [326, 622], "next": [328, 441, 740], "strict": [329, 477, 497, 624, 759, 781, 801], "throw": [329, 482, 624, 786], "due": [329, 624], "overflow": [329, 341, 342, 504, 624, 638, 639, 809], "categoricalord": [330, 626], "lexic": [330, 626], "round": [331, 393, 508, 569, 627, 696, 837], "min_val": [332, 334, 630, 632], "max_val": [332, 333, 630, 631], "foo_clip": [332, 333, 334], "clip": [333, 334, 569, 631, 632, 837], "543081": [336, 635], "cumul": [338, 339, 340, 341, 342, 530, 531, 532, 636, 637, 638, 639], "a_revers": [338, 339, 340, 341, 342, 421, 446, 503], "int16": [341, 342, 504, 638, 639, 809], "uint16": [341, 342, 504, 638, 639, 809], "prevent": [341, 342, 411, 504, 638, 639, 809], "min_period": [343, 381, 382, 383, 447, 448, 449, 450, 451, 452, 454, 455, 456, 640, 686, 687, 688, 746, 747, 748, 749, 750, 751, 753, 754, 755], "slide": [343, 640], "anoth": [343, 348, 374, 471, 587, 640, 647, 677, 759], "realli": [343, 640], "complex": [343, 511, 640, 823], "visit": [343, 640], "44": 345, "drop_nul": [346, 569, 837], "drop_nan": [347, 569, 837], "lose": [348, 647], "2001": [348, 350, 352, 353, 360, 362, 365, 366, 367, 368, 369, 372, 373, 375, 376, 377, 379, 497, 647, 649, 651, 652, 655, 656, 657, 658, 660, 662, 663, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 682, 801], "tu_m": [348, 647], "tu_n": [348, 647], "zone": [349, 374, 378, 648, 677, 681], "with_time_zon": [349, 569, 648, 837], "timestamp": [349, 569, 648, 837], "extract": [350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 375, 376, 379, 481, 482, 569, 649, 650, 652, 653, 654, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 672, 673, 678, 679, 682, 785, 786, 837], "weekdai": [350, 366, 569, 837], "day_of_month": [350, 366, 376], "ordinal_dai": [350, 376, 569, 837], "day_of_year": [350, 366, 376], "diff": [351, 354, 357, 359, 361, 364, 370, 569, 650, 653, 659, 661, 664, 667, 673, 837], "days_diff": 351, "epochtimeunit": [352, 651], "unix": [352, 651], "epoch_n": [352, 651], "epoch_": [352, 651], "978307200000000": [352, 372, 651, 675], "978307200": [352, 651], "978393600000000": [352, 372, 651, 675], "978393600": [352, 651], "978480000000000": [352, 372, 651, 675], "978480000": [352, 651], "hours_diff": 354, "iso": [355, 375, 654, 678], "correspond": [355, 441, 654, 740], "microseconds_diff": 357, "1001": [357, 359, 364], "001": [357, 359, 364, 535, 659, 661, 667], "002": [357, 359, 364, 535, 659, 661, 667], "003": [357, 359, 364], "997": [357, 359, 364], "998": [357, 359, 364], "999": [357, 359, 364], "milliseconds_diff": 359, "59": [360, 369, 534, 663, 672], "minutes_diff": 361, "1440": [361, 664], "nanoseconds_diff": 364, "1000000": [364, 500, 667], "leap": [365, 668], "account": [365, 381, 382, 383, 668, 686, 687, 688], "minu": [365, 668], "dictat": [365, 668], "2000": [365, 668], "2005": [365, 668], "date_plus_1i": [365, 668], "1y2mo": [365, 668], "date_min": 365, "1998": [365, 668], "2002": [365, 367, 379, 668, 682], "1999": [365, 668], "2003": [365, 668], "2004": [365, 668], "2006": [365, 668], "ordin": [366, 441, 669, 740], "366": [366, 669], "180": [367, 379], "divid": [368, 373, 381, 382, 383, 412, 671, 676, 686, 687, 688, 718], "bucket": [368, 373, 671, 676], "half": [368, 381, 382, 383, 671, 686, 687, 688], "seconod": [368, 671], "eg": [368, 373, 497], "225": [368, 373], "to_fram": [368, 373, 497, 501, 502, 760, 761, 797, 798, 801, 837], "frame_equ": [368, 373], "10m": [368, 373, 671, 676], "milli": [369, 672], "micro": [369, 672], "compon": [369, 497, 533, 534, 535, 672], "456789": 369, "654321": 369, "111110": 369, "765431": 369, "sec": 369, "11111": 369, "seconds_diff": 370, "timestamp_n": [372, 675], "timestamp_m": 372, "978307200000": 372, "978393600000": 372, "978480000000": 372, "naiv": [374, 677], "53": [375, 678], "mondai": [376, 679], "sundai": [376, 679], "tu_u": [377, 680], "32971": [377, 680], "32974": [377, 680], "32976": [377, 680], "europ": [378, 648, 681], "london": [378, 648, 681], "gmt": [378, 648, 681], "bst": [378, 648, 681], "718281828459045": [380, 417, 684, 721], "formula": [380, 684], "pk": [380, 684], "459148": 380, "754888": 380, "com": [381, 382, 383, 480, 686, 687, 688, 784], "span": [381, 382, 383, 686, 687, 688], "half_lif": [381, 382, 383, 686, 687, 688], "adjust": [381, 382, 383, 468, 686, 687, 688, 772], "exponenti": [381, 382, 383, 385, 686, 687, 688, 689], "weight": [381, 382, 383, 447, 448, 449, 450, 451, 452, 454, 455, 456, 468, 686, 687, 688, 746, 747, 748, 749, 750, 751, 753, 754, 755, 772], "averag": [381, 441, 686, 740], "decai": [381, 382, 383, 686, 687, 688], "term": [381, 382, 383, 483, 486, 686, 687, 688, 787, 790], "mass": [381, 382, 383, 686, 687, 688], "gamma": [381, 382, 383, 686, 687, 688], "foral": [381, 382, 383, 686, 687, 688], "geq": [381, 382, 383, 686, 687, 688], "theta": [381, 382, 383, 686, 687, 688], "life": [381, 382, 383, 686, 687, 688], "exp": [381, 382, 383, 569, 686, 687, 688, 837], "ln": [381, 382, 383, 686, 687, 688], "smooth": [381, 382, 383, 686, 687, 688], "factor": [381, 382, 383, 510, 686, 687, 688, 822], "leq": [381, 382, 383, 686, 687, 688], "begin": [381, 382, 383, 480, 686, 687, 688, 784], "imbal": [381, 382, 383, 686, 687, 688], "ew": [381, 382, 383, 686, 687, 688], "w_i": [381, 382, 383, 686, 687, 688], "recurs": [381, 382, 383, 686, 687, 688], "y_0": [381, 382, 383, 686, 687, 688], "x_0": [381, 382, 383, 686, 687, 688], "y_t": [381, 382, 383, 686, 687, 688], "y_": [381, 382, 383, 686, 687, 688], "x_t": [381, 382, 383, 686, 687, 688], "observ": [381, 382, 383, 686, 687, 688], "428571": 381, "bia": [382, 383, 412, 453, 468, 687, 688, 718, 752, 772], "unbias": [382, 383, 687, 688], "963624": [382, 687], "928571": [383, 688], "wildcard": [384, 518, 525, 530, 531, 537, 539, 553], "regex": [384, 475, 476, 479, 480, 481, 487, 488, 495, 525, 537, 779, 780, 783, 784, 785, 791, 792, 799], "aa": [384, 537], "ba": [384, 537], "cc": [384, 537], "718282": 385, "389056": 385, "54": 385, "59815": 385, "expand": [386, 392, 444, 690], "extend": [387, 586, 691], "group_col": [390, 517], "g1": [390, 435, 517], "g2": [390, 435, 517], "lt": [390, 517], "gte": [390, 517], "explod": [392, 569, 837], "hello": [392, 518, 610], "world": [392, 610], "r": [392, 476, 480, 481, 487, 780, 784, 785, 791], "word": 392, "latest": [394, 426], "4629889412789719550": 395, "6959506404929392568": 395, "16386608652769605760": 395, "11638928888656214026": 395, "11040941213715918520": 395, "regrid": 398, "grid": 398, "df_original_grid": 398, "grid_point": 398, "df_new_grid": 398, "include_bound": 399, "primit": [399, 403, 820], "finit": [401, 556, 706], "optional_memb": [403, 709], "infinit": [404, 710], "_isnan": 405, "b_isnan": 405, "negat": 406, "_is_not_nan": 407, "b_is_not_nan": 407, "_not_nul": 408, "a_not_nul": 408, "b_not_nul": 408, "_isnul": 409, "a_isnul": 409, "b_isnul": 409, "root": [411, 421, 427, 438, 472, 503, 568, 775], "undo": [411, 428], "duplicateerror": [411, 578], "occurr": 411, "333333": [411, 456, 735, 755], "fisher": [412, 468, 718, 772], "pearson": [412, 468, 551, 718, 772], "fourth": [412, 718], "central": [412, 468, 718, 772], "definit": [412, 718], "subtract": [412, 718], "distribut": [412, 468, 718, 772], "elimin": [412, 718], "come": [412, 579, 580, 718], "bias": [412, 468, 718, 772], "scipi": [412, 468, 718, 772], "stat": [412, 468, 578, 718, 772], "153061": 412, "logarithm": [417, 418, 721, 722], "584963": 417, "30103": 418, "60206": 418, "lowest": 419, "9223372036854775808": 419, "agg_list": 420, "elementwis": [420, 447, 448, 449, 450, 451, 452, 454, 455, 456, 518, 519, 746, 747, 748, 749, 750, 751, 753, 754, 755], "third": 420, "parti": 420, "book": 420, "to_numpi": [420, 837], "argmax": 420, "_revers": [421, 446, 503], "b_revers": [421, 446, 503], "computeerror": [425, 578], "keep_nam": [428, 569], "poison": [432, 433, 731, 732], "nanmax": [432, 433, 731, 732], "subgroup": 435, "max_by_group": 435, "recent": [436, 735], "previou": [436, 735], "percent": [436, 735], "090909": 436, "expon": 437, "power": 437, "reverse_": 438, "reverse_a": 438, "reverse_fruit": 438, "reverse_b": 438, "reverse_car": 438, "rankmethod": [441, 740], "ti": [441, 740], "appropri": [441, 740], "competit": [441, 740], "highest": [441, 514, 556, 740], "immedi": [441, 558, 740], "64bit": [443, 742], "safe": [443, 742, 820], "coerc": 444, "dim": [445, 744], "flat": [445, 744], "fruits_revers": [446, 503], "cars_revers": [446, 503], "window_s": [447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "rolling_min": [447, 569, 746, 837], "rolling_max": [447, 569, 746, 837], "rolling_mean": [447, 569, 746, 837], "rolling_sum": [447, 569, 746, 837], "multipli": [447, 448, 449, 450, 451, 452, 454, 455, 456, 746, 747, 748, 749, 750, 751, 753, 754, 755], "358899": 447, "041452": 447, "567764": 447, "travers": [448, 449, 451, 454, 455, 456, 747, 748, 750, 753, 754, 755], "vector": [448, 449, 451, 454, 455, 456, 747, 748, 750, 753, 754, 755], "5h": [448, 449, 450, 451, 452, 454, 455, 456], "quantil": [452, 569, 751, 837], "33": [452, 457, 525, 751], "skew": [453, 569, 752, 837], "527525": [454, 753], "digit": [457, 500, 756, 780, 804], "17": [457, 634, 671], "maintain": [459, 512, 758, 824], "six": 459, "downstream": [460, 762], "code": [460, 762], "care": [460, 762], "extrema": [463, 766], "112": 463, "129": 463, "i8": [463, 745], "i16": 463, "8589934592": 463, "1073741824": 463, "content": [464, 515, 768], "modul": [464, 568], "175201": [467, 771], "unimod": [468, 772], "continu": [468, 772], "skewtest": [468, 772], "speak": [468, 772], "coeffici": [468, 772], "g_1": [468, 772], "m_3": [468, 772], "m_2": [468, 772], "m_i": [468, 772], "sum_": [468, 772], "texttt": [468, 772], "k_3": [468, 772], "k_2": [468, 772], "sqrt": [468, 569, 772, 837], "343622": 468, "larger": [470, 556], "414214": [472, 775], "substr": [475, 479, 487, 488, 492, 493, 494, 495, 779, 783, 791, 792, 796, 797, 798, 799], "treat": [475, 487, 488, 779, 791, 792], "starts_with": [475, 479, 569, 783, 837], "ends_with": [475, 495, 569, 799, 837], "crab": [475, 779], "dog": [475, 498, 499, 527, 779], "rab": [475, 779], "success": [476, 481, 780, 785], "overlap": [476, 481, 780, 785], "captur": [476, 480, 481, 780, 784, 785], "123": [476, 481, 488, 780, 785, 792, 818], "bla": [476, 481, 780, 785], "asd": [476, 481, 780, 785], "678": [476, 481, 780, 785], "910t": [476, 481, 780, 785], "count_digit": 476, "transferencod": [477, 478, 781, 782], "hex": [477, 478, 781, 782], "base64": [477, 478, 781, 782], "thrown": [477, 781], "unabl": [477, 781], "unhandl": [477, 781], "666f6f": [477, 478, 781, 782], "626172": [477, 478, 781, 782], "mango": [479, 495, 783, 799], "go": [479, 783], "has_suffix": 479, "group_index": [480, 784], "target": [480, 497, 784, 801], "vote": [480, 784], "ballon_dor": [480, 784], "candid": [480, 784], "messi": [480, 784], "ref": [480, 784], "candidat": [480, 784], "jorginho": [480, 784], "ronaldo": [480, 784], "w": [480, 784], "extracted_nr": 481, "910": [481, 785], "json_path": [482, 786], "jsonpath": [482, 786], "regardless": [482, 786], "json_val": [482, 786], "n_char": [483, 569, 787, 837], "caf\u00e9": [483, 486, 787, 790], "345": [483, 486, 787, 790], "\u6771\u4eac": [483, 486, 787, 790], "nchar": [483, 486], "fillchar": [484, 489, 788, 793], "justifi": [484, 489, 788, 793], "pad": [484, 489, 500, 788, 793, 804], "cow": [484, 489, 788, 793], "monkei": [484, 489, 788, 793], "hippopotamu": [484, 489, 788, 793], "whitespac": [485, 490, 496, 789, 794, 800], "trail": [485, 490, 496, 794, 800], "know": [486, 790, 820, 828], "text": [486, 487, 488, 790], "replace_al": [487, 569, 791, 837], "123abc": [487, 791], "abc456": [487, 791], "abcabc": [488, 792], "123a123": [488, 792], "bc": [488, 792], "trim": [490, 496, 789, 794, 800], "subslic": [491, 795], "pear": [491, 795], "papaya": [491, 795], "dragonfruit": [491, 795], "s_slice": 491, "ear": [491, 795], "aya": [491, 795], "uit": [491, 795], "ya": [491, 795], "onf": [491, 795], "inclus": [492, 493, 796, 797], "a_1": [493, 797, 817], "d_4": [493, 797], "rename_field": [493, 494, 569, 797, 798, 837], "first_part": [493, 494, 797, 798], "second_part": [493, 494, 797, 798], "unnest": [493, 494, 797, 798], "remaind": [494, 798], "prefix": [495, 500, 569, 799, 804], "app": [495, 799], "has_prefix": 495, "strftime": [497, 569, 801, 837], "convers": [497, 578, 801, 819, 820, 837], "anywher": [497, 801], "3f": 497, "sun": [497, 801], "34": [497, 801], "lowercas": [498, 802], "variant": [498, 499], "uppercas": [499, 803], "10000": 500, "100000": 500, "0010": 500, "0001": 500, "00000": 500, "00001": 500, "to_struct": [501, 502, 569, 837], "my_struct": [501, 502, 558], "anymor": 502, "761594": [509, 814], "replic": [510, 822], "vals_phys": 510, "largest": [511, 823], "smallest": [511, 823], "bottom_k": 511, "appear": [513, 825], "value_count": [513, 569, 837], "9223372036854775807": 514, "multithread": 515, "columnwis": [518, 519], "AND": 518, "bitwis": [518, 519], "OR": 519, "returns_scalar": 520, "Be": 521, "argsort": [522, 569, 837], "hamburg": 525, "concat": [526, 527, 569, 628, 728, 837], "lag": 526, "mimic": 526, "a_lag_": 526, "a_rol": 526, "plai": 527, "swim": 527, "walk": 527, "full_sent": 527, "covari": 529, "intoexpr": [530, 539], "include_init": 530, "accumul": [530, 531, 539, 553], "fn": [530, 531, 539, 553], "new_valu": [530, 531, 539, 553], "simpli": [530, 539], "cumreduc": [530, 569], "across": [532, 559], "syntact": [532, 537, 538, 541, 552, 555, 559, 775], "sugar": [532, 537, 538, 541, 552, 555, 559, 775], "cumfold": [532, 569], "999999": 534, "add_week": 535, "add_dai": 535, "add_second": 535, "add_millisecond": 535, "add_hour": 535, "add_millisec": 535, "ond": 535, "eval": [536, 569, 837], "arr": [536, 563, 569, 820, 830, 837], "mathemat": 536, "a_b_doubl": 536, "fstring": 540, "placehold": 540, "hello_": 540, "_world": 540, "foo_": 540, "_bar_": 540, "foo_a_bar_1": 540, "foo_b_bar_2": 540, "foo_c_bar_3": 540, "agg_group": [541, 569], "export": 543, "allow_object": 544, "valueexcept": 544, "correl": [551, 556], "mode": [554, 569, 837], "propagate_nan": 556, "spearman": 556, "sever": 558, "a_and_b": 558, "get_column": 559, "isn": 562, "thens": 562, "chain": 562, "These": 568, "polar": [568, 569, 578, 580, 837, 843, 844], "sometim": 568, "overview": [569, 578, 837], "public": [569, 578, 837], "arg_max": [569, 837], "arg_min": [569, 837], "nan_max": [569, 837], "nan_min": [569, 837], "var": [569, 837], "is_between": 569, "is_dupl": [569, 837], "is_finit": [569, 837], "is_first": [569, 837], "is_in": [569, 837], "is_infinit": [569, 837], "is_nan": [569, 837], "is_not_nan": [569, 837], "is_not_nul": [569, 837], "is_uniqu": [569, 837], "set_ord": [569, 837], "map_alia": 569, "ab": [569, 837], "arcco": [569, 837], "arccosh": [569, 837], "arcsin": [569, 837], "arcsinh": [569, 837], "arctan": [569, 837], "arctanh": [569, 837], "arg_uniqu": [569, 837], "co": [569, 837], "cosh": [569, 837], "cumcount": 569, "cummax": [569, 837], "cummin": [569, 837], "cumprod": [569, 837], "cumulative_ev": [569, 837], "entropi": [569, 837], "ewm_mean": [569, 837], "ewm_std": [569, 837], "ewm_var": [569, 837], "kurtosi": [569, 837], "log10": [569, 837], "pct_chang": [569, 837], "pow": 569, "rolling_appli": [569, 837], "rolling_median": [569, 837], "rolling_quantil": [569, 837], "rolling_skew": [569, 837], "rolling_std": [569, 837], "rolling_var": [569, 837], "search_sort": [569, 837], "sin": [569, 837], "sinh": [569, 837], "tan": [569, 837], "tanh": [569, 837], "unique_count": [569, 837], "argsort_bi": 569, "avg": 569, "coalesc": 569, "concat_str": 569, "cov": 569, "pearson_corr": 569, "spearman_rank_corr": 569, "manipul": [569, 578, 837], "backward_fil": 569, "ceil": [569, 837], "clip_max": [569, 837], "clip_min": [569, 837], "extend_const": [569, 837], "flatten": 569, "floor": [569, 837], "inspect": 569, "reinterpret": [569, 837], "repeat_bi": 569, "reshap": [569, 837], "shrink_dtyp": [569, 837], "sort_bi": 569, "take_everi": [569, 837], "to_phys": [569, 837], "top_k": [569, 837], "meta": [569, 578], "output_nam": 569, "pop": 569, "root_nam": 569, "undo_alias": 569, "miscellan": [569, 578, 837], "set_sort": [569, 837], "count_match": [569, 837], "extract_al": [569, 837], "json_path_match": [569, 837], "ljust": [569, 837], "lstrip": [569, 837], "rjust": [569, 837], "rstrip": [569, 837], "split_exact": [569, 837], "splitn": [569, 837], "strip": [569, 837], "to_lowercas": [569, 837], "to_uppercas": [569, 837], "zfill": [569, 837], "cast_time_unit": [569, 837], "cast_time_zon": [569, 837], "epoch": [569, 648, 837], "iso_year": [569, 837], "offset_bi": [569, 837], "quarter": [569, 837], "tz_local": [569, 837], "with_time_unit": [569, 837], "expos": 578, "descript": [578, 837], "unset": 578, "arrowerror": 578, "invalidoperationerror": 578, "nodataerror": 578, "notfounderror": 578, "schemaerror": 578, "shapeerror": 578, "show_vers": 578, "sqlcontext": [578, 843], "sr": 583, "new_aliased_sr": 583, "append_chunk": 586, "super": 586, "skip_nul": 587, "141593": 588, "292432": 589, "549306": 593, "listnamespac": 600, "catnamespac": 625, "12345": [627, 696, 756], "56789": [627, 696, 756], "901234": [627, 696, 756], "math": [634, 770, 813], "pi": [634, 770, 813], "1232e": 634, "quick": 641, "mix": 641, "series_num": 641, "581139": 641, "series_str": 641, "datetimenamespac": 646, "1583020800": 648, "1585699200": 648, "1588291200": 648, "america": 648, "new_york": 648, "nyc": 648, "29": 648, "est": 648, "edt": 648, "1583002800": 648, "1585681200": 648, "1588273200": 648, "500m": [658, 660, 666, 672], "500000": 658, "2m": 663, "500000000": 666, "date_minus_1y_2mon": 668, "165": [671, 676], "series_equ": [671, 676, 837], "timestamp_u": 675, "978307200000000000": 675, "978393600000000000": 675, "978480000000000000": 675, "005": 684, "06293300616044681": 684, "65": 684, "8568409950394724": 684, "4000000": 685, "814697265625": 685, "bitmask": 697, "swiftli": 697, "2374023516666777365": 698, "10386026231460783898": 698, "17796317186427479491": 698, "datelik": 703, "166667": 735, "142857": 735, "125": 735, "128": 735, "512": 735, "peak": [736, 737], "nanstd": 746, "858612": 746, "200": [747, 748, 750], "400": [747, 748, 750], "150": 748, "250": 748, "350": 748, "450": 748, "381802": 752, "dev": 753, "57": 756, "frequent": [760, 761], "mutat": 761, "with_row_count": 761, "2246e": [770, 813], "divisor": [776, 827], "stringnamespac": 777, "6331e16": 813, "int64arrai": 816, "a_2": 817, "a_3": 817, "456": 818, "zero_copy_onli": 820, "writabl": 820, "view": [820, 837], "presenc": 820, "immut": 820, "made": 820, "ignore_nul": 828, "seriesview": 828, "inner_dtyp": 837, "arg_tru": 837, "peak_max": 837, "peak_min": 837, "to_arrow": 837, "to_panda": 837, "chunk_length": 837, "estimated_s": 837, "has_valid": 837, "is_boolean": 837, "is_datelik": 837, "is_empti": 837, "is_float": 837, "is_numer": 837, "is_utf8": 837, "new_from_index": 837, "set_at_idx": 837, "shrink_to_fit": 837, "to_dummi": 837, "readthedoc": 844}, "objects": {"polars": [[1, 0, 1, "", "Binary"], [2, 0, 1, "", "Boolean"], [3, 0, 1, "", "Categorical"], [22, 0, 1, "", "DataFrame"], [117, 0, 1, "", "DataType"], [118, 0, 1, "", "Date"], [119, 0, 1, "", "Datetime"], [120, 0, 1, "", "Duration"], [121, 0, 1, "", "Float32"], [122, 0, 1, "", "Float64"], [123, 0, 1, "", "Int16"], [124, 0, 1, "", "Int32"], [125, 0, 1, "", "Int64"], [126, 0, 1, "", "Int8"], [580, 0, 1, "", "LazyFrame"], [185, 0, 1, "", "List"], [186, 0, 1, "", "Null"], [187, 0, 1, "", "Object"], [843, 0, 1, "", "SQLContext"], [191, 0, 1, "", "StringCache"], [192, 0, 1, "", "Struct"], [193, 0, 1, "", "Time"], [194, 0, 1, "", "UInt16"], [195, 0, 1, "", "UInt32"], [196, 0, 1, "", "UInt64"], [197, 0, 1, "", "UInt8"], [198, 0, 1, "", "Unknown"], [199, 0, 1, "", "Utf8"], [200, 4, 1, "", "align_frames"], [518, 4, 1, "", "all"], [519, 4, 1, "", "any"], [520, 4, 1, "", "apply"], [521, 4, 1, "", "arange"], [201, 4, 1, "", "arg_where"], [522, 4, 1, "", "argsort_by"], [523, 4, 1, "", "avg"], [524, 4, 1, "", "coalesce"], [525, 4, 1, "", "col"], [202, 4, 1, "", "collect_all"], [203, 4, 1, "", "concat"], [526, 4, 1, "", "concat_list"], [527, 4, 1, "", "concat_str"], [528, 4, 1, "", "count"], [529, 4, 1, "", "cov"], [530, 4, 1, "", "cumfold"], [531, 4, 1, "", "cumreduce"], [532, 4, 1, "", "cumsum"], [204, 4, 1, "", "cut"], [533, 4, 1, "", "date"], [205, 4, 1, "", "date_range"], [534, 4, 1, "", "datetime"], [535, 4, 1, "", "duration"], [536, 4, 1, "", "element"], [537, 4, 1, "", "exclude"], [538, 4, 1, "", "first"], [539, 4, 1, "", "fold"], [540, 4, 1, "", "format"], [218, 4, 1, "", "from_arrow"], [219, 4, 1, "", "from_dict"], [220, 4, 1, "", "from_dicts"], [221, 4, 1, "", "from_numpy"], [222, 4, 1, "", "from_pandas"], [223, 4, 1, "", "from_records"], [224, 4, 1, "", "get_dummies"], [225, 4, 1, "", "get_idx_type"], [541, 4, 1, "", "groups"], [542, 4, 1, "", "head"], [543, 4, 1, "", "list"], [544, 4, 1, "", "lit"], [545, 4, 1, "", "map"], [546, 4, 1, "", "max"], [547, 4, 1, "", "mean"], [548, 4, 1, "", "median"], [549, 4, 1, "", "min"], [550, 4, 1, "", "n_unique"], [255, 4, 1, "", "ones"], [551, 4, 1, "", "pearson_corr"], [552, 4, 1, "", "quantile"], [256, 4, 1, "", "read_avro"], [257, 4, 1, "", "read_csv"], [258, 4, 1, "", "read_csv_batched"], [259, 4, 1, "", "read_excel"], [260, 4, 1, "", "read_ipc"], [261, 4, 1, "", "read_ipc_schema"], [262, 4, 1, "", "read_json"], [263, 4, 1, "", "read_ndjson"], [264, 4, 1, "", "read_parquet"], [265, 4, 1, "", "read_parquet_schema"], [266, 4, 1, "", "read_sql"], [553, 4, 1, "", "reduce"], [554, 4, 1, "", "repeat"], [267, 4, 1, "", "scan_csv"], [268, 4, 1, "", "scan_ds"], [269, 4, 1, "", "scan_ipc"], [270, 4, 1, "", "scan_ndjson"], [271, 4, 1, "", "scan_parquet"], [555, 4, 1, "", "select"], [272, 4, 1, "", "show_versions"], [556, 4, 1, "", "spearman_rank_corr"], [557, 4, 1, "", "std"], [558, 4, 1, "", "struct"], [559, 4, 1, "", "sum"], [560, 4, 1, "", "tail"], [279, 4, 1, "", "threadpool_size"], [280, 4, 1, "", "toggle_string_cache"], [561, 4, 1, "", "var"], [562, 4, 1, "", "when"], [281, 4, 1, "", "zeros"]], "polars.Binary": [[1, 1, 1, "", "__init__"]], "polars.Boolean": [[2, 1, 1, "", "__init__"]], "polars.Categorical": [[3, 1, 1, "", "__init__"]], "polars.Config": [[4, 1, 1, "", "load"], [5, 1, 1, "", "restore_defaults"], [6, 1, 1, "", "save"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_fmt_str_lengths"], [9, 1, 1, "", "set_tbl_cell_alignment"], [10, 1, 1, "", "set_tbl_cols"], [11, 1, 1, "", "set_tbl_column_data_type_inline"], [12, 1, 1, "", "set_tbl_dataframe_shape_below"], [13, 1, 1, "", "set_tbl_formatting"], [14, 1, 1, "", "set_tbl_hide_column_data_types"], [15, 1, 1, "", "set_tbl_hide_column_names"], [16, 1, 1, "", "set_tbl_hide_dataframe_shape"], [17, 1, 1, "", "set_tbl_hide_dtype_separator"], [18, 1, 1, "", "set_tbl_rows"], [19, 1, 1, "", "set_tbl_width_chars"], [20, 1, 1, "", "set_verbose"], [21, 1, 1, "", "state"]], "polars.DataFrame": [[22, 1, 1, "", "__init__"], [23, 1, 1, "", "apply"], [24, 1, 1, "", "cleared"], [25, 1, 1, "", "clone"], [26, 2, 1, "", "columns"], [27, 1, 1, "", "describe"], [28, 1, 1, "", "drop"], [29, 1, 1, "", "drop_in_place"], [30, 1, 1, "", "drop_nulls"], [31, 2, 1, "", "dtypes"], [32, 1, 1, "", "estimated_size"], [33, 1, 1, "", "explode"], [34, 1, 1, "", "extend"], [35, 1, 1, "", "fill_nan"], [36, 1, 1, "", "fill_null"], [37, 1, 1, "", "filter"], [38, 1, 1, "", "find_idx_by_name"], [39, 1, 1, "", "fold"], [40, 1, 1, "", "frame_equal"], [41, 1, 1, "", "get_column"], [42, 1, 1, "", "get_columns"], [43, 1, 1, "", "groupby"], [44, 1, 1, "", "groupby_dynamic"], [45, 1, 1, "", "groupby_rolling"], [46, 1, 1, "", "hash_rows"], [47, 1, 1, "", "head"], [48, 2, 1, "", "height"], [49, 1, 1, "", "hstack"], [50, 1, 1, "", "insert_at_idx"], [51, 1, 1, "", "interpolate"], [52, 1, 1, "", "is_duplicated"], [53, 1, 1, "", "is_empty"], [54, 1, 1, "", "is_unique"], [55, 1, 1, "", "join"], [56, 1, 1, "", "join_asof"], [57, 1, 1, "", "lazy"], [58, 1, 1, "", "limit"], [59, 1, 1, "", "max"], [60, 1, 1, "", "mean"], [61, 1, 1, "", "median"], [62, 1, 1, "", "melt"], [63, 1, 1, "", "min"], [64, 1, 1, "", "n_chunks"], [65, 1, 1, "", "n_unique"], [66, 1, 1, "", "null_count"], [67, 1, 1, "", "partition_by"], [68, 1, 1, "", "pipe"], [69, 1, 1, "", "pivot"], [70, 1, 1, "", "product"], [71, 1, 1, "", "quantile"], [72, 1, 1, "", "rechunk"], [73, 1, 1, "", "rename"], [74, 1, 1, "", "replace"], [75, 1, 1, "", "replace_at_idx"], [76, 1, 1, "", "reverse"], [77, 1, 1, "", "row"], [78, 1, 1, "", "rows"], [79, 1, 1, "", "sample"], [80, 2, 1, "", "schema"], [81, 1, 1, "", "select"], [82, 2, 1, "", "shape"], [83, 1, 1, "", "shift"], [84, 1, 1, "", "shift_and_fill"], [85, 1, 1, "", "shrink_to_fit"], [86, 1, 1, "", "slice"], [87, 1, 1, "", "sort"], [88, 1, 1, "", "std"], [89, 1, 1, "", "sum"], [90, 1, 1, "", "tail"], [91, 1, 1, "", "take_every"], [92, 1, 1, "", "to_arrow"], [93, 1, 1, "", "to_dict"], [94, 1, 1, "", "to_dicts"], [95, 1, 1, "", "to_dummies"], [96, 1, 1, "", "to_numpy"], [97, 1, 1, "", "to_pandas"], [98, 1, 1, "", "to_series"], [99, 1, 1, "", "to_struct"], [100, 1, 1, "", "transpose"], [101, 1, 1, "", "unique"], [102, 1, 1, "", "unnest"], [103, 1, 1, "", "unstack"], [104, 1, 1, "", "upsample"], [105, 1, 1, "", "var"], [106, 1, 1, "", "vstack"], [107, 2, 1, "", "width"], [108, 1, 1, "", "with_column"], [109, 1, 1, "", "with_columns"], [110, 1, 1, "", "with_row_count"], [111, 1, 1, "", "write_avro"], [112, 1, 1, "", "write_csv"], [113, 1, 1, "", "write_ipc"], [114, 1, 1, "", "write_json"], [115, 1, 1, "", "write_ndjson"], [116, 1, 1, "", "write_parquet"]], "polars.DataType": [[117, 1, 1, "", "__init__"]], "polars.Date": [[118, 1, 1, "", "__init__"]], "polars.Datetime": [[119, 1, 1, "", "__init__"]], "polars.Duration": [[120, 1, 1, "", "__init__"]], "polars.Expr": [[287, 1, 1, "", "abs"], [288, 1, 1, "", "agg_groups"], [289, 1, 1, "", "alias"], [290, 1, 1, "", "all"], [291, 1, 1, "", "any"], [292, 1, 1, "", "append"], [293, 1, 1, "", "apply"], [294, 1, 1, "", "arccos"], [295, 1, 1, "", "arccosh"], [296, 1, 1, "", "arcsin"], [297, 1, 1, "", "arcsinh"], [298, 1, 1, "", "arctan"], [299, 1, 1, "", "arctanh"], [300, 1, 1, "", "arg_max"], [301, 1, 1, "", "arg_min"], [302, 1, 1, "", "arg_sort"], [303, 1, 1, "", "arg_unique"], [304, 1, 1, "", "argsort"], [328, 1, 1, "", "backward_fill"], [329, 1, 1, "", "cast"], [331, 1, 1, "", "ceil"], [332, 1, 1, "", "clip"], [333, 1, 1, "", "clip_max"], [334, 1, 1, "", "clip_min"], [335, 1, 1, "", "cos"], [336, 1, 1, "", "cosh"], [337, 1, 1, "", "count"], [338, 1, 1, "", "cumcount"], [339, 1, 1, "", "cummax"], [340, 1, 1, "", "cummin"], [341, 1, 1, "", "cumprod"], [342, 1, 1, "", "cumsum"], [343, 1, 1, "", "cumulative_eval"], [344, 1, 1, "", "diff"], [345, 1, 1, "", "dot"], [346, 1, 1, "", "drop_nans"], [347, 1, 1, "", "drop_nulls"], [380, 1, 1, "", "entropy"], [381, 1, 1, "", "ewm_mean"], [382, 1, 1, "", "ewm_std"], [383, 1, 1, "", "ewm_var"], [384, 1, 1, "", "exclude"], [385, 1, 1, "", "exp"], [386, 1, 1, "", "explode"], [387, 1, 1, "", "extend_constant"], [388, 1, 1, "", "fill_nan"], [389, 1, 1, "", "fill_null"], [390, 1, 1, "", "filter"], [391, 1, 1, "", "first"], [392, 1, 1, "", "flatten"], [393, 1, 1, "", "floor"], [394, 1, 1, "", "forward_fill"], [395, 1, 1, "", "hash"], [396, 1, 1, "", "head"], [397, 1, 1, "", "inspect"], [398, 1, 1, "", "interpolate"], [399, 1, 1, "", "is_between"], [400, 1, 1, "", "is_duplicated"], [401, 1, 1, "", "is_finite"], [402, 1, 1, "", "is_first"], [403, 1, 1, "", "is_in"], [404, 1, 1, "", "is_infinite"], [405, 1, 1, "", "is_nan"], [406, 1, 1, "", "is_not"], [407, 1, 1, "", "is_not_nan"], [408, 1, 1, "", "is_not_null"], [409, 1, 1, "", "is_null"], [410, 1, 1, "", "is_unique"], [411, 1, 1, "", "keep_name"], [412, 1, 1, "", "kurtosis"], [413, 1, 1, "", "last"], [414, 1, 1, "", "len"], [415, 1, 1, "", "limit"], [416, 1, 1, "", "list"], [417, 1, 1, "", "log"], [418, 1, 1, "", "log10"], [419, 1, 1, "", "lower_bound"], [420, 1, 1, "", "map"], [421, 1, 1, "", "map_alias"], [422, 1, 1, "", "max"], [423, 1, 1, "", "mean"], [424, 1, 1, "", "median"], [429, 1, 1, "", "min"], [430, 1, 1, "", "mode"], [431, 1, 1, "", "n_unique"], [432, 1, 1, "", "nan_max"], [433, 1, 1, "", "nan_min"], [434, 1, 1, "", "null_count"], [435, 1, 1, "", "over"], [436, 1, 1, "", "pct_change"], [437, 1, 1, "", "pow"], [438, 1, 1, "", "prefix"], [439, 1, 1, "", "product"], [440, 1, 1, "", "quantile"], [441, 1, 1, "", "rank"], [442, 1, 1, "", "rechunk"], [443, 1, 1, "", "reinterpret"], [444, 1, 1, "", "repeat_by"], [445, 1, 1, "", "reshape"], [446, 1, 1, "", "reverse"], [447, 1, 1, "", "rolling_apply"], [448, 1, 1, "", "rolling_max"], [449, 1, 1, "", "rolling_mean"], [450, 1, 1, "", "rolling_median"], [451, 1, 1, "", "rolling_min"], [452, 1, 1, "", "rolling_quantile"], [453, 1, 1, "", "rolling_skew"], [454, 1, 1, "", "rolling_std"], [455, 1, 1, "", "rolling_sum"], [456, 1, 1, "", "rolling_var"], [457, 1, 1, "", "round"], [458, 1, 1, "", "sample"], [459, 1, 1, "", "search_sorted"], [460, 1, 1, "", "set_sorted"], [461, 1, 1, "", "shift"], [462, 1, 1, "", "shift_and_fill"], [463, 1, 1, "", "shrink_dtype"], [464, 1, 1, "", "shuffle"], [465, 1, 1, "", "sign"], [466, 1, 1, "", "sin"], [467, 1, 1, "", "sinh"], [468, 1, 1, "", "skew"], [469, 1, 1, "", "slice"], [470, 1, 1, "", "sort"], [471, 1, 1, "", "sort_by"], [472, 1, 1, "", "sqrt"], [473, 1, 1, "", "std"], [503, 1, 1, "", "suffix"], [504, 1, 1, "", "sum"], [505, 1, 1, "", "tail"], [506, 1, 1, "", "take"], [507, 1, 1, "", "take_every"], [508, 1, 1, "", "tan"], [509, 1, 1, "", "tanh"], [510, 1, 1, "", "to_physical"], [511, 1, 1, "", "top_k"], [512, 1, 1, "", "unique"], [513, 1, 1, "", "unique_counts"], [514, 1, 1, "", "upper_bound"], [515, 1, 1, "", "value_counts"], [516, 1, 1, "", "var"], [517, 1, 1, "", "where"]], "polars.Expr.arr": [[305, 1, 1, "", "arg_max"], [306, 1, 1, "", "arg_min"], [307, 1, 1, "", "concat"], [308, 1, 1, "", "contains"], [309, 1, 1, "", "diff"], [310, 1, 1, "", "eval"], [311, 1, 1, "", "first"], [312, 1, 1, "", "get"], [313, 1, 1, "", "head"], [314, 1, 1, "", "join"], [315, 1, 1, "", "last"], [316, 1, 1, "", "lengths"], [317, 1, 1, "", "max"], [318, 1, 1, "", "mean"], [319, 1, 1, "", "min"], [320, 1, 1, "", "reverse"], [321, 1, 1, "", "shift"], [322, 1, 1, "", "slice"], [323, 1, 1, "", "sort"], [324, 1, 1, "", "sum"], [325, 1, 1, "", "tail"], [326, 1, 1, "", "to_struct"], [327, 1, 1, "", "unique"]], "polars.Expr.cat": [[330, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[348, 1, 1, "", "cast_time_unit"], [349, 1, 1, "", "cast_time_zone"], [350, 1, 1, "", "day"], [351, 1, 1, "", "days"], [352, 1, 1, "", "epoch"], [353, 1, 1, "", "hour"], [354, 1, 1, "", "hours"], [355, 1, 1, "", "iso_year"], [356, 1, 1, "", "microsecond"], [357, 1, 1, "", "microseconds"], [358, 1, 1, "", "millisecond"], [359, 1, 1, "", "milliseconds"], [360, 1, 1, "", "minute"], [361, 1, 1, "", "minutes"], [362, 1, 1, "", "month"], [363, 1, 1, "", "nanosecond"], [364, 1, 1, "", "nanoseconds"], [365, 1, 1, "", "offset_by"], [366, 1, 1, "", "ordinal_day"], [367, 1, 1, "", "quarter"], [368, 1, 1, "", "round"], [369, 1, 1, "", "second"], [370, 1, 1, "", "seconds"], [371, 1, 1, "", "strftime"], [372, 1, 1, "", "timestamp"], [373, 1, 1, "", "truncate"], [374, 1, 1, "", "tz_localize"], [375, 1, 1, "", "week"], [376, 1, 1, "", "weekday"], [377, 1, 1, "", "with_time_unit"], [378, 1, 1, "", "with_time_zone"], [379, 1, 1, "", "year"]], "polars.Expr.meta": [[425, 1, 1, "", "output_name"], [426, 1, 1, "", "pop"], [427, 1, 1, "", "root_names"], [428, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[474, 1, 1, "", "concat"], [475, 1, 1, "", "contains"], [476, 1, 1, "", "count_match"], [477, 1, 1, "", "decode"], [478, 1, 1, "", "encode"], [479, 1, 1, "", "ends_with"], [480, 1, 1, "", "extract"], [481, 1, 1, "", "extract_all"], [482, 1, 1, "", "json_path_match"], [483, 1, 1, "", "lengths"], [484, 1, 1, "", "ljust"], [485, 1, 1, "", "lstrip"], [486, 1, 1, "", "n_chars"], [487, 1, 1, "", "replace"], [488, 1, 1, "", "replace_all"], [489, 1, 1, "", "rjust"], [490, 1, 1, "", "rstrip"], [491, 1, 1, "", "slice"], [492, 1, 1, "", "split"], [493, 1, 1, "", "split_exact"], [494, 1, 1, "", "splitn"], [495, 1, 1, "", "starts_with"], [496, 1, 1, "", "strip"], [497, 1, 1, "", "strptime"], [498, 1, 1, "", "to_lowercase"], [499, 1, 1, "", "to_uppercase"], [500, 1, 1, "", "zfill"]], "polars.Expr.struct": [[501, 1, 1, "", "field"], [502, 1, 1, "", "rename_fields"]], "polars.Float32": [[121, 1, 1, "", "__init__"]], "polars.Float64": [[122, 1, 1, "", "__init__"]], "polars.Int16": [[123, 1, 1, "", "__init__"]], "polars.Int32": [[124, 1, 1, "", "__init__"]], "polars.Int64": [[125, 1, 1, "", "__init__"]], "polars.Int8": [[126, 1, 1, "", "__init__"]], "polars.LazyFrame": [[127, 1, 1, "", "cache"], [128, 1, 1, "", "cleared"], [129, 1, 1, "", "clone"], [130, 1, 1, "", "collect"], [131, 2, 1, "", "columns"], [132, 1, 1, "", "describe_optimized_plan"], [133, 1, 1, "", "describe_plan"], [134, 1, 1, "", "drop"], [135, 1, 1, "", "drop_nulls"], [136, 2, 1, "", "dtypes"], [137, 1, 1, "", "explode"], [138, 1, 1, "", "fetch"], [139, 1, 1, "", "fill_nan"], [140, 1, 1, "", "fill_null"], [141, 1, 1, "", "filter"], [142, 1, 1, "", "first"], [143, 1, 1, "", "from_json"], [144, 1, 1, "", "groupby"], [145, 1, 1, "", "groupby_dynamic"], [146, 1, 1, "", "groupby_rolling"], [147, 1, 1, "", "head"], [148, 1, 1, "", "inspect"], [149, 1, 1, "", "interpolate"], [150, 1, 1, "", "join"], [151, 1, 1, "", "join_asof"], [152, 1, 1, "", "last"], [153, 1, 1, "", "limit"], [154, 1, 1, "", "map"], [155, 1, 1, "", "max"], [156, 1, 1, "", "mean"], [157, 1, 1, "", "median"], [158, 1, 1, "", "melt"], [159, 1, 1, "", "min"], [160, 1, 1, "", "pipe"], [161, 1, 1, "", "profile"], [162, 1, 1, "", "quantile"], [163, 1, 1, "", "read_json"], [164, 1, 1, "", "rename"], [165, 1, 1, "", "reverse"], [166, 2, 1, "", "schema"], [167, 1, 1, "", "select"], [168, 1, 1, "", "shift"], [169, 1, 1, "", "shift_and_fill"], [170, 1, 1, "", "show_graph"], [171, 1, 1, "", "slice"], [172, 1, 1, "", "sort"], [173, 1, 1, "", "std"], [174, 1, 1, "", "sum"], [175, 1, 1, "", "tail"], [176, 1, 1, "", "take_every"], [177, 1, 1, "", "unique"], [178, 1, 1, "", "unnest"], [179, 1, 1, "", "var"], [180, 1, 1, "", "with_column"], [181, 1, 1, "", "with_columns"], [182, 1, 1, "", "with_context"], [183, 1, 1, "", "with_row_count"], [184, 1, 1, "", "write_json"]], "polars.List": [[185, 1, 1, "", "__init__"]], "polars.Null": [[186, 1, 1, "", "__init__"]], "polars.Object": [[187, 1, 1, "", "__init__"]], "polars.SQLContext": [[188, 1, 1, "", "execute"], [189, 1, 1, "", "query"], [190, 1, 1, "", "register"]], "polars.Series": [[582, 1, 1, "", "abs"], [583, 1, 1, "", "alias"], [584, 1, 1, "", "all"], [585, 1, 1, "", "any"], [586, 1, 1, "", "append"], [587, 1, 1, "", "apply"], [588, 1, 1, "", "arccos"], [589, 1, 1, "", "arccosh"], [590, 1, 1, "", "arcsin"], [591, 1, 1, "", "arcsinh"], [592, 1, 1, "", "arctan"], [593, 1, 1, "", "arctanh"], [594, 1, 1, "", "arg_max"], [595, 1, 1, "", "arg_min"], [596, 1, 1, "", "arg_sort"], [597, 1, 1, "", "arg_true"], [598, 1, 1, "", "arg_unique"], [599, 1, 1, "", "argsort"], [600, 3, 1, "", "arr"], [624, 1, 1, "", "cast"], [625, 3, 1, "", "cat"], [627, 1, 1, "", "ceil"], [628, 1, 1, "", "chunk_lengths"], [629, 1, 1, "", "cleared"], [630, 1, 1, "", "clip"], [631, 1, 1, "", "clip_max"], [632, 1, 1, "", "clip_min"], [633, 1, 1, "", "clone"], [634, 1, 1, "", "cos"], [635, 1, 1, "", "cosh"], [636, 1, 1, "", "cummax"], [637, 1, 1, "", "cummin"], [638, 1, 1, "", "cumprod"], [639, 1, 1, "", "cumsum"], [640, 1, 1, "", "cumulative_eval"], [641, 1, 1, "", "describe"], [642, 1, 1, "", "diff"], [643, 1, 1, "", "dot"], [644, 1, 1, "", "drop_nans"], [645, 1, 1, "", "drop_nulls"], [646, 3, 1, "", "dt"], [683, 2, 1, "", "dtype"], [684, 1, 1, "", "entropy"], [685, 1, 1, "", "estimated_size"], [686, 1, 1, "", "ewm_mean"], [687, 1, 1, "", "ewm_std"], [688, 1, 1, "", "ewm_var"], [689, 1, 1, "", "exp"], [690, 1, 1, "", "explode"], [691, 1, 1, "", "extend_constant"], [692, 1, 1, "", "fill_nan"], [693, 1, 1, "", "fill_null"], [694, 1, 1, "", "filter"], [695, 2, 1, "", "flags"], [696, 1, 1, "", "floor"], [697, 1, 1, "", "has_validity"], [698, 1, 1, "", "hash"], [699, 1, 1, "", "head"], [700, 2, 1, "", "inner_dtype"], [701, 1, 1, "", "interpolate"], [702, 1, 1, "", "is_boolean"], [703, 1, 1, "", "is_datelike"], [704, 1, 1, "", "is_duplicated"], [705, 1, 1, "", "is_empty"], [706, 1, 1, "", "is_finite"], [707, 1, 1, "", "is_first"], [708, 1, 1, "", "is_float"], [709, 1, 1, "", "is_in"], [710, 1, 1, "", "is_infinite"], [711, 1, 1, "", "is_nan"], [712, 1, 1, "", "is_not_nan"], [713, 1, 1, "", "is_not_null"], [714, 1, 1, "", "is_null"], [715, 1, 1, "", "is_numeric"], [716, 1, 1, "", "is_unique"], [717, 1, 1, "", "is_utf8"], [718, 1, 1, "", "kurtosis"], [719, 1, 1, "", "len"], [720, 1, 1, "", "limit"], [721, 1, 1, "", "log"], [722, 1, 1, "", "log10"], [723, 1, 1, "", "max"], [724, 1, 1, "", "mean"], [725, 1, 1, "", "median"], [726, 1, 1, "", "min"], [727, 1, 1, "", "mode"], [728, 1, 1, "", "n_chunks"], [729, 1, 1, "", "n_unique"], [730, 2, 1, "", "name"], [731, 1, 1, "", "nan_max"], [732, 1, 1, "", "nan_min"], [733, 1, 1, "", "new_from_index"], [734, 1, 1, "", "null_count"], [735, 1, 1, "", "pct_change"], [736, 1, 1, "", "peak_max"], [737, 1, 1, "", "peak_min"], [738, 1, 1, "", "product"], [739, 1, 1, "", "quantile"], [740, 1, 1, "", "rank"], [741, 1, 1, "", "rechunk"], [742, 1, 1, "", "reinterpret"], [743, 1, 1, "", "rename"], [744, 1, 1, "", "reshape"], [745, 1, 1, "", "reverse"], [746, 1, 1, "", "rolling_apply"], [747, 1, 1, "", "rolling_max"], [748, 1, 1, "", "rolling_mean"], [749, 1, 1, "", "rolling_median"], [750, 1, 1, "", "rolling_min"], [751, 1, 1, "", "rolling_quantile"], [752, 1, 1, "", "rolling_skew"], [753, 1, 1, "", "rolling_std"], [754, 1, 1, "", "rolling_sum"], [755, 1, 1, "", "rolling_var"], [756, 1, 1, "", "round"], [757, 1, 1, "", "sample"], [758, 1, 1, "", "search_sorted"], [759, 1, 1, "", "series_equal"], [760, 1, 1, "", "set"], [761, 1, 1, "", "set_at_idx"], [762, 1, 1, "", "set_sorted"], [763, 2, 1, "", "shape"], [764, 1, 1, "", "shift"], [765, 1, 1, "", "shift_and_fill"], [766, 1, 1, "", "shrink_dtype"], [767, 1, 1, "", "shrink_to_fit"], [768, 1, 1, "", "shuffle"], [769, 1, 1, "", "sign"], [770, 1, 1, "", "sin"], [771, 1, 1, "", "sinh"], [772, 1, 1, "", "skew"], [773, 1, 1, "", "slice"], [774, 1, 1, "", "sort"], [775, 1, 1, "", "sqrt"], [776, 1, 1, "", "std"], [777, 3, 1, "", "str"], [809, 1, 1, "", "sum"], [810, 1, 1, "", "tail"], [811, 1, 1, "", "take"], [812, 1, 1, "", "take_every"], [813, 1, 1, "", "tan"], [814, 1, 1, "", "tanh"], [815, 2, 1, "", "time_unit"], [816, 1, 1, "", "to_arrow"], [817, 1, 1, "", "to_dummies"], [818, 1, 1, "", "to_frame"], [819, 1, 1, "", "to_list"], [820, 1, 1, "", "to_numpy"], [821, 1, 1, "", "to_pandas"], [822, 1, 1, "", "to_physical"], [823, 1, 1, "", "top_k"], [824, 1, 1, "", "unique"], [825, 1, 1, "", "unique_counts"], [826, 1, 1, "", "value_counts"], [827, 1, 1, "", "var"], [828, 1, 1, "", "view"], [829, 1, 1, "", "zip_with"]], "polars.Series.arr": [[601, 1, 1, "", "arg_max"], [602, 1, 1, "", "arg_min"], [603, 1, 1, "", "concat"], [604, 1, 1, "", "contains"], [605, 1, 1, "", "diff"], [606, 1, 1, "", "eval"], [607, 1, 1, "", "first"], [608, 1, 1, "", "get"], [609, 1, 1, "", "head"], [610, 1, 1, "", "join"], [611, 1, 1, "", "last"], [612, 1, 1, "", "lengths"], [613, 1, 1, "", "max"], [614, 1, 1, "", "mean"], [615, 1, 1, "", "min"], [616, 1, 1, "", "reverse"], [617, 1, 1, "", "shift"], [618, 1, 1, "", "slice"], [619, 1, 1, "", "sort"], [620, 1, 1, "", "sum"], [621, 1, 1, "", "tail"], [622, 1, 1, "", "to_struct"], [623, 1, 1, "", "unique"]], "polars.Series.cat": [[626, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[647, 1, 1, "", "cast_time_unit"], [648, 1, 1, "", "cast_time_zone"], [649, 1, 1, "", "day"], [650, 1, 1, "", "days"], [651, 1, 1, "", "epoch"], [652, 1, 1, "", "hour"], [653, 1, 1, "", "hours"], [654, 1, 1, "", "iso_year"], [655, 1, 1, "", "max"], [656, 1, 1, "", "mean"], [657, 1, 1, "", "median"], [658, 1, 1, "", "microsecond"], [659, 1, 1, "", "microseconds"], [660, 1, 1, "", "millisecond"], [661, 1, 1, "", "milliseconds"], [662, 1, 1, "", "min"], [663, 1, 1, "", "minute"], [664, 1, 1, "", "minutes"], [665, 1, 1, "", "month"], [666, 1, 1, "", "nanosecond"], [667, 1, 1, "", "nanoseconds"], [668, 1, 1, "", "offset_by"], [669, 1, 1, "", "ordinal_day"], [670, 1, 1, "", "quarter"], [671, 1, 1, "", "round"], [672, 1, 1, "", "second"], [673, 1, 1, "", "seconds"], [674, 1, 1, "", "strftime"], [675, 1, 1, "", "timestamp"], [676, 1, 1, "", "truncate"], [677, 1, 1, "", "tz_localize"], [678, 1, 1, "", "week"], [679, 1, 1, "", "weekday"], [680, 1, 1, "", "with_time_unit"], [681, 1, 1, "", "with_time_zone"], [682, 1, 1, "", "year"]], "polars.Series.str": [[778, 1, 1, "", "concat"], [779, 1, 1, "", "contains"], [780, 1, 1, "", "count_match"], [781, 1, 1, "", "decode"], [782, 1, 1, "", "encode"], [783, 1, 1, "", "ends_with"], [784, 1, 1, "", "extract"], [785, 1, 1, "", "extract_all"], [786, 1, 1, "", "json_path_match"], [787, 1, 1, "", "lengths"], [788, 1, 1, "", "ljust"], [789, 1, 1, "", "lstrip"], [790, 1, 1, "", "n_chars"], [791, 1, 1, "", "replace"], [792, 1, 1, "", "replace_all"], [793, 1, 1, "", "rjust"], [794, 1, 1, "", "rstrip"], [795, 1, 1, "", "slice"], [796, 1, 1, "", "split"], [797, 1, 1, "", "split_exact"], [798, 1, 1, "", "splitn"], [799, 1, 1, "", "starts_with"], [800, 1, 1, "", "strip"], [801, 1, 1, "", "strptime"], [802, 1, 1, "", "to_lowercase"], [803, 1, 1, "", "to_uppercase"], [804, 1, 1, "", "zfill"]], "polars.Series.struct": [[805, 1, 1, "", "field"], [806, 3, 1, "", "fields"], [807, 1, 1, "", "rename_fields"], [808, 1, 1, "", "to_frame"]], "polars.StringCache": [[191, 1, 1, "", "__init__"]], "polars.Struct": [[192, 1, 1, "", "__init__"]], "polars.Time": [[193, 1, 1, "", "__init__"]], "polars.UInt16": [[194, 1, 1, "", "__init__"]], "polars.UInt32": [[195, 1, 1, "", "__init__"]], "polars.UInt64": [[196, 1, 1, "", "__init__"]], "polars.UInt8": [[197, 1, 1, "", "__init__"]], "polars.Unknown": [[198, 1, 1, "", "__init__"]], "polars.Utf8": [[199, 1, 1, "", "__init__"]], "polars.exceptions": [[206, 5, 1, "", "ArrowError"], [207, 5, 1, "", "ComputeError"], [208, 5, 1, "", "DuplicateError"], [209, 5, 1, "", "InvalidOperationError"], [210, 5, 1, "", "NoDataError"], [211, 5, 1, "", "NoRowsReturned"], [212, 5, 1, "", "NotFoundError"], [213, 5, 1, "", "PanicException"], [214, 5, 1, "", "RowsException"], [215, 5, 1, "", "SchemaError"], [216, 5, 1, "", "ShapeError"], [217, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[226, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[227, 1, 1, "", "agg"], [228, 1, 1, "", "agg_list"], [229, 1, 1, "", "apply"], [230, 1, 1, "", "count"], [231, 1, 1, "", "first"], [232, 1, 1, "", "head"], [233, 1, 1, "", "last"], [234, 1, 1, "", "max"], [235, 1, 1, "", "mean"], [236, 1, 1, "", "median"], [237, 1, 1, "", "min"], [238, 1, 1, "", "n_unique"], [239, 1, 1, "", "pivot"], [240, 1, 1, "", "quantile"], [241, 1, 1, "", "sum"], [242, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[243, 1, 1, "", "count"], [244, 1, 1, "", "first"], [245, 1, 1, "", "last"], [246, 1, 1, "", "max"], [247, 1, 1, "", "mean"], [248, 1, 1, "", "median"], [249, 1, 1, "", "min"], [250, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[251, 1, 1, "", "agg"], [252, 1, 1, "", "apply"], [253, 1, 1, "", "head"], [254, 1, 1, "", "tail"]], "polars.testing": [[273, 4, 1, "", "assert_frame_equal"], [274, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[275, 0, 1, "", "column"], [276, 4, 1, "", "columns"], [277, 4, 1, "", "dataframes"], [278, 4, 1, "", "series"]], "polars.testing.parametric.column": [[275, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829], "binari": 1, "boolean": [2, 564, 832], "categor": 3, "config": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 282], "load": [4, 282], "restore_default": 5, "save": [6, 282], "set_ascii_t": 7, "set_fmt_str_length": 8, "set_tbl_cell_align": 9, "set_tbl_col": 10, "set_tbl_column_data_type_inlin": 11, "set_tbl_dataframe_shape_below": 12, "set_tbl_format": 13, "set_tbl_hide_column_data_typ": 14, "set_tbl_hide_column_nam": 15, "set_tbl_hide_dataframe_shap": 16, "set_tbl_hide_dtype_separ": 17, "set_tbl_row": 18, "set_tbl_width_char": 19, "set_verbos": 20, "state": [21, 282], "datafram": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 277, 283], "appli": [23, 229, 252, 283, 293, 520, 580, 587], "clear": [24, 128, 629], "clone": [25, 129, 633], "column": [26, 131, 275, 276, 566], "describ": [27, 641], "drop": [28, 134], "drop_in_plac": 29, "drop_nul": [30, 135, 347, 645], "dtype": [31, 136, 683], "estimated_s": [32, 685], "explod": [33, 137, 386, 690], "extend": 34, "fill_nan": [35, 139, 388, 692], "fill_nul": [36, 140, 389, 693], "filter": [37, 141, 390, 694], "find_idx_by_nam": 38, "fold": [39, 539], "frame_equ": 40, "get_column": [41, 42], "groupbi": [43, 144, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 251, 252, 253, 254, 283, 580], "groupby_dynam": [44, 145], "groupby_rol": [45, 146], "hash_row": 46, "head": [47, 147, 232, 253, 313, 396, 542, 609, 699], "height": 48, "hstack": 49, "insert_at_idx": 50, "interpol": [51, 149, 398, 701], "is_dupl": [52, 400, 704], "is_empti": [53, 705], "is_uniqu": [54, 410, 716], "join": [55, 150, 314, 610], "join_asof": [56, 151], "lazi": [57, 577], "limit": [58, 153, 415, 720], "max": [59, 155, 234, 246, 317, 422, 546, 613, 655, 723], "mean": [60, 156, 235, 247, 318, 423, 547, 614, 656, 724], "median": [61, 157, 236, 248, 424, 548, 657, 725], "melt": [62, 158], "min": [63, 159, 237, 249, 319, 429, 549, 615, 662, 726], "n_chunk": [64, 728], "n_uniqu": [65, 238, 431, 550, 729], "null_count": [66, 434, 734], "partition_bi": 67, "pipe": [68, 160], "pivot": [69, 239, 243, 244, 245, 246, 247, 248, 249, 250, 283], "product": [70, 439, 738], "quantil": [71, 162, 240, 440, 552, 739], "rechunk": [72, 442, 741], "renam": [73, 164, 743], "replac": [74, 487, 791], "replace_at_idx": 75, "revers": [76, 165, 320, 446, 616, 745], "row": [77, 78], "sampl": [79, 458, 757], "schema": [80, 166], "select": [81, 167, 283, 555, 572, 580, 839], "shape": [82, 763], "shift": [83, 168, 321, 461, 617, 764], "shift_and_fil": [84, 169, 462, 765], "shrink_to_fit": [85, 767], "slice": [86, 171, 322, 469, 491, 618, 773, 795], "sort": [87, 172, 323, 470, 619, 774], "std": [88, 173, 473, 557, 776], "sum": [89, 174, 241, 250, 324, 504, 559, 620, 809], "tail": [90, 175, 242, 254, 325, 505, 560, 621, 810], "take_everi": [91, 176, 507, 812], "to_arrow": [92, 816], "to_dict": [93, 94], "to_dummi": [95, 817], "to_numpi": [96, 820], "to_panda": [97, 821], "to_seri": 98, "to_struct": [99, 326, 622], "transpos": 100, "uniqu": [101, 177, 327, 512, 623, 824], "unnest": [102, 178], "unstack": 103, "upsampl": 104, "var": [105, 179, 516, 561, 827], "vstack": 106, "width": 107, "with_column": [108, 109, 180, 181], "with_row_count": [110, 183], "write_avro": 111, "write_csv": 112, "write_ipc": 113, "write_json": [114, 184], "write_ndjson": 115, "write_parquet": 116, "datatyp": 117, "date": [118, 284, 533], "datetim": [119, 534], "durat": [120, 535], "float32": 121, "float64": 122, "int16": 123, "int32": 124, "int64": 125, "int8": 126, "lazyfram": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 251, 252, 253, 254, 580], "cach": 127, "collect": 130, "describe_optimized_plan": 132, "describe_plan": 133, "fetch": 138, "first": [142, 231, 244, 311, 391, 538, 607], "from_json": 143, "inspect": [148, 397], "last": [152, 233, 245, 315, 413, 611], "map": [154, 420, 545], "profil": 161, "read_json": [163, 262], "show_graph": 170, "with_context": 182, "list": [185, 416, 543], "null": 186, "object": 187, "sqlcontext": [188, 189, 190], "execut": 188, "queri": 189, "regist": 190, "stringcach": [191, 577], "struct": [192, 501, 502, 558, 574, 805, 806, 807, 808, 841], "time": [193, 284, 575, 842], "uint16": 194, "uint32": 195, "uint64": 196, "uint8": 197, "unknown": 198, "utf8": 199, "align_fram": 200, "arg_wher": 201, "collect_al": 202, "concat": [203, 307, 474, 603, 778], "cut": 204, "date_rang": 205, "except": [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 285], "arrowerror": 206, "computeerror": 207, "duplicateerror": 208, "invalidoperationerror": 209, "nodataerror": 210, "norowsreturn": 211, "notfounderror": 212, "panicexcept": 213, "rowsexcept": 214, "schemaerror": 215, "shapeerror": 216, "toomanyrowsreturn": 217, "from_arrow": 218, "from_dict": [219, 220], "from_numpi": 221, "from_panda": 222, "from_record": 223, "get_dummi": 224, "get_idx_typ": 225, "intern": [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], "batch": 226, "batchedcsvread": [226, 579], "next_batch": 226, "agg": [227, 251], "agg_list": 228, "count": [230, 243, 337, 528], "pivotop": [243, 244, 245, 246, 247, 248, 249, 250], "lazygroupbi": [251, 252, 253, 254], "ones": 255, "read_avro": 256, "read_csv": 257, "read_csv_batch": 258, "read_excel": 259, "read_ipc": 260, "read_ipc_schema": 261, "read_ndjson": 263, "read_parquet": 264, "read_parquet_schema": 265, "read_sql": 266, "scan_csv": 267, "scan_d": 268, "scan_ipc": 269, "scan_ndjson": 270, "scan_parquet": 271, "show_vers": 272, "test": [273, 274, 275, 276, 277, 278, 844], "assert_frame_equ": 273, "assert_series_equ": 274, "parametr": [275, 276, 277, 278], "seri": [278, 575, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 837, 842], "threadpool_s": 279, "toggle_string_cach": 280, "zero": 281, "option": 282, "set": [282, 760], "unset": 282, "current": 282, "constructor": 283, "attribut": [283, 580, 831], "aggreg": [283, 286, 580, 581], "comput": [283, 567, 834], "convers": [283, 577, 580, 835], "descript": [283, 580, 836], "stat": [283, 580], "manipul": [283, 572, 580, 839], "miscellan": [283, 571, 577, 580, 838], "data": 284, "type": 284, "numer": 284, "nest": 284, "other": 284, "function": [284, 568, 577], "expr": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "ab": [287, 582], "agg_group": 288, "alia": [289, 583], "all": [290, 518, 584], "ani": [291, 519, 585], "append": [292, 586], "arcco": [294, 588], "arccosh": [295, 589], "arcsin": [296, 590], "arcsinh": [297, 591], "arctan": [298, 592], "arctanh": [299, 593], "arg_max": [300, 305, 594, 601], "arg_min": [301, 306, 595, 602], "arg_sort": [302, 596], "arg_uniqu": [303, 598], "argsort": [304, 599], "arr": [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623], "contain": [308, 475, 604, 779], "diff": [309, 344, 605, 642], "eval": [310, 606], "get": [312, 608], "length": [316, 483, 612, 787], "backward_fil": 328, "cast": [329, 624], "cat": [330, 625, 626], "set_ord": [330, 626], "ceil": [331, 627], "clip": [332, 630], "clip_max": [333, 631], "clip_min": [334, 632], "co": [335, 634], "cosh": [336, 635], "cumcount": 338, "cummax": [339, 636], "cummin": [340, 637], "cumprod": [341, 638], "cumsum": [342, 532, 639], "cumulative_ev": [343, 640], "dot": [345, 643], "drop_nan": [346, 644], "dt": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682], "cast_time_unit": [348, 647], "cast_time_zon": [349, 648], "dai": [350, 351, 649, 650], "epoch": [352, 651], "hour": [353, 354, 652, 653], "iso_year": [355, 654], "microsecond": [356, 357, 658, 659], "millisecond": [358, 359, 660, 661], "minut": [360, 361, 663, 664], "month": [362, 665], "nanosecond": [363, 364, 666, 667], "offset_bi": [365, 668], "ordinal_dai": [366, 669], "quarter": [367, 670], "round": [368, 457, 671, 756], "second": [369, 370, 672, 673], "strftime": [371, 674], "timestamp": [372, 675], "truncat": [373, 676], "tz_local": [374, 677], "week": [375, 678], "weekdai": [376, 679], "with_time_unit": [377, 680], "with_time_zon": [378, 681], "year": [379, 682], "entropi": [380, 684], "ewm_mean": [381, 686], "ewm_std": [382, 687], "ewm_var": [383, 688], "exclud": [384, 537], "exp": [385, 689], "extend_const": [387, 691], "flatten": 392, "floor": [393, 696], "forward_fil": 394, "hash": [395, 698], "is_between": 399, "is_finit": [401, 706], "is_first": [402, 707], "is_in": [403, 709], "is_infinit": [404, 710], "is_nan": [405, 711], "is_not": 406, "is_not_nan": [407, 712], "is_not_nul": [408, 713], "is_nul": [409, 714], "keep_nam": 411, "kurtosi": [412, 718], "len": [414, 719], "log": [417, 721], "log10": [418, 722], "lower_bound": 419, "map_alia": 421, "meta": [425, 426, 427, 428, 570], "output_nam": 425, "pop": 426, "root_nam": 427, "undo_alias": 428, "mode": [430, 727], "nan_max": [432, 731], "nan_min": [433, 732], "over": 435, "pct_chang": [436, 735], "pow": 437, "prefix": 438, "rank": [441, 740], "reinterpret": [443, 742], "repeat_bi": 444, "reshap": [445, 744], "rolling_appli": [447, 746], "rolling_max": [448, 747], "rolling_mean": [449, 748], "rolling_median": [450, 749], "rolling_min": [451, 750], "rolling_quantil": [452, 751], "rolling_skew": [453, 752], "rolling_std": [454, 753], "rolling_sum": [455, 754], "rolling_var": [456, 755], "search_sort": [459, 758], "set_sort": [460, 762], "shrink_dtyp": [463, 766], "shuffl": [464, 768], "sign": [465, 769], "sin": [466, 770], "sinh": [467, 771], "skew": [468, 772], "sort_bi": 471, "sqrt": [472, 775], "str": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804], "count_match": [476, 780], "decod": [477, 781], "encod": [478, 782], "ends_with": [479, 783], "extract": [480, 784], "extract_al": [481, 785], "json_path_match": [482, 786], "ljust": [484, 788], "lstrip": [485, 789], "n_char": [486, 790], "replace_al": [488, 792], "rjust": [489, 793], "rstrip": [490, 794], "split": [492, 796], "split_exact": [493, 797], "splitn": [494, 798], "starts_with": [495, 799], "strip": [496, 800], "strptime": [497, 801], "to_lowercas": [498, 802], "to_uppercas": [499, 803], "zfill": [500, 804], "field": [501, 805, 806], "rename_field": [502, 807], "suffix": 503, "take": [506, 811], "tan": [508, 813], "tanh": [509, 814], "to_phys": [510, 822], "top_k": [511, 823], "unique_count": [513, 825], "upper_bound": 514, "value_count": [515, 826], "where": 517, "arang": 521, "argsort_bi": 522, "avg": 523, "coalesc": 524, "col": 525, "concat_list": 526, "concat_str": 527, "cov": 529, "cumfold": 530, "cumreduc": 531, "element": 536, "format": 540, "group": 541, "lit": 544, "pearson_corr": 551, "reduc": 553, "repeat": 554, "spearman_rank_corr": 556, "when": 562, "arrai": [563, 830], "categori": [565, 833], "name": [566, 730], "express": 569, "string": [573, 840], "window": 576, "eager": 577, "parallel": 577, "api": 578, "refer": 578, "input": 579, "output": 579, "csv": 579, "feather": 579, "ipc": 579, "parquet": 579, "sql": [579, 843], "json": 579, "avro": 579, "excel": 579, "dataset": 579, "arg_tru": 597, "chunk_length": 628, "flag": 695, "has_valid": 697, "inner_dtyp": 700, "is_boolean": 702, "is_datelik": 703, "is_float": 708, "is_numer": 715, "is_utf8": 717, "new_from_index": 733, "peak_max": 736, "peak_min": 737, "series_equ": 759, "set_at_idx": 761, "to_fram": [808, 818], "time_unit": 815, "to_list": 819, "view": 828, "zip_with": 829, "method": 843, "assert": 844, "properti": 844, "base": 844, "strategi": 844, "helper": 844, "util": 845}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.LazyFrame.cache": [[127, "polars-lazyframe-cache"]], "polars.DataFrame.tail": [[90, "polars-dataframe-tail"]], "polars.Int8": [[126, "polars-int8"]], "polars.DataFrame.transpose": [[100, "polars-dataframe-transpose"]], "polars.DataFrame.with_column": [[108, "polars-dataframe-with-column"]], "polars.DataFrame.to_struct": [[99, "polars-dataframe-to-struct"]], "polars.DataFrame.sort": [[87, "polars-dataframe-sort"]], "polars.DataFrame.shift": [[83, "polars-dataframe-shift"]], "polars.DataFrame.to_dicts": [[94, "polars-dataframe-to-dicts"]], "polars.DataFrame.write_ndjson": [[115, "polars-dataframe-write-ndjson"]], "polars.LazyFrame.clone": [[129, "polars-lazyframe-clone"]], "polars.DataFrame.to_numpy": [[96, "polars-dataframe-to-numpy"]], "polars.DataFrame.pipe": [[68, "polars-dataframe-pipe"]], "polars.DataFrame.partition_by": [[67, "polars-dataframe-partition-by"]], "polars.DataFrame.to_dict": [[93, "polars-dataframe-to-dict"]], "polars.DataFrame.to_arrow": [[92, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_series": [[98, "polars-dataframe-to-series"]], "polars.DataFrame.upsample": [[104, "polars-dataframe-upsample"]], "polars.Date": [[118, "polars-date"]], "polars.Int64": [[125, "polars-int64"]], "polars.DataFrame.vstack": [[106, "polars-dataframe-vstack"]], "polars.DataFrame.unnest": [[102, "polars-dataframe-unnest"]], "polars.Duration": [[120, "polars-duration"]], "polars.Int16": [[123, "polars-int16"]], "polars.DataFrame.sample": [[79, "polars-dataframe-sample"]], "polars.DataFrame.shrink_to_fit": [[85, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.write_json": [[114, "polars-dataframe-write-json"]], "polars.DataFrame.with_columns": [[109, "polars-dataframe-with-columns"]], "polars.DataFrame.replace_at_idx": [[75, "polars-dataframe-replace-at-idx"]], "polars.Datetime": [[119, "polars-datetime"]], "polars.DataFrame.take_every": [[91, "polars-dataframe-take-every"]], "polars.DataFrame.width": [[107, "polars-dataframe-width"]], "polars.DataFrame.write_csv": [[112, "polars-dataframe-write-csv"]], "polars.DataFrame.null_count": [[66, "polars-dataframe-null-count"]], "polars.Float32": [[121, "polars-float32"]], "polars.DataFrame.write_avro": [[111, "polars-dataframe-write-avro"]], "polars.DataFrame.shift_and_fill": [[84, "polars-dataframe-shift-and-fill"]], "polars.Float64": [[122, "polars-float64"]], "polars.DataFrame.write_parquet": [[116, "polars-dataframe-write-parquet"]], "polars.DataFrame.replace": [[74, "polars-dataframe-replace"]], "polars.DataFrame.to_pandas": [[97, "polars-dataframe-to-pandas"]], "polars.DataFrame.unique": [[101, "polars-dataframe-unique"]], "polars.DataFrame.to_dummies": [[95, "polars-dataframe-to-dummies"]], "polars.DataFrame.unstack": [[103, "polars-dataframe-unstack"]], "polars.DataFrame.with_row_count": [[110, "polars-dataframe-with-row-count"]], "polars.DataFrame.shape": [[82, "polars-dataframe-shape"]], "polars.DataFrame.var": [[105, "polars-dataframe-var"]], "polars.DataFrame.schema": [[80, "polars-dataframe-schema"]], "polars.DataFrame.reverse": [[76, "polars-dataframe-reverse"]], "polars.DataFrame.select": [[81, "polars-dataframe-select"]], "polars.DataFrame.sum": [[89, "polars-dataframe-sum"]], "polars.DataFrame.write_ipc": [[113, "polars-dataframe-write-ipc"]], "polars.DataFrame.product": [[70, "polars-dataframe-product"]], "polars.DataFrame.slice": [[86, "polars-dataframe-slice"]], "polars.LazyFrame.cleared": [[128, "polars-lazyframe-cleared"]], "polars.DataType": [[117, "polars-datatype"]], "polars.DataFrame.quantile": [[71, "polars-dataframe-quantile"]], "polars.Int32": [[124, "polars-int32"]], "polars.DataFrame.pivot": [[69, "polars-dataframe-pivot"]], "polars.DataFrame.std": [[88, "polars-dataframe-std"]], "polars.DataFrame.rechunk": [[72, "polars-dataframe-rechunk"]], "polars.DataFrame.rows": [[78, "polars-dataframe-rows"]], "polars.DataFrame.n_unique": [[65, "polars-dataframe-n-unique"]], "polars.DataFrame.row": [[77, "polars-dataframe-row"]], "polars.DataFrame.rename": [[73, "polars-dataframe-rename"]], "Utils": [[845, "utils"]], "polars.Config.set_tbl_hide_dtype_separator": [[17, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.mean": [[60, "polars-dataframe-mean"]], "polars.Config.set_tbl_hide_column_names": [[15, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.drop_nulls": [[30, "polars-dataframe-drop-nulls"]], "polars.Config.set_fmt_str_lengths": [[8, "polars-config-set-fmt-str-lengths"]], "polars.Config.restore_defaults": [[5, "polars-config-restore-defaults"]], "polars.DataFrame.groupby_dynamic": [[44, "polars-dataframe-groupby-dynamic"]], "polars.Config.set_tbl_hide_column_data_types": [[14, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.is_duplicated": [[52, "polars-dataframe-is-duplicated"]], "polars.Config.save": [[6, "polars-config-save"]], "polars.DataFrame.columns": [[26, "polars-dataframe-columns"]], "polars.Config.set_tbl_width_chars": [[19, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.clone": [[25, "polars-dataframe-clone"]], "polars.Config.load": [[4, "polars-config-load"]], "polars.DataFrame.dtypes": [[31, "polars-dataframe-dtypes"]], "polars.Config.set_tbl_column_data_type_inline": [[11, "polars-config-set-tbl-column-data-type-inline"]], "polars.Categorical": [[3, "polars-categorical"]], "polars.DataFrame.max": [[59, "polars-dataframe-max"]], "polars.DataFrame.apply": [[23, "polars-dataframe-apply"]], "polars.DataFrame.find_idx_by_name": [[38, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.lazy": [[57, "polars-dataframe-lazy"]], "polars.DataFrame": [[22, "polars-dataframe"]], "polars.DataFrame.drop": [[28, "polars-dataframe-drop"]], "polars.DataFrame.get_columns": [[42, "polars-dataframe-get-columns"]], "polars.DataFrame.groupby": [[43, "polars-dataframe-groupby"]], "polars.Binary": [[1, "polars-binary"]], "polars.DataFrame.median": [[61, "polars-dataframe-median"]], "polars.Config.state": [[21, "polars-config-state"]], "polars.DataFrame.estimated_size": [[32, "polars-dataframe-estimated-size"]], "polars.Config.set_verbose": [[20, "polars-config-set-verbose"]], "polars.DataFrame.get_column": [[41, "polars-dataframe-get-column"]], "polars.DataFrame.join_asof": [[56, "polars-dataframe-join-asof"]], "polars.DataFrame.limit": [[58, "polars-dataframe-limit"]], "polars.Config.set_tbl_rows": [[18, "polars-config-set-tbl-rows"]], "polars.Boolean": [[2, "polars-boolean"]], "polars.Config.set_tbl_cell_alignment": [[9, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.is_unique": [[54, "polars-dataframe-is-unique"]], "polars.DataFrame.fill_null": [[36, "polars-dataframe-fill-null"]], "polars.DataFrame.n_chunks": [[64, "polars-dataframe-n-chunks"]], "polars.DataFrame.frame_equal": [[40, "polars-dataframe-frame-equal"]], "polars.Config.set_tbl_formatting": [[13, "polars-config-set-tbl-formatting"]], "polars.DataFrame.hash_rows": [[46, "polars-dataframe-hash-rows"]], "polars.DataFrame.min": [[63, "polars-dataframe-min"]], "polars.DataFrame.drop_in_place": [[29, "polars-dataframe-drop-in-place"]], "polars.DataFrame.head": [[47, "polars-dataframe-head"]], "polars.DataFrame.is_empty": [[53, "polars-dataframe-is-empty"]], "polars.DataFrame.melt": [[62, "polars-dataframe-melt"]], "polars.DataFrame.explode": [[33, "polars-dataframe-explode"]], "polars.DataFrame.fill_nan": [[35, "polars-dataframe-fill-nan"]], "polars.DataFrame.height": [[48, "polars-dataframe-height"]], "polars.DataFrame.describe": [[27, "polars-dataframe-describe"]], "polars.DataFrame.interpolate": [[51, "polars-dataframe-interpolate"]], "polars.DataFrame.join": [[55, "polars-dataframe-join"]], "polars.DataFrame.insert_at_idx": [[50, "polars-dataframe-insert-at-idx"]], "polars.Config.set_tbl_cols": [[10, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_hide_dataframe_shape": [[16, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.extend": [[34, "polars-dataframe-extend"]], "polars.DataFrame.fold": [[39, "polars-dataframe-fold"]], "polars.DataFrame.filter": [[37, "polars-dataframe-filter"]], "polars.Config.set_tbl_dataframe_shape_below": [[12, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.hstack": [[49, "polars-dataframe-hstack"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.DataFrame.cleared": [[24, "polars-dataframe-cleared"]], "polars.DataFrame.groupby_rolling": [[45, "polars-dataframe-groupby-rolling"]], "polars.Series.slice": [[773, "polars-series-slice"]], "polars.Series.pct_change": [[735, "polars-series-pct-change"]], "polars.Series.rename": [[743, "polars-series-rename"]], "polars.Series.log10": [[722, "polars-series-log10"]], "polars.Series.reinterpret": [[742, "polars-series-reinterpret"]], "polars.Series.rolling_quantile": [[751, "polars-series-rolling-quantile"]], "polars.Series.round": [[756, "polars-series-round"]], "polars.Series.shrink_to_fit": [[767, "polars-series-shrink-to-fit"]], "polars.Series.is_utf8": [[717, "polars-series-is-utf8"]], "polars.Series.rolling_mean": [[748, "polars-series-rolling-mean"]], "polars.Series.mode": [[727, "polars-series-mode"]], "polars.Series.rolling_max": [[747, "polars-series-rolling-max"]], "polars.Series.rank": [[740, "polars-series-rank"]], "polars.Series.n_unique": [[729, "polars-series-n-unique"]], "polars.Series.sample": [[757, "polars-series-sample"]], "polars.Series.len": [[719, "polars-series-len"]], "polars.Series.product": [[738, "polars-series-product"]], "polars.Series.kurtosis": [[718, "polars-series-kurtosis"]], "polars.Series.shift": [[764, "polars-series-shift"]], "polars.Series.peak_max": [[736, "polars-series-peak-max"]], "polars.Series.new_from_index": [[733, "polars-series-new-from-index"]], "polars.Series.set_sorted": [[762, "polars-series-set-sorted"]], "polars.Series.shape": [[763, "polars-series-shape"]], "polars.Series.shift_and_fill": [[765, "polars-series-shift-and-fill"]], "polars.Series.skew": [[772, "polars-series-skew"]], "polars.Series.rolling_sum": [[754, "polars-series-rolling-sum"]], "polars.Series.str.concat": [[778, "polars-series-str-concat"]], "polars.Series.reshape": [[744, "polars-series-reshape"]], "polars.Series.series_equal": [[759, "polars-series-series-equal"]], "polars.Series.sign": [[769, "polars-series-sign"]], "polars.Series.sin": [[770, "polars-series-sin"]], "polars.Series.median": [[725, "polars-series-median"]], "polars.Series.rolling_apply": [[746, "polars-series-rolling-apply"]], "polars.Series.rolling_min": [[750, "polars-series-rolling-min"]], "polars.Series.n_chunks": [[728, "polars-series-n-chunks"]], "polars.Series.mean": [[724, "polars-series-mean"]], "polars.Series.nan_max": [[731, "polars-series-nan-max"]], "polars.Series.log": [[721, "polars-series-log"]], "polars.Series.quantile": [[739, "polars-series-quantile"]], "polars.Series.nan_min": [[732, "polars-series-nan-min"]], "polars.Series.null_count": [[734, "polars-series-null-count"]], "polars.Series.rolling_skew": [[752, "polars-series-rolling-skew"]], "polars.Series.reverse": [[745, "polars-series-reverse"]], "polars.Series.is_unique": [[716, "polars-series-is-unique"]], "polars.Series.sqrt": [[775, "polars-series-sqrt"]], "polars.Series.sort": [[774, "polars-series-sort"]], "polars.Series.str": [[777, "polars-series-str"]], "polars.Series.is_numeric": [[715, "polars-series-is-numeric"]], "polars.Series.set_at_idx": [[761, "polars-series-set-at-idx"]], "polars.Series.sinh": [[771, "polars-series-sinh"]], "polars.Series.std": [[776, "polars-series-std"]], "polars.Series.min": [[726, "polars-series-min"]], "polars.Series.name": [[730, "polars-series-name"]], "polars.Series.shuffle": [[768, "polars-series-shuffle"]], "polars.Series.shrink_dtype": [[766, "polars-series-shrink-dtype"]], "polars.Series.max": [[723, "polars-series-max"]], "polars.Series.rolling_var": [[755, "polars-series-rolling-var"]], "polars.Series.search_sorted": [[758, "polars-series-search-sorted"]], "polars.Series.set": [[760, "polars-series-set"]], "polars.Series.str.contains": [[779, "polars-series-str-contains"]], "polars.Series.rolling_std": [[753, "polars-series-rolling-std"]], "polars.Series.peak_min": [[737, "polars-series-peak-min"]], "polars.Series.rolling_median": [[749, "polars-series-rolling-median"]], "polars.Series.limit": [[720, "polars-series-limit"]], "polars.Series.rechunk": [[741, "polars-series-rechunk"]], "polars.Series.unique": [[824, "polars-series-unique"]], "polars.Series.str.strip": [[800, "polars-series-str-strip"]], "Manipulation / selection": [[839, "manipulation-selection"], [580, "manipulation-selection"], [572, "manipulation-selection"], [283, "manipulation-selection"]], "polars.Series.struct.to_frame": [[808, "polars-series-struct-to-frame"]], "polars.Series.tanh": [[814, "polars-series-tanh"]], "Attributes": [[831, "attributes"], [580, "attributes"], [283, "attributes"]], "Computation": [[834, "computation"], [567, "computation"]], "polars.Series.to_arrow": [[816, "polars-series-to-arrow"]], "polars.Series.to_list": [[819, "polars-series-to-list"]], "polars.Series.tail": [[810, "polars-series-tail"]], "polars.Series.take": [[811, "polars-series-take"]], "polars.Series.sum": [[809, "polars-series-sum"]], "polars.Series.time_unit": [[815, "polars-series-time-unit"]], "polars.Series.str.lstrip": [[789, "polars-series-str-lstrip"]], "polars.Series.str.count_match": [[780, "polars-series-str-count-match"]], "Miscellaneous": [[838, "miscellaneous"], [580, "miscellaneous"], [571, "miscellaneous"], [577, "miscellaneous"], [283, "miscellaneous"]], "polars.Series.str.zfill": [[804, "polars-series-str-zfill"]], "polars.Series.zip_with": [[829, "polars-series-zip-with"]], "Descriptive": [[836, "descriptive"]], "Strings": [[840, "strings"], [573, "strings"]], "polars.Series.str.rstrip": [[794, "polars-series-str-rstrip"]], "SQL": [[843, "sql"], [579, "sql"]], "Methods": [[843, "methods"]], "polars.Series.str.encode": [[782, "polars-series-str-encode"]], "polars.Series.str.ljust": [[788, "polars-series-str-ljust"]], "Struct": [[841, "struct"], [574, "struct"]], "polars.Series.struct.fields": [[806, "polars-series-struct-fields"]], "polars.Series.str.lengths": [[787, "polars-series-str-lengths"]], "Series": [[837, "series"]], "polars.Series.unique_counts": [[825, "polars-series-unique-counts"]], "polars.Series.to_numpy": [[820, "polars-series-to-numpy"]], "polars.Series.struct.rename_fields": [[807, "polars-series-struct-rename-fields"]], "Conversion": [[835, "conversion"], [580, "conversion"], [577, "conversion"], [283, "conversion"]], "polars.Series.str.split_exact": [[797, "polars-series-str-split-exact"]], "polars.Series.tan": [[813, "polars-series-tan"]], "polars.Series.str.extract": [[784, "polars-series-str-extract"]], "polars.Series.str.to_uppercase": [[803, "polars-series-str-to-uppercase"]], "polars.Series.str.ends_with": [[783, "polars-series-str-ends-with"]], "polars.Series.take_every": [[812, "polars-series-take-every"]], "polars.Series.to_pandas": [[821, "polars-series-to-pandas"]], "polars.Series.str.n_chars": [[790, "polars-series-str-n-chars"]], "polars.Series.str.strptime": [[801, "polars-series-str-strptime"]], "polars.Series.to_physical": [[822, "polars-series-to-physical"]], "polars.Series.value_counts": [[826, "polars-series-value-counts"]], "polars.Series.str.extract_all": [[785, "polars-series-str-extract-all"]], "Categories": [[833, "categories"], [565, "categories"]], "polars.Series.str.slice": [[795, "polars-series-str-slice"]], "polars.Series.str.decode": [[781, "polars-series-str-decode"]], "polars.Series.str.json_path_match": [[786, "polars-series-str-json-path-match"]], "Boolean": [[832, "boolean"], [564, "boolean"]], "Testing": [[844, "testing"]], "Asserts": [[844, "asserts"]], "Property-based testing": [[844, "property-based-testing"]], "Strategies": [[844, "strategies"]], "Strategy helpers": [[844, "strategy-helpers"]], "polars.Series.str.starts_with": [[799, "polars-series-str-starts-with"]], "polars.Series.str.rjust": [[793, "polars-series-str-rjust"]], "polars.Series.str.splitn": [[798, "polars-series-str-splitn"]], "polars.Series.str.replace_all": [[792, "polars-series-str-replace-all"]], "polars.Series.str.replace": [[791, "polars-series-str-replace"]], "polars.Series.to_frame": [[818, "polars-series-to-frame"]], "polars.Series.var": [[827, "polars-series-var"]], "polars.Series.view": [[828, "polars-series-view"]], "Array": [[830, "array"], [563, "array"]], "polars.Series.str.to_lowercase": [[802, "polars-series-str-to-lowercase"]], "polars.Series.top_k": [[823, "polars-series-top-k"]], "Time series": [[842, "time-series"], [575, "time-series"]], "polars.Series.to_dummies": [[817, "polars-series-to-dummies"]], "polars.Series.str.split": [[796, "polars-series-str-split"]], "polars.Series.struct.field": [[805, "polars-series-struct-field"]], "polars.Series.ewm_var": [[688, "polars-series-ewm-var"]], "polars.Series.dt.epoch": [[651, "polars-series-dt-epoch"]], "polars.Series.dt.nanoseconds": [[667, "polars-series-dt-nanoseconds"]], "polars.Series.dt.offset_by": [[668, "polars-series-dt-offset-by"]], "polars.Series.is_float": [[708, "polars-series-is-float"]], "polars.Series.dt.max": [[655, "polars-series-dt-max"]], "polars.Series.dt.with_time_unit": [[680, "polars-series-dt-with-time-unit"]], "polars.Series.dt.median": [[657, "polars-series-dt-median"]], "polars.Series.is_not_null": [[713, "polars-series-is-not-null"]], "polars.Series.dt.minutes": [[664, "polars-series-dt-minutes"]], "polars.Series.dt.min": [[662, "polars-series-dt-min"]], "polars.Series.dt.with_time_zone": [[681, "polars-series-dt-with-time-zone"]], "polars.Series.dt.hour": [[652, "polars-series-dt-hour"]], "polars.Series.dt.minute": [[663, "polars-series-dt-minute"]], "polars.Series.is_datelike": [[703, "polars-series-is-datelike"]], "polars.Series.dt.week": [[678, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[679, "polars-series-dt-weekday"]], "polars.Series.is_not_nan": [[712, "polars-series-is-not-nan"]], "polars.Series.fill_null": [[693, "polars-series-fill-null"]], "polars.Series.estimated_size": [[685, "polars-series-estimated-size"]], "polars.Series.fill_nan": [[692, "polars-series-fill-nan"]], "polars.Series.is_nan": [[711, "polars-series-is-nan"]], "polars.Series.dt.month": [[665, "polars-series-dt-month"]], "polars.Series.dt.mean": [[656, "polars-series-dt-mean"]], "polars.Series.has_validity": [[697, "polars-series-has-validity"]], "polars.Series.ewm_mean": [[686, "polars-series-ewm-mean"]], "polars.Series.flags": [[695, "polars-series-flags"]], "polars.Series.extend_constant": [[691, "polars-series-extend-constant"]], "polars.Series.dt.ordinal_day": [[669, "polars-series-dt-ordinal-day"]], "polars.Series.entropy": [[684, "polars-series-entropy"]], "polars.Series.is_finite": [[706, "polars-series-is-finite"]], "polars.Series.floor": [[696, "polars-series-floor"]], "polars.Series.dt.hours": [[653, "polars-series-dt-hours"]], "polars.Series.dt.days": [[650, "polars-series-dt-days"]], "polars.Series.dt.iso_year": [[654, "polars-series-dt-iso-year"]], "polars.Series.dt.tz_localize": [[677, "polars-series-dt-tz-localize"]], "polars.Series.is_null": [[714, "polars-series-is-null"]], "polars.Series.dt.seconds": [[673, "polars-series-dt-seconds"]], "polars.Series.dt.second": [[672, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[674, "polars-series-dt-strftime"]], "polars.Series.dtype": [[683, "polars-series-dtype"]], "polars.Series.is_duplicated": [[704, "polars-series-is-duplicated"]], "polars.Series.dt.year": [[682, "polars-series-dt-year"]], "polars.Series.dt.quarter": [[670, "polars-series-dt-quarter"]], "polars.Series.head": [[699, "polars-series-head"]], "polars.Series.dt.milliseconds": [[661, "polars-series-dt-milliseconds"]], "polars.Series.dt.round": [[671, "polars-series-dt-round"]], "polars.Series.hash": [[698, "polars-series-hash"]], "polars.Series.is_boolean": [[702, "polars-series-is-boolean"]], "polars.Series.is_infinite": [[710, "polars-series-is-infinite"]], "polars.Series.ewm_std": [[687, "polars-series-ewm-std"]], "polars.Series.inner_dtype": [[700, "polars-series-inner-dtype"]], "polars.Series.dt.millisecond": [[660, "polars-series-dt-millisecond"]], "polars.Series.filter": [[694, "polars-series-filter"]], "polars.Series.is_empty": [[705, "polars-series-is-empty"]], "polars.Series.dt.timestamp": [[675, "polars-series-dt-timestamp"]], "polars.Series.interpolate": [[701, "polars-series-interpolate"]], "polars.Series.exp": [[689, "polars-series-exp"]], "polars.Series.is_in": [[709, "polars-series-is-in"]], "polars.Series.is_first": [[707, "polars-series-is-first"]], "polars.Series.dt.nanosecond": [[666, "polars-series-dt-nanosecond"]], "polars.Series.dt.microseconds": [[659, "polars-series-dt-microseconds"]], "polars.Series.dt.truncate": [[676, "polars-series-dt-truncate"]], "polars.Series.explode": [[690, "polars-series-explode"]], "polars.Series.dt.microsecond": [[658, "polars-series-dt-microsecond"]], "polars.Series.arr.sum": [[620, "polars-series-arr-sum"]], "polars.Series.arr.join": [[610, "polars-series-arr-join"]], "polars.Series.cummax": [[636, "polars-series-cummax"]], "polars.Series.cumulative_eval": [[640, "polars-series-cumulative-eval"]], "polars.Series.cat.set_ordering": [[626, "polars-series-cat-set-ordering"]], "polars.Series.apply": [[587, "polars-series-apply"]], "polars.Series.arcsin": [[590, "polars-series-arcsin"]], "polars.Series.dot": [[643, "polars-series-dot"]], "polars.Series.drop_nans": [[644, "polars-series-drop-nans"]], "polars.Series.diff": [[642, "polars-series-diff"]], "polars.Series.dt.cast_time_unit": [[647, "polars-series-dt-cast-time-unit"]], "polars.Series.arr.shift": [[617, "polars-series-arr-shift"]], "polars.Series.clip": [[630, "polars-series-clip"]], "polars.Series.arr": [[600, "polars-series-arr"]], "polars.Series.arr.eval": [[606, "polars-series-arr-eval"]], "polars.Series.arg_unique": [[598, "polars-series-arg-unique"]], "polars.Series.dt.cast_time_zone": [[648, "polars-series-dt-cast-time-zone"]], "polars.Series.arr.arg_min": [[602, "polars-series-arr-arg-min"]], "polars.Series.cat": [[625, "polars-series-cat"]], "polars.Series.cos": [[634, "polars-series-cos"]], "polars.Series.arr.mean": [[614, "polars-series-arr-mean"]], "polars.Series.arcsinh": [[591, "polars-series-arcsinh"]], "polars.Series.arr.get": [[608, "polars-series-arr-get"]], "polars.Series.dt": [[646, "polars-series-dt"]], "polars.Series.arr.diff": [[605, "polars-series-arr-diff"]], "polars.Series.arr.last": [[611, "polars-series-arr-last"]], "polars.Series.ceil": [[627, "polars-series-ceil"]], "polars.Series.cleared": [[629, "polars-series-cleared"]], "polars.Series.drop_nulls": [[645, "polars-series-drop-nulls"]], "polars.Series.argsort": [[599, "polars-series-argsort"]], "polars.Series.arr.min": [[615, "polars-series-arr-min"]], "polars.Series.arr.lengths": [[612, "polars-series-arr-lengths"]], "polars.Series.arr.to_struct": [[622, "polars-series-arr-to-struct"]], "polars.Series.arr.sort": [[619, "polars-series-arr-sort"]], "polars.Series.arr.slice": [[618, "polars-series-arr-slice"]], "polars.Series.cumprod": [[638, "polars-series-cumprod"]], "polars.Series.arr.concat": [[603, "polars-series-arr-concat"]], "polars.Series.arctanh": [[593, "polars-series-arctanh"]], "polars.Series.arg_true": [[597, "polars-series-arg-true"]], "polars.Series.arr.first": [[607, "polars-series-arr-first"]], "polars.Series.arccosh": [[589, "polars-series-arccosh"]], "polars.Series.any": [[585, "polars-series-any"]], "polars.Series.arr.reverse": [[616, "polars-series-arr-reverse"]], "polars.Series.dt.day": [[649, "polars-series-dt-day"]], "polars.Series.cummin": [[637, "polars-series-cummin"]], "polars.Series.arg_sort": [[596, "polars-series-arg-sort"]], "polars.Series.arr.head": [[609, "polars-series-arr-head"]], "polars.Series.chunk_lengths": [[628, "polars-series-chunk-lengths"]], "polars.Series.arr.arg_max": [[601, "polars-series-arr-arg-max"]], "polars.Series.clip_max": [[631, "polars-series-clip-max"]], "polars.Series.cumsum": [[639, "polars-series-cumsum"]], "polars.Series.clip_min": [[632, "polars-series-clip-min"]], "polars.Series.arccos": [[588, "polars-series-arccos"]], "polars.Series.append": [[586, "polars-series-append"]], "polars.Series.cosh": [[635, "polars-series-cosh"]], "polars.Series.arr.contains": [[604, "polars-series-arr-contains"]], "polars.Series.arg_min": [[595, "polars-series-arg-min"]], "polars.Series.arg_max": [[594, "polars-series-arg-max"]], "polars.Series.arr.tail": [[621, "polars-series-arr-tail"]], "polars.Series.arr.unique": [[623, "polars-series-arr-unique"]], "polars.Series.cast": [[624, "polars-series-cast"]], "polars.Series.clone": [[633, "polars-series-clone"]], "polars.Series.describe": [[641, "polars-series-describe"]], "polars.Series.arctan": [[592, "polars-series-arctan"]], "polars.Series.arr.max": [[613, "polars-series-arr-max"]], "polars.Expr.unique_counts": [[513, "polars-expr-unique-counts"]], "polars.all": [[518, "polars-all"]], "polars.Expr.str.strptime": [[497, "polars-expr-str-strptime"]], "polars.Expr.shuffle": [[464, "polars-expr-shuffle"]], "polars.Expr.str.slice": [[491, "polars-expr-str-slice"]], "polars.Expr.str.lstrip": [[485, "polars-expr-str-lstrip"]], "polars.Expr.tail": [[505, "polars-expr-tail"]], "polars.Expr.to_physical": [[510, "polars-expr-to-physical"]], "polars.Expr.where": [[517, "polars-expr-where"]], "polars.Expr.take": [[506, "polars-expr-take"]], "polars.Expr.str.extract": [[480, "polars-expr-str-extract"]], "polars.Expr.str.lengths": [[483, "polars-expr-str-lengths"]], "polars.Expr.str.rjust": [[489, "polars-expr-str-rjust"]], "polars.Expr.skew": [[468, "polars-expr-skew"]], "polars.Expr.sign": [[465, "polars-expr-sign"]], "polars.Expr.struct.rename_fields": [[502, "polars-expr-struct-rename-fields"]], "polars.Expr.str.decode": [[477, "polars-expr-str-decode"]], "polars.Expr.str.concat": [[474, "polars-expr-str-concat"]], "polars.Expr.search_sorted": [[459, "polars-expr-search-sorted"]], "polars.Expr.str.n_chars": [[486, "polars-expr-str-n-chars"]], "polars.Expr.take_every": [[507, "polars-expr-take-every"]], "polars.Expr.var": [[516, "polars-expr-var"]], "polars.Expr.rolling_var": [[456, "polars-expr-rolling-var"]], "polars.Expr.std": [[473, "polars-expr-std"]], "polars.Expr.str.zfill": [[500, "polars-expr-str-zfill"]], "polars.Expr.sinh": [[467, "polars-expr-sinh"]], "polars.Expr.set_sorted": [[460, "polars-expr-set-sorted"]], "polars.Expr.str.split_exact": [[493, "polars-expr-str-split-exact"]], "polars.any": [[519, "polars-any"]], "polars.Expr.sqrt": [[472, "polars-expr-sqrt"]], "polars.Expr.str.rstrip": [[490, "polars-expr-str-rstrip"]], "polars.Expr.str.count_match": [[476, "polars-expr-str-count-match"]], "polars.Expr.value_counts": [[515, "polars-expr-value-counts"]], "polars.Expr.sort": [[470, "polars-expr-sort"]], "polars.Expr.str.starts_with": [[495, "polars-expr-str-starts-with"]], "polars.Expr.top_k": [[511, "polars-expr-top-k"]], "polars.Expr.rolling_sum": [[455, "polars-expr-rolling-sum"]], "polars.Expr.str.to_lowercase": [[498, "polars-expr-str-to-lowercase"]], "polars.Expr.str.replace": [[487, "polars-expr-str-replace"]], "polars.Expr.str.strip": [[496, "polars-expr-str-strip"]], "polars.Expr.str.ljust": [[484, "polars-expr-str-ljust"]], "polars.Expr.upper_bound": [[514, "polars-expr-upper-bound"]], "polars.Expr.sum": [[504, "polars-expr-sum"]], "polars.Expr.str.contains": [[475, "polars-expr-str-contains"]], "polars.Expr.sort_by": [[471, "polars-expr-sort-by"]], "polars.Expr.unique": [[512, "polars-expr-unique"]], "polars.Expr.str.extract_all": [[481, "polars-expr-str-extract-all"]], "polars.Expr.str.to_uppercase": [[499, "polars-expr-str-to-uppercase"]], "polars.Expr.tan": [[508, "polars-expr-tan"]], "polars.Expr.sin": [[466, "polars-expr-sin"]], "polars.Expr.str.split": [[492, "polars-expr-str-split"]], "polars.Expr.shift_and_fill": [[462, "polars-expr-shift-and-fill"]], "polars.Expr.shrink_dtype": [[463, "polars-expr-shrink-dtype"]], "polars.Expr.str.replace_all": [[488, "polars-expr-str-replace-all"]], "polars.Expr.suffix": [[503, "polars-expr-suffix"]], "polars.Expr.round": [[457, "polars-expr-round"]], "polars.Expr.sample": [[458, "polars-expr-sample"]], "polars.Expr.shift": [[461, "polars-expr-shift"]], "polars.Expr.slice": [[469, "polars-expr-slice"]], "polars.Expr.tanh": [[509, "polars-expr-tanh"]], "polars.Expr.str.ends_with": [[479, "polars-expr-str-ends-with"]], "polars.Expr.str.json_path_match": [[482, "polars-expr-str-json-path-match"]], "polars.Expr.struct.field": [[501, "polars-expr-struct-field"]], "polars.Expr.str.encode": [[478, "polars-expr-str-encode"]], "polars.Expr.str.splitn": [[494, "polars-expr-str-splitn"]], "polars.Expr.map": [[420, "polars-expr-map"]], "polars.Expr.reinterpret": [[443, "polars-expr-reinterpret"]], "polars.Expr.head": [[396, "polars-expr-head"]], "polars.Expr.is_duplicated": [[400, "polars-expr-is-duplicated"]], "polars.Expr.max": [[422, "polars-expr-max"]], "polars.Expr.is_in": [[403, "polars-expr-is-in"]], "polars.Expr.meta.root_names": [[427, "polars-expr-meta-root-names"]], "polars.Expr.is_null": [[409, "polars-expr-is-null"]], "polars.Expr.is_not_nan": [[407, "polars-expr-is-not-nan"]], "polars.Expr.is_not": [[406, "polars-expr-is-not"]], "polars.Expr.keep_name": [[411, "polars-expr-keep-name"]], "polars.Expr.hash": [[395, "polars-expr-hash"]], "polars.Expr.null_count": [[434, "polars-expr-null-count"]], "polars.Expr.is_nan": [[405, "polars-expr-is-nan"]], "polars.Expr.is_infinite": [[404, "polars-expr-is-infinite"]], "polars.Expr.forward_fill": [[394, "polars-expr-forward-fill"]], "polars.Expr.is_first": [[402, "polars-expr-is-first"]], "polars.Expr.list": [[416, "polars-expr-list"]], "polars.Expr.min": [[429, "polars-expr-min"]], "polars.Expr.rolling_apply": [[447, "polars-expr-rolling-apply"]], "polars.Expr.rolling_median": [[450, "polars-expr-rolling-median"]], "polars.Expr.floor": [[393, "polars-expr-floor"]], "polars.Expr.rolling_mean": [[449, "polars-expr-rolling-mean"]], "polars.Expr.map_alias": [[421, "polars-expr-map-alias"]], "polars.Expr.mean": [[423, "polars-expr-mean"]], "polars.Expr.reverse": [[446, "polars-expr-reverse"]], "polars.Expr.rolling_max": [[448, "polars-expr-rolling-max"]], "polars.Expr.rolling_quantile": [[452, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_skew": [[453, "polars-expr-rolling-skew"]], "polars.Expr.repeat_by": [[444, "polars-expr-repeat-by"]], "polars.Expr.log": [[417, "polars-expr-log"]], "polars.Expr.last": [[413, "polars-expr-last"]], "polars.Expr.log10": [[418, "polars-expr-log10"]], "polars.Expr.quantile": [[440, "polars-expr-quantile"]], "polars.Expr.prefix": [[438, "polars-expr-prefix"]], "polars.Expr.meta.undo_aliases": [[428, "polars-expr-meta-undo-aliases"]], "polars.Expr.is_between": [[399, "polars-expr-is-between"]], "polars.Expr.over": [[435, "polars-expr-over"]], "polars.Expr.inspect": [[397, "polars-expr-inspect"]], "polars.Expr.first": [[391, "polars-expr-first"]], "polars.Expr.kurtosis": [[412, "polars-expr-kurtosis"]], "polars.Expr.filter": [[390, "polars-expr-filter"]], "polars.Expr.len": [[414, "polars-expr-len"]], "polars.Expr.limit": [[415, "polars-expr-limit"]], "polars.Expr.pow": [[437, "polars-expr-pow"]], "polars.Expr.interpolate": [[398, "polars-expr-interpolate"]], "polars.Expr.reshape": [[445, "polars-expr-reshape"]], "polars.Expr.rechunk": [[442, "polars-expr-rechunk"]], "polars.Expr.lower_bound": [[419, "polars-expr-lower-bound"]], "polars.Expr.flatten": [[392, "polars-expr-flatten"]], "polars.Expr.is_finite": [[401, "polars-expr-is-finite"]], "polars.Expr.is_not_null": [[408, "polars-expr-is-not-null"]], "polars.Expr.pct_change": [[436, "polars-expr-pct-change"]], "polars.Expr.rank": [[441, "polars-expr-rank"]], "polars.Expr.rolling_std": [[454, "polars-expr-rolling-std"]], "polars.Expr.mode": [[430, "polars-expr-mode"]], "polars.Expr.rolling_min": [[451, "polars-expr-rolling-min"]], "polars.Expr.median": [[424, "polars-expr-median"]], "polars.Expr.meta.pop": [[426, "polars-expr-meta-pop"]], "polars.Expr.meta.output_name": [[425, "polars-expr-meta-output-name"]], "polars.Expr.nan_max": [[432, "polars-expr-nan-max"]], "polars.Expr.product": [[439, "polars-expr-product"]], "polars.Expr.nan_min": [[433, "polars-expr-nan-min"]], "polars.Expr.is_unique": [[410, "polars-expr-is-unique"]], "polars.Expr.n_unique": [[431, "polars-expr-n-unique"]], "polars.max": [[546, "polars-max"]], "polars.arange": [[521, "polars-arange"]], "polars.min": [[549, "polars-min"]], "Window": [[576, "window"]], "LazyFrame": [[580, "lazyframe"]], "Aggregation": [[580, "aggregation"], [581, "aggregation"], [286, "aggregation"], [283, "aggregation"]], "Apply": [[580, "apply"], [283, "apply"]], "Descriptive stats": [[580, "descriptive-stats"], [283, "descriptive-stats"]], "GroupBy": [[580, "groupby"], [283, "groupby"]], "polars.std": [[557, "polars-std"]], "polars.reduce": [[553, "polars-reduce"]], "Expressions": [[569, "expressions"]], "polars.col": [[525, "polars-col"]], "polars.sum": [[559, "polars-sum"]], "polars.fold": [[539, "polars-fold"]], "polars.Series.abs": [[582, "polars-series-abs"]], "Meta": [[570, "meta"]], "polars.struct": [[558, "polars-struct"]], "polars.element": [[536, "polars-element"]], "polars.cumreduce": [[531, "polars-cumreduce"]], "polars.exclude": [[537, "polars-exclude"]], "polars.tail": [[560, "polars-tail"]], "polars.var": [[561, "polars-var"]], "polars.datetime": [[534, "polars-datetime"]], "polars.median": [[548, "polars-median"]], "Input/output": [[579, "input-output"]], "CSV": [[579, "csv"]], "Feather/ IPC": [[579, "feather-ipc"]], "Parquet": [[579, "parquet"]], "JSON": [[579, "json"]], "AVRO": [[579, "avro"]], "Excel": [[579, "excel"]], "Datasets": [[579, "datasets"]], "BatchedCsvReader": [[579, "batchedcsvreader"]], "polars.head": [[542, "polars-head"]], "polars.duration": [[535, "polars-duration"]], "polars.when": [[562, "polars-when"]], "polars.Series.all": [[584, "polars-series-all"]], "Functions": [[568, "functions"], [577, "functions"], [284, "functions"]], "polars.groups": [[541, "polars-groups"]], "polars.cumfold": [[530, "polars-cumfold"]], "polars.map": [[545, "polars-map"]], "polars.mean": [[547, "polars-mean"]], "polars.pearson_corr": [[551, "polars-pearson-corr"]], "polars.format": [[540, "polars-format"]], "polars.quantile": [[552, "polars-quantile"]], "polars.argsort_by": [[522, "polars-argsort-by"]], "polars.Series.alias": [[583, "polars-series-alias"]], "polars.repeat": [[554, "polars-repeat"]], "polars.concat_list": [[526, "polars-concat-list"]], "polars.first": [[538, "polars-first"]], "polars.spearman_rank_corr": [[556, "polars-spearman-rank-corr"]], "polars.cumsum": [[532, "polars-cumsum"]], "polars.select": [[555, "polars-select"]], "API reference": [[578, "api-reference"]], "polars.date": [[533, "polars-date"]], "polars.cov": [[529, "polars-cov"]], "polars.list": [[543, "polars-list"]], "polars.avg": [[523, "polars-avg"]], "Eager/Lazy functions": [[577, "eager-lazy-functions"]], "Parallelization": [[577, "parallelization"]], "StringCache": [[577, "stringcache"]], "polars.n_unique": [[550, "polars-n-unique"]], "polars.lit": [[544, "polars-lit"]], "polars.apply": [[520, "polars-apply"]], "polars.concat_str": [[527, "polars-concat-str"]], "polars.count": [[528, "polars-count"]], "Columns / names": [[566, "columns-names"]], "polars.coalesce": [[524, "polars-coalesce"]], "polars.Expr.drop_nulls": [[347, "polars-expr-drop-nulls"]], "polars.Expr.dt.cast_time_unit": [[348, "polars-expr-dt-cast-time-unit"]], "polars.Expr.clip_min": [[334, "polars-expr-clip-min"]], "polars.Expr.ewm_std": [[382, "polars-expr-ewm-std"]], "polars.Expr.dt.weekday": [[376, "polars-expr-dt-weekday"]], "polars.Expr.backward_fill": [[328, "polars-expr-backward-fill"]], "polars.Expr.dt.hours": [[354, "polars-expr-dt-hours"]], "polars.Expr.dt.microsecond": [[356, "polars-expr-dt-microsecond"]], "polars.Expr.cosh": [[336, "polars-expr-cosh"]], "polars.Expr.dt.minute": [[360, "polars-expr-dt-minute"]], "polars.Expr.dt.ordinal_day": [[366, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.with_time_unit": [[377, "polars-expr-dt-with-time-unit"]], "polars.Expr.exclude": [[384, "polars-expr-exclude"]], "polars.Expr.dt.offset_by": [[365, "polars-expr-dt-offset-by"]], "polars.Expr.cumulative_eval": [[343, "polars-expr-cumulative-eval"]], "polars.Expr.cumsum": [[342, "polars-expr-cumsum"]], "polars.Expr.cos": [[335, "polars-expr-cos"]], "polars.Expr.dt.round": [[368, "polars-expr-dt-round"]], "polars.Expr.clip_max": [[333, "polars-expr-clip-max"]], "polars.Expr.dt.hour": [[353, "polars-expr-dt-hour"]], "polars.Expr.count": [[337, "polars-expr-count"]], "polars.Expr.cat.set_ordering": [[330, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.month": [[362, "polars-expr-dt-month"]], "polars.Expr.dt.millisecond": [[358, "polars-expr-dt-millisecond"]], "polars.Expr.extend_constant": [[387, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[388, "polars-expr-fill-nan"]], "polars.Expr.dt.tz_localize": [[374, "polars-expr-dt-tz-localize"]], "polars.Expr.cast": [[329, "polars-expr-cast"]], "polars.Expr.entropy": [[380, "polars-expr-entropy"]], "polars.Expr.arr.tail": [[325, "polars-expr-arr-tail"]], "polars.Expr.dt.minutes": [[361, "polars-expr-dt-minutes"]], "polars.Expr.dt.year": [[379, "polars-expr-dt-year"]], "polars.Expr.diff": [[344, "polars-expr-diff"]], "polars.Expr.arr.unique": [[327, "polars-expr-arr-unique"]], "polars.Expr.explode": [[386, "polars-expr-explode"]], "polars.Expr.dt.truncate": [[373, "polars-expr-dt-truncate"]], "polars.Expr.dt.cast_time_zone": [[349, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.nanosecond": [[363, "polars-expr-dt-nanosecond"]], "polars.Expr.exp": [[385, "polars-expr-exp"]], "polars.Expr.cumcount": [[338, "polars-expr-cumcount"]], "polars.Expr.dt.second": [[369, "polars-expr-dt-second"]], "polars.Expr.ewm_var": [[383, "polars-expr-ewm-var"]], "polars.Expr.dt.strftime": [[371, "polars-expr-dt-strftime"]], "polars.Expr.dt.days": [[351, "polars-expr-dt-days"]], "polars.Expr.cummin": [[340, "polars-expr-cummin"]], "polars.Expr.dt.day": [[350, "polars-expr-dt-day"]], "polars.Expr.ceil": [[331, "polars-expr-ceil"]], "polars.Expr.dt.iso_year": [[355, "polars-expr-dt-iso-year"]], "polars.Expr.dt.epoch": [[352, "polars-expr-dt-epoch"]], "polars.Expr.drop_nans": [[346, "polars-expr-drop-nans"]], "polars.Expr.cummax": [[339, "polars-expr-cummax"]], "polars.Expr.dt.week": [[375, "polars-expr-dt-week"]], "polars.Expr.dt.milliseconds": [[359, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.quarter": [[367, "polars-expr-dt-quarter"]], "polars.Expr.ewm_mean": [[381, "polars-expr-ewm-mean"]], "polars.Expr.fill_null": [[389, "polars-expr-fill-null"]], "polars.Expr.cumprod": [[341, "polars-expr-cumprod"]], "polars.Expr.clip": [[332, "polars-expr-clip"]], "polars.Expr.dt.nanoseconds": [[364, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.microseconds": [[357, "polars-expr-dt-microseconds"]], "polars.Expr.dt.seconds": [[370, "polars-expr-dt-seconds"]], "polars.Expr.dt.with_time_zone": [[378, "polars-expr-dt-with-time-zone"]], "polars.Expr.dot": [[345, "polars-expr-dot"]], "polars.Expr.dt.timestamp": [[372, "polars-expr-dt-timestamp"]], "polars.Expr.arr.to_struct": [[326, "polars-expr-arr-to-struct"]], "polars.exceptions.NotFoundError": [[212, "polars-exceptions-notfounderror"]], "polars.internals.dataframe.pivot.PivotOps.max": [[246, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[229, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[254, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.internals.dataframe.groupby.GroupBy.median": [[236, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.pivot.PivotOps.count": [[243, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.groupby.GroupBy.last": [[233, "polars-internals-dataframe-groupby-groupby-last"]], "polars.cut": [[204, "polars-cut"]], "polars.from_arrow": [[218, "polars-from-arrow"]], "polars.ones": [[255, "polars-ones"]], "polars.from_pandas": [[222, "polars-from-pandas"]], "polars.exceptions.NoRowsReturned": [[211, "polars-exceptions-norowsreturned"]], "polars.exceptions.RowsException": [[214, "polars-exceptions-rowsexception"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[238, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[251, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[247, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.UInt8": [[197, "polars-uint8"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[228, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[239, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[250, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.exceptions.TooManyRowsReturned": [[217, "polars-exceptions-toomanyrowsreturned"]], "polars.internals.dataframe.pivot.PivotOps.last": [[245, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.from_dict": [[219, "polars-from-dict"]], "polars.internals.dataframe.groupby.GroupBy.head": [[232, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[240, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[253, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[226, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[227, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.collect_all": [[202, "polars-collect-all"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[242, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.internals.dataframe.pivot.PivotOps.median": [[248, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.get_dummies": [[224, "polars-get-dummies"]], "polars.exceptions.InvalidOperationError": [[209, "polars-exceptions-invalidoperationerror"]], "polars.internals.dataframe.groupby.GroupBy.first": [[231, "polars-internals-dataframe-groupby-groupby-first"]], "polars.exceptions.PanicException": [[213, "polars-exceptions-panicexception"]], "polars.internals.dataframe.pivot.PivotOps.min": [[249, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.read_csv": [[257, "polars-read-csv"]], "polars.exceptions.NoDataError": [[210, "polars-exceptions-nodataerror"]], "polars.from_dicts": [[220, "polars-from-dicts"]], "polars.internals.dataframe.groupby.GroupBy.count": [[230, "polars-internals-dataframe-groupby-groupby-count"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[252, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.align_frames": [[200, "polars-align-frames"]], "polars.internals.dataframe.groupby.GroupBy.min": [[237, "polars-internals-dataframe-groupby-groupby-min"]], "polars.read_csv_batched": [[258, "polars-read-csv-batched"]], "polars.arg_where": [[201, "polars-arg-where"]], "polars.UInt32": [[195, "polars-uint32"]], "polars.concat": [[203, "polars-concat"]], "polars.from_records": [[223, "polars-from-records"]], "polars.Utf8": [[199, "polars-utf8"]], "polars.exceptions.DuplicateError": [[208, "polars-exceptions-duplicateerror"]], "polars.Unknown": [[198, "polars-unknown"]], "polars.exceptions.ComputeError": [[207, "polars-exceptions-computeerror"]], "polars.exceptions.SchemaError": [[215, "polars-exceptions-schemaerror"]], "polars.read_avro": [[256, "polars-read-avro"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[241, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.internals.dataframe.pivot.PivotOps.first": [[244, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.UInt64": [[196, "polars-uint64"]], "polars.date_range": [[205, "polars-date-range"]], "polars.from_numpy": [[221, "polars-from-numpy"]], "polars.get_idx_type": [[225, "polars-get-idx-type"]], "polars.exceptions.ShapeError": [[216, "polars-exceptions-shapeerror"]], "polars.internals.dataframe.groupby.GroupBy.max": [[234, "polars-internals-dataframe-groupby-groupby-max"]], "polars.read_excel": [[259, "polars-read-excel"]], "polars.exceptions.ArrowError": [[206, "polars-exceptions-arrowerror"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[235, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.Expr.arr.join": [[314, "polars-expr-arr-join"]], "polars.Expr.arcsinh": [[297, "polars-expr-arcsinh"]], "polars.testing.parametric.column": [[275, "polars-testing-parametric-column"]], "polars.threadpool_size": [[279, "polars-threadpool-size"]], "polars.scan_ndjson": [[270, "polars-scan-ndjson"]], "polars.scan_ds": [[268, "polars-scan-ds"]], "polars.read_json": [[262, "polars-read-json"]], "polars.show_versions": [[272, "polars-show-versions"]], "polars.Expr.agg_groups": [[288, "polars-expr-agg-groups"]], "polars.Expr.arr.head": [[313, "polars-expr-arr-head"]], "polars.Expr.abs": [[287, "polars-expr-abs"]], "polars.Expr.any": [[291, "polars-expr-any"]], "polars.read_ipc_schema": [[261, "polars-read-ipc-schema"]], "polars.Expr.arr.last": [[315, "polars-expr-arr-last"]], "polars.Expr.arr.contains": [[308, "polars-expr-arr-contains"]], "polars.Expr.arr.get": [[312, "polars-expr-arr-get"]], "polars.Expr.arr.shift": [[321, "polars-expr-arr-shift"]], "polars.read_sql": [[266, "polars-read-sql"]], "polars.Expr.arr.sum": [[324, "polars-expr-arr-sum"]], "polars.Expr.arr.first": [[311, "polars-expr-arr-first"]], "polars.Expr.arr.arg_min": [[306, "polars-expr-arr-arg-min"]], "polars.scan_ipc": [[269, "polars-scan-ipc"]], "polars.Expr.arctanh": [[299, "polars-expr-arctanh"]], "polars.Expr.arcsin": [[296, "polars-expr-arcsin"]], "polars.Expr.arccos": [[294, "polars-expr-arccos"]], "polars.Expr.arr.diff": [[309, "polars-expr-arr-diff"]], "polars.Expr.arr.lengths": [[316, "polars-expr-arr-lengths"]], "polars.Expr.argsort": [[304, "polars-expr-argsort"]], "Config": [[282, "config"]], "Config options (set/unset)": [[282, "config-options-set-unset"]], "Config load, save, and current state": [[282, "config-load-save-and-current-state"]], "polars.Expr.arr.concat": [[307, "polars-expr-arr-concat"]], "DataFrame": [[283, "dataframe"]], "Constructor": [[283, "constructor"]], "Computations": [[283, "computations"]], "Pivot": [[283, "pivot"]], "polars.Expr.arr.mean": [[318, "polars-expr-arr-mean"]], "polars.toggle_string_cache": [[280, "polars-toggle-string-cache"]], "polars.Expr.arctan": [[298, "polars-expr-arctan"]], "polars.Expr.arg_max": [[300, "polars-expr-arg-max"]], "polars.Expr.arr.eval": [[310, "polars-expr-arr-eval"]], "Data Types": [[284, "data-types"]], "Numeric": [[284, "numeric"]], "Date / Time": [[284, "date-time"]], "Nested": [[284, "nested"]], "Other": [[284, "other"]], "polars.read_ndjson": [[263, "polars-read-ndjson"]], "polars.Expr.arg_sort": [[302, "polars-expr-arg-sort"]], "polars.read_ipc": [[260, "polars-read-ipc"]], "polars.testing.parametric.dataframes": [[277, "polars-testing-parametric-dataframes"]], "polars.scan_csv": [[267, "polars-scan-csv"]], "polars.Expr.arr.min": [[319, "polars-expr-arr-min"]], "polars.Expr.arr.arg_max": [[305, "polars-expr-arr-arg-max"]], "polars.testing.parametric.series": [[278, "polars-testing-parametric-series"]], "polars.Expr.arr.sort": [[323, "polars-expr-arr-sort"]], "polars.read_parquet_schema": [[265, "polars-read-parquet-schema"]], "polars.Expr.alias": [[289, "polars-expr-alias"]], "polars.Expr.apply": [[293, "polars-expr-apply"]], "polars.Expr.arccosh": [[295, "polars-expr-arccosh"]], "polars.Expr.append": [[292, "polars-expr-append"]], "polars.Expr.arg_min": [[301, "polars-expr-arg-min"]], "polars.Expr.arg_unique": [[303, "polars-expr-arg-unique"]], "polars.Expr.arr.max": [[317, "polars-expr-arr-max"]], "polars.testing.assert_series_equal": [[274, "polars-testing-assert-series-equal"]], "polars.Expr.all": [[290, "polars-expr-all"]], "polars.read_parquet": [[264, "polars-read-parquet"]], "polars.testing.assert_frame_equal": [[273, "polars-testing-assert-frame-equal"]], "polars.zeros": [[281, "polars-zeros"]], "polars.testing.parametric.columns": [[276, "polars-testing-parametric-columns"]], "Exceptions": [[285, "exceptions"]], "polars.Expr.arr.reverse": [[320, "polars-expr-arr-reverse"]], "polars.Expr.arr.slice": [[322, "polars-expr-arr-slice"]], "polars.scan_parquet": [[271, "polars-scan-parquet"]], "polars.LazyFrame.describe_optimized_plan": [[132, "polars-lazyframe-describe-optimized-plan"]], "polars.SQLContext.execute": [[188, "polars-sqlcontext-execute"]], "polars.LazyFrame.rename": [[164, "polars-lazyframe-rename"]], "polars.LazyFrame.shift_and_fill": [[169, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.fill_nan": [[139, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.min": [[159, "polars-lazyframe-min"]], "polars.LazyFrame.reverse": [[165, "polars-lazyframe-reverse"]], "polars.LazyFrame.join_asof": [[151, "polars-lazyframe-join-asof"]], "polars.LazyFrame.limit": [[153, "polars-lazyframe-limit"]], "polars.LazyFrame.fetch": [[138, "polars-lazyframe-fetch"]], "polars.LazyFrame.median": [[157, "polars-lazyframe-median"]], "polars.SQLContext.register": [[190, "polars-sqlcontext-register"]], "polars.LazyFrame.with_columns": [[181, "polars-lazyframe-with-columns"]], "polars.LazyFrame.head": [[147, "polars-lazyframe-head"]], "polars.LazyFrame.collect": [[130, "polars-lazyframe-collect"]], "polars.LazyFrame.tail": [[175, "polars-lazyframe-tail"]], "polars.LazyFrame.describe_plan": [[133, "polars-lazyframe-describe-plan"]], "polars.SQLContext.query": [[189, "polars-sqlcontext-query"]], "polars.LazyFrame.std": [[173, "polars-lazyframe-std"]], "polars.LazyFrame.select": [[167, "polars-lazyframe-select"]], "polars.LazyFrame.groupby_dynamic": [[145, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.max": [[155, "polars-lazyframe-max"]], "polars.Time": [[193, "polars-time"]], "polars.LazyFrame.pipe": [[160, "polars-lazyframe-pipe"]], "polars.LazyFrame.interpolate": [[149, "polars-lazyframe-interpolate"]], "polars.LazyFrame.sort": [[172, "polars-lazyframe-sort"]], "polars.LazyFrame.profile": [[161, "polars-lazyframe-profile"]], "polars.LazyFrame.show_graph": [[170, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sum": [[174, "polars-lazyframe-sum"]], "polars.LazyFrame.var": [[179, "polars-lazyframe-var"]], "polars.LazyFrame.drop_nulls": [[135, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.shift": [[168, "polars-lazyframe-shift"]], "polars.LazyFrame.groupby_rolling": [[146, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.drop": [[134, "polars-lazyframe-drop"]], "polars.List": [[185, "polars-list"]], "polars.LazyFrame.slice": [[171, "polars-lazyframe-slice"]], "polars.LazyFrame.unnest": [[178, "polars-lazyframe-unnest"]], "polars.LazyFrame.columns": [[131, "polars-lazyframe-columns"]], "polars.LazyFrame.schema": [[166, "polars-lazyframe-schema"]], "polars.LazyFrame.groupby": [[144, "polars-lazyframe-groupby"]], "polars.LazyFrame.explode": [[137, "polars-lazyframe-explode"]], "polars.LazyFrame.with_column": [[180, "polars-lazyframe-with-column"]], "polars.LazyFrame.take_every": [[176, "polars-lazyframe-take-every"]], "polars.LazyFrame.from_json": [[143, "polars-lazyframe-from-json"]], "polars.LazyFrame.quantile": [[162, "polars-lazyframe-quantile"]], "polars.Struct": [[192, "polars-struct"]], "polars.LazyFrame.unique": [[177, "polars-lazyframe-unique"]], "polars.LazyFrame.melt": [[158, "polars-lazyframe-melt"]], "polars.LazyFrame.write_json": [[184, "polars-lazyframe-write-json"]], "polars.LazyFrame.first": [[142, "polars-lazyframe-first"]], "polars.LazyFrame.inspect": [[148, "polars-lazyframe-inspect"]], "polars.Null": [[186, "polars-null"]], "polars.LazyFrame.with_context": [[182, "polars-lazyframe-with-context"]], "polars.LazyFrame.join": [[150, "polars-lazyframe-join"]], "polars.LazyFrame.map": [[154, "polars-lazyframe-map"]], "polars.LazyFrame.with_row_count": [[183, "polars-lazyframe-with-row-count"]], "polars.Object": [[187, "polars-object"]], "polars.StringCache": [[191, "polars-stringcache"]], "polars.LazyFrame.mean": [[156, "polars-lazyframe-mean"]], "polars.LazyFrame.read_json": [[163, "polars-lazyframe-read-json"]], "polars.LazyFrame.dtypes": [[136, "polars-lazyframe-dtypes"]], "polars.LazyFrame.filter": [[141, "polars-lazyframe-filter"]], "polars.UInt16": [[194, "polars-uint16"]], "polars.LazyFrame.last": [[152, "polars-lazyframe-last"]], "polars.LazyFrame.fill_null": [[140, "polars-lazyframe-fill-null"]]}, "indexentries": {"binary (class in polars)": [[1, "polars.Binary"]], "__init__() (polars.binary method)": [[1, "polars.Binary.__init__"]], "boolean (class in polars)": [[2, "polars.Boolean"]], "__init__() (polars.boolean method)": [[2, "polars.Boolean.__init__"]], "categorical (class in polars)": [[3, "polars.Categorical"]], "__init__() (polars.categorical method)": [[3, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[4, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[5, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[6, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[8, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[9, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[10, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[11, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[12, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[13, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[14, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[18, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[19, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[20, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[21, "polars.Config.state"]], "dataframe (class in polars)": [[22, "polars.DataFrame"]], "__init__() (polars.dataframe method)": [[22, "polars.DataFrame.__init__"]], "apply() (polars.dataframe method)": [[23, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[24, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[25, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[26, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[27, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[28, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[29, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[30, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[31, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[32, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[33, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[34, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[35, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[36, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[37, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[38, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[39, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[40, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[41, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[42, "polars.DataFrame.get_columns"]], "groupby() (polars.dataframe method)": [[43, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[44, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[45, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[46, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[47, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[48, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[49, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[50, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[51, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[52, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[53, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[54, "polars.DataFrame.is_unique"]], "join() (polars.dataframe method)": [[55, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[56, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[57, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[58, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[59, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[60, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[61, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[62, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[63, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[64, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[65, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[66, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[67, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[68, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[69, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[70, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[71, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[72, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[73, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[74, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[75, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[76, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[77, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[78, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[79, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[80, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[81, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[82, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[83, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[84, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[85, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[86, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[87, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[88, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[89, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[90, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[91, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[92, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[93, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[94, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[95, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[96, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[97, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[98, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[99, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[100, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[101, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[102, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[103, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[104, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[105, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[106, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[107, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[108, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[109, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[110, "polars.DataFrame.with_row_count"]], "write_avro() (polars.dataframe method)": [[111, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[112, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[113, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[114, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[115, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[116, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[117, "polars.DataType"]], "__init__() (polars.datatype method)": [[117, "polars.DataType.__init__"]], "date (class in polars)": [[118, "polars.Date"]], "__init__() (polars.date method)": [[118, "polars.Date.__init__"]], "datetime (class in polars)": [[119, "polars.Datetime"]], "__init__() (polars.datetime method)": [[119, "polars.Datetime.__init__"]], "duration (class in polars)": [[120, "polars.Duration"]], "__init__() (polars.duration method)": [[120, "polars.Duration.__init__"]], "float32 (class in polars)": [[121, "polars.Float32"]], "__init__() (polars.float32 method)": [[121, "polars.Float32.__init__"]], "float64 (class in polars)": [[122, "polars.Float64"]], "__init__() (polars.float64 method)": [[122, "polars.Float64.__init__"]], "int16 (class in polars)": [[123, "polars.Int16"]], "__init__() (polars.int16 method)": [[123, "polars.Int16.__init__"]], "int32 (class in polars)": [[124, "polars.Int32"]], "__init__() (polars.int32 method)": [[124, "polars.Int32.__init__"]], "int64 (class in polars)": [[125, "polars.Int64"]], "__init__() (polars.int64 method)": [[125, "polars.Int64.__init__"]], "int8 (class in polars)": [[126, "polars.Int8"]], "__init__() (polars.int8 method)": [[126, "polars.Int8.__init__"]], "cache() (polars.lazyframe method)": [[127, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[128, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[129, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[130, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[131, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[132, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[133, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[134, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[135, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[136, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[137, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[138, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[139, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[140, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[141, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[142, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[143, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[144, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[145, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[146, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[147, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[148, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[149, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[150, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[151, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[152, "polars.LazyFrame.last"]], "limit() (polars.lazyframe method)": [[153, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[154, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[155, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[156, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[157, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[158, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[159, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[160, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[161, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[162, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[163, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[164, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[165, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[166, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[167, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[168, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[169, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[170, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[171, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[172, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[173, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[174, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[175, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[176, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[177, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[178, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[179, "polars.LazyFrame.var"]], "with_column() (polars.lazyframe method)": [[180, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[181, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[182, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[183, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[184, "polars.LazyFrame.write_json"]], "list (class in polars)": [[185, "polars.List"]], "__init__() (polars.list method)": [[185, "polars.List.__init__"]], "null (class in polars)": [[186, "polars.Null"]], "__init__() (polars.null method)": [[186, "polars.Null.__init__"]], "object (class in polars)": [[187, "polars.Object"]], "__init__() (polars.object method)": [[187, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[188, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[189, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[190, "polars.SQLContext.register"]], "stringcache (class in polars)": [[191, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[191, "polars.StringCache.__init__"]], "struct (class in polars)": [[192, "polars.Struct"]], "__init__() (polars.struct method)": [[192, "polars.Struct.__init__"]], "time (class in polars)": [[193, "polars.Time"]], "__init__() (polars.time method)": [[193, "polars.Time.__init__"]], "uint16 (class in polars)": [[194, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[194, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[195, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[195, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[196, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[196, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[197, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[197, "polars.UInt8.__init__"]], "unknown (class in polars)": [[198, "polars.Unknown"]], "__init__() (polars.unknown method)": [[198, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[199, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[199, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[200, "polars.align_frames"]], "arg_where() (in module polars)": [[201, "polars.arg_where"]], "collect_all() (in module polars)": [[202, "polars.collect_all"]], "concat() (in module polars)": [[203, "polars.concat"]], "cut() (in module polars)": [[204, "polars.cut"]], "date_range() (in module polars)": [[205, "polars.date_range"]], "arrowerror": [[206, "polars.exceptions.ArrowError"]], "computeerror": [[207, "polars.exceptions.ComputeError"]], "duplicateerror": [[208, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[209, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[210, "polars.exceptions.NoDataError"]], "norowsreturned": [[211, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[212, "polars.exceptions.NotFoundError"]], "panicexception": [[213, "polars.exceptions.PanicException"]], "rowsexception": [[214, "polars.exceptions.RowsException"]], "schemaerror": [[215, "polars.exceptions.SchemaError"]], "shapeerror": [[216, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[217, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[218, "polars.from_arrow"]], "from_dict() (in module polars)": [[219, "polars.from_dict"]], "from_dicts() (in module polars)": [[220, "polars.from_dicts"]], "from_numpy() (in module polars)": [[221, "polars.from_numpy"]], "from_pandas() (in module polars)": [[222, "polars.from_pandas"]], "from_records() (in module polars)": [[223, "polars.from_records"]], "get_dummies() (in module polars)": [[224, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[225, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[226, "polars.internals.batched.BatchedCsvReader.next_batches"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[231, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[232, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[233, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[234, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[235, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[236, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[237, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[238, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[239, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[240, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[241, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[242, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[243, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[244, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[245, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[246, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[247, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[248, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[249, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[250, "polars.internals.dataframe.pivot.PivotOps.sum"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[251, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[252, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[253, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[254, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "ones() (in module polars)": [[255, "polars.ones"]], "read_avro() (in module polars)": [[256, "polars.read_avro"]], "read_csv() (in module polars)": [[257, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[258, "polars.read_csv_batched"]], "read_excel() (in module polars)": [[259, "polars.read_excel"]], "read_ipc() (in module polars)": [[260, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[261, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[262, "polars.read_json"]], "read_ndjson() (in module polars)": [[263, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[264, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[265, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[266, "polars.read_sql"]], "scan_csv() (in module polars)": [[267, "polars.scan_csv"]], "scan_ds() (in module polars)": [[268, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[269, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[270, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[271, "polars.scan_parquet"]], "show_versions() (in module polars)": [[272, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[273, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[274, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[275, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[275, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[276, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[277, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[278, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[279, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[280, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[281, "polars.zeros"]], "abs() (polars.expr method)": [[287, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[288, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[289, "polars.Expr.alias"]], "all() (polars.expr method)": [[290, "polars.Expr.all"]], "any() (polars.expr method)": [[291, "polars.Expr.any"]], "append() (polars.expr method)": [[292, "polars.Expr.append"]], "apply() (polars.expr method)": [[293, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[294, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[295, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[296, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[297, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[298, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[299, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[300, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[301, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[302, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[303, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[304, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[305, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[306, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[307, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[308, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[309, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[310, "polars.Expr.arr.eval"]], "first() (polars.expr.arr method)": [[311, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[312, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[313, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[314, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[315, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[316, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[317, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[318, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[319, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[320, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[321, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[322, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[323, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[324, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[325, "polars.Expr.arr.tail"]], "to_struct() (polars.expr.arr method)": [[326, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[327, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[328, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[329, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[330, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[331, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[332, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[333, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[334, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[335, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[336, "polars.Expr.cosh"]], "count() (polars.expr method)": [[337, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[338, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[339, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[340, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[341, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[342, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[343, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[344, "polars.Expr.diff"]], "dot() (polars.expr method)": [[345, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[346, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[347, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[348, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[349, "polars.Expr.dt.cast_time_zone"]], "day() (polars.expr.dt method)": [[350, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[351, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[352, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[353, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[354, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[355, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[356, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[357, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[358, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[359, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[360, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[361, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[362, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[363, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[364, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[365, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[366, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[367, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[368, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[369, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[370, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[371, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[372, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[373, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[374, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[375, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[376, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[377, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[378, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[379, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[380, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[381, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[382, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[383, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[384, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[385, "polars.Expr.exp"]], "explode() (polars.expr method)": [[386, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[387, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[388, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[389, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[390, "polars.Expr.filter"]], "first() (polars.expr method)": [[391, "polars.Expr.first"]], "flatten() (polars.expr method)": [[392, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[393, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[394, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[395, "polars.Expr.hash"]], "head() (polars.expr method)": [[396, "polars.Expr.head"]], "inspect() (polars.expr method)": [[397, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[398, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[399, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[400, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[401, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[402, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[403, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[404, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[405, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[406, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[407, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[408, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[409, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[410, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[411, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[412, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[413, "polars.Expr.last"]], "len() (polars.expr method)": [[414, "polars.Expr.len"]], "limit() (polars.expr method)": [[415, "polars.Expr.limit"]], "list() (polars.expr method)": [[416, "polars.Expr.list"]], "log() (polars.expr method)": [[417, "polars.Expr.log"]], "log10() (polars.expr method)": [[418, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[419, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[420, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[421, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[422, "polars.Expr.max"]], "mean() (polars.expr method)": [[423, "polars.Expr.mean"]], "median() (polars.expr method)": [[424, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[425, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[426, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[427, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[428, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[429, "polars.Expr.min"]], "mode() (polars.expr method)": [[430, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[431, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[432, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[433, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[434, "polars.Expr.null_count"]], "over() (polars.expr method)": [[435, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[436, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[437, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[438, "polars.Expr.prefix"]], "product() (polars.expr method)": [[439, "polars.Expr.product"]], "quantile() (polars.expr method)": [[440, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[441, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[442, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[443, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[444, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[445, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[446, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[447, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[448, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[449, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[450, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[451, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[452, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[453, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[454, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[455, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[456, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[457, "polars.Expr.round"]], "sample() (polars.expr method)": [[458, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[459, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[460, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[461, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[462, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[463, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[464, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[465, "polars.Expr.sign"]], "sin() (polars.expr method)": [[466, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[467, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[468, "polars.Expr.skew"]], "slice() (polars.expr method)": [[469, "polars.Expr.slice"]], "sort() (polars.expr method)": [[470, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[471, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[472, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[473, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[474, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[475, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[476, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[477, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[478, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[479, "polars.Expr.str.ends_with"]], "extract() (polars.expr.str method)": [[480, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[481, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[482, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[483, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[484, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[485, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[486, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[487, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[488, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[489, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[490, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[491, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[492, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[493, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[494, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[495, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[496, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[497, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[498, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[499, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[500, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[501, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[502, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[503, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[504, "polars.Expr.sum"]], "tail() (polars.expr method)": [[505, "polars.Expr.tail"]], "take() (polars.expr method)": [[506, "polars.Expr.take"]], "take_every() (polars.expr method)": [[507, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[508, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[509, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[510, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[511, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[512, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[513, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[514, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[515, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[516, "polars.Expr.var"]], "where() (polars.expr method)": [[517, "polars.Expr.where"]], "all() (in module polars)": [[518, "polars.all"]], "any() (in module polars)": [[519, "polars.any"]], "apply() (in module polars)": [[520, "polars.apply"]], "arange() (in module polars)": [[521, "polars.arange"]], "argsort_by() (in module polars)": [[522, "polars.argsort_by"]], "avg() (in module polars)": [[523, "polars.avg"]], "coalesce() (in module polars)": [[524, "polars.coalesce"]], "col() (in module polars)": [[525, "polars.col"]], "concat_list() (in module polars)": [[526, "polars.concat_list"]], "concat_str() (in module polars)": [[527, "polars.concat_str"]], "count() (in module polars)": [[528, "polars.count"]], "cov() (in module polars)": [[529, "polars.cov"]], "cumfold() (in module polars)": [[530, "polars.cumfold"]], "cumreduce() (in module polars)": [[531, "polars.cumreduce"]], "cumsum() (in module polars)": [[532, "polars.cumsum"]], "date() (in module polars)": [[533, "polars.date"]], "datetime() (in module polars)": [[534, "polars.datetime"]], "duration() (in module polars)": [[535, "polars.duration"]], "element() (in module polars)": [[536, "polars.element"]], "exclude() (in module polars)": [[537, "polars.exclude"]], "first() (in module polars)": [[538, "polars.first"]], "fold() (in module polars)": [[539, "polars.fold"]], "format() (in module polars)": [[540, "polars.format"]], "groups() (in module polars)": [[541, "polars.groups"]], "head() (in module polars)": [[542, "polars.head"]], "list() (in module polars)": [[543, "polars.list"]], "lit() (in module polars)": [[544, "polars.lit"]], "map() (in module polars)": [[545, "polars.map"]], "max() (in module polars)": [[546, "polars.max"]], "mean() (in module polars)": [[547, "polars.mean"]], "median() (in module polars)": [[548, "polars.median"]], "min() (in module polars)": [[549, "polars.min"]], "n_unique() (in module polars)": [[550, "polars.n_unique"]], "pearson_corr() (in module polars)": [[551, "polars.pearson_corr"]], "quantile() (in module polars)": [[552, "polars.quantile"]], "reduce() (in module polars)": [[553, "polars.reduce"]], "repeat() (in module polars)": [[554, "polars.repeat"]], "select() (in module polars)": [[555, "polars.select"]], "spearman_rank_corr() (in module polars)": [[556, "polars.spearman_rank_corr"]], "std() (in module polars)": [[557, "polars.std"]], "struct() (in module polars)": [[558, "polars.struct"]], "sum() (in module polars)": [[559, "polars.sum"]], "tail() (in module polars)": [[560, "polars.tail"]], "var() (in module polars)": [[561, "polars.var"]], "when() (in module polars)": [[562, "polars.when"]], "lazyframe (class in polars)": [[580, "polars.LazyFrame"]], "abs() (polars.series method)": [[582, "polars.Series.abs"]], "alias() (polars.series method)": [[583, "polars.Series.alias"]], "all() (polars.series method)": [[584, "polars.Series.all"]], "any() (polars.series method)": [[585, "polars.Series.any"]], "append() (polars.series method)": [[586, "polars.Series.append"]], "apply() (polars.series method)": [[587, "polars.Series.apply"]], "arccos() (polars.series method)": [[588, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[589, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[590, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[591, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[592, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[593, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[594, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[595, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[596, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[597, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[598, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[599, "polars.Series.argsort"]], "arr (polars.series attribute)": [[600, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[601, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[602, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[603, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[604, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[605, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[606, "polars.Series.arr.eval"]], "first() (polars.series.arr method)": [[607, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[608, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[609, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[610, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[611, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[612, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[613, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[614, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[615, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[616, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[617, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[618, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[619, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[620, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[621, "polars.Series.arr.tail"]], "to_struct() (polars.series.arr method)": [[622, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[623, "polars.Series.arr.unique"]], "cast() (polars.series method)": [[624, "polars.Series.cast"]], "cat (polars.series attribute)": [[625, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[626, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[627, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[628, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[629, "polars.Series.cleared"]], "clip() (polars.series method)": [[630, "polars.Series.clip"]], "clip_max() (polars.series method)": [[631, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[632, "polars.Series.clip_min"]], "clone() (polars.series method)": [[633, "polars.Series.clone"]], "cos() (polars.series method)": [[634, "polars.Series.cos"]], "cosh() (polars.series method)": [[635, "polars.Series.cosh"]], "cummax() (polars.series method)": [[636, "polars.Series.cummax"]], "cummin() (polars.series method)": [[637, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[638, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[639, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[640, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[641, "polars.Series.describe"]], "diff() (polars.series method)": [[642, "polars.Series.diff"]], "dot() (polars.series method)": [[643, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[644, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[645, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[646, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[647, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[648, "polars.Series.dt.cast_time_zone"]], "day() (polars.series.dt method)": [[649, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[650, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[651, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[652, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[653, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[654, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[655, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[656, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[657, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[658, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[659, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[660, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[661, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[662, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[663, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[664, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[665, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[666, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[667, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[668, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[669, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[670, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[671, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[672, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[673, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[674, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[675, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[676, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[677, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[678, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[679, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[680, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[681, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[682, "polars.Series.dt.year"]], "dtype (polars.series property)": [[683, "polars.Series.dtype"]], "entropy() (polars.series method)": [[684, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[685, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[686, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[687, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[688, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[689, "polars.Series.exp"]], "explode() (polars.series method)": [[690, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[691, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[692, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[693, "polars.Series.fill_null"]], "filter() (polars.series method)": [[694, "polars.Series.filter"]], "flags (polars.series property)": [[695, "polars.Series.flags"]], "floor() (polars.series method)": [[696, "polars.Series.floor"]], "has_validity() (polars.series method)": [[697, "polars.Series.has_validity"]], "hash() (polars.series method)": [[698, "polars.Series.hash"]], "head() (polars.series method)": [[699, "polars.Series.head"]], "inner_dtype (polars.series property)": [[700, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[701, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[702, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[703, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[704, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[705, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[706, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[707, "polars.Series.is_first"]], "is_float() (polars.series method)": [[708, "polars.Series.is_float"]], "is_in() (polars.series method)": [[709, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[710, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[711, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[712, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[713, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[714, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[715, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[716, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[717, "polars.Series.is_utf8"]], "kurtosis() (polars.series method)": [[718, "polars.Series.kurtosis"]], "len() (polars.series method)": [[719, "polars.Series.len"]], "limit() (polars.series method)": [[720, "polars.Series.limit"]], "log() (polars.series method)": [[721, "polars.Series.log"]], "log10() (polars.series method)": [[722, "polars.Series.log10"]], "max() (polars.series method)": [[723, "polars.Series.max"]], "mean() (polars.series method)": [[724, "polars.Series.mean"]], "median() (polars.series method)": [[725, "polars.Series.median"]], "min() (polars.series method)": [[726, "polars.Series.min"]], "mode() (polars.series method)": [[727, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[728, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[729, "polars.Series.n_unique"]], "name (polars.series property)": [[730, "polars.Series.name"]], "nan_max() (polars.series method)": [[731, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[732, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[733, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[734, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[735, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[736, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[737, "polars.Series.peak_min"]], "product() (polars.series method)": [[738, "polars.Series.product"]], "quantile() (polars.series method)": [[739, "polars.Series.quantile"]], "rank() (polars.series method)": [[740, "polars.Series.rank"]], "rechunk() (polars.series method)": [[741, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[742, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[743, "polars.Series.rename"]], "reshape() (polars.series method)": [[744, "polars.Series.reshape"]], "reverse() (polars.series method)": [[745, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[746, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[747, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[748, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[749, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[750, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[751, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[752, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[753, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[754, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[755, "polars.Series.rolling_var"]], "round() (polars.series method)": [[756, "polars.Series.round"]], "sample() (polars.series method)": [[757, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[758, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[759, "polars.Series.series_equal"]], "set() (polars.series method)": [[760, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[761, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[762, "polars.Series.set_sorted"]], "shape (polars.series property)": [[763, "polars.Series.shape"]], "shift() (polars.series method)": [[764, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[765, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[766, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[767, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[768, "polars.Series.shuffle"]], "sign() (polars.series method)": [[769, "polars.Series.sign"]], "sin() (polars.series method)": [[770, "polars.Series.sin"]], "sinh() (polars.series method)": [[771, "polars.Series.sinh"]], "skew() (polars.series method)": [[772, "polars.Series.skew"]], "slice() (polars.series method)": [[773, "polars.Series.slice"]], "sort() (polars.series method)": [[774, "polars.Series.sort"]], "sqrt() (polars.series method)": [[775, "polars.Series.sqrt"]], "std() (polars.series method)": [[776, "polars.Series.std"]], "str (polars.series attribute)": [[777, "polars.Series.str"]], "concat() (polars.series.str method)": [[778, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[779, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[780, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[781, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[782, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[783, "polars.Series.str.ends_with"]], "extract() (polars.series.str method)": [[784, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[785, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[786, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[787, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[788, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[789, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[790, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[791, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[792, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[793, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[794, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[795, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[796, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[797, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[798, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[799, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[800, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[801, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[802, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[803, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[804, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[805, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[806, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[807, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[808, "polars.Series.struct.to_frame"]], "sum() (polars.series method)": [[809, "polars.Series.sum"]], "tail() (polars.series method)": [[810, "polars.Series.tail"]], "take() (polars.series method)": [[811, "polars.Series.take"]], "take_every() (polars.series method)": [[812, "polars.Series.take_every"]], "tan() (polars.series method)": [[813, "polars.Series.tan"]], "tanh() (polars.series method)": [[814, "polars.Series.tanh"]], "time_unit (polars.series property)": [[815, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[816, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[817, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[818, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[819, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[820, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[821, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[822, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[823, "polars.Series.top_k"]], "unique() (polars.series method)": [[824, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[825, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[826, "polars.Series.value_counts"]], "var() (polars.series method)": [[827, "polars.Series.var"]], "view() (polars.series method)": [[828, "polars.Series.view"]], "zip_with() (polars.series method)": [[829, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[843, "polars.SQLContext"]]}})